steps:
    - bash: |
          printenv
      displayName: "Show all env vars"
      condition: eq(variables['system.debug'], 'true')

    - task: NodeTool@0
      displayName: "Use Node $(NodeVersion)"
      inputs:
          versionSpec: $(NodeVersion)

    - task: Npm@1
      displayName: "Use NPM $(NpmVersion)"
      inputs:
          command: custom
          verbose: true
          customCommand: "install -g npm@$(NpmVersion)"

    - task: Npm@1
      displayName: "npm ci"
      inputs:
          command: custom
          verbose: true
          customCommand: ci

    - task: DownloadBuildArtifacts@0
      inputs:
          buildType: "current"
          allowPartiallySucceededBuilds: true
          downloadType: "Specific"
          itemPattern: "**/.nyc_output/**"
          downloadPath: "$(Build.SourcesDirectory)"
      displayName: "Restore Coverage Info"
      condition: always()

    # Now that we have downloaded artificats from `coverage-output-`, copy them
    #   into the root directory (they'll go under `.nyc_output/...`)
    # These are the coverage output files that can be merged and then we can generate a report from them.
    # This step results in downloading all individual `./nyc_output` results in coverage
    #   from all different test outputs. 
    # Running the process of generating reports, will result in generation of 
    #   reports from all coverage data, i.e. we're basically combining all to generate a single merged report.
    - bash: |
        cp -r coverage-output-*/ ./
        cd ./.nyc_output
        ls -dlU .*/ */
        ls
      displayName: "Copy ./.nyc_output"
      condition: always()

    - template: generate_upload_coverage.yml
