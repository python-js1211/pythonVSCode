{
    "sklearn": {
        "modules": {
            "cluster": {
                "modules": {
                    "tests": {
                        "modules": {
                            "common": {
                                "functions": ["generate_clustered_data"],
                                "types": {}
                            },
                            "test_affinity_propagation": {
                                "functions": [
                                    "test_affinity_propagation",
                                    "test_affinity_propagation_predict",
                                    "test_affinity_propagation_predict_error",
                                    "test_affinity_propagation_fit_non_convergence",
                                    "test_affinity_propagation_equal_mutual_similarities",
                                    "test_affinity_propagation_predict_non_convergence",
                                    "test_equal_similarities_and_preferences"
                                ],
                                "types": {}
                            },
                            "test_bicluster": {
                                "functions": [
                                    "test_get_submatrix",
                                    "_test_shape_indices",
                                    "test_spectral_coclustering",
                                    "test_spectral_biclustering",
                                    "_do_scale_test",
                                    "_do_bistochastic_test",
                                    "test_scale_normalize",
                                    "test_bistochastic_normalize",
                                    "test_log_normalize",
                                    "test_fit_best_piecewise",
                                    "test_project_and_cluster",
                                    "test_perfect_checkerboard",
                                    "test_errors"
                                ],
                                "types": {
                                    "MockBiclustering": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [],
                                                "returns": "MockBiclustering"
                                            },
                                            "__init__",
                                            "get_indices"
                                        ]
                                    }
                                }
                            },
                            "test_birch": {
                                "functions": [
                                    "test_n_samples_leaves_roots",
                                    "test_partial_fit",
                                    "test_birch_predict",
                                    "test_n_clusters",
                                    "test_sparse_X",
                                    "check_branching_factor",
                                    "test_branching_factor",
                                    "check_threshold",
                                    "test_threshold"
                                ],
                                "types": {}
                            },
                            "test_dbscan": {
                                "functions": [
                                    "test_dbscan_similarity",
                                    "test_dbscan_feature",
                                    "test_dbscan_sparse",
                                    "test_dbscan_no_core_samples",
                                    "test_dbscan_callable",
                                    "test_dbscan_metric_params",
                                    "test_dbscan_balltree",
                                    "test_input_validation",
                                    "test_dbscan_badargs",
                                    "test_pickle",
                                    "test_boundaries",
                                    "test_weighted_dbscan",
                                    "test_dbscan_precomputed_metric_with_degenerate_input_arrays",
                                    "test_dbscan_precomputed_metric_with_initial_rows_zero"
                                ],
                                "types": {}
                            },
                            "test_feature_agglomeration": {
                                "functions": ["test_feature_agglomeration"],
                                "types": {}
                            },
                            "test_hierarchical": {
                                "functions": [
                                    "test_linkage_misc",
                                    "test_structured_linkage_tree",
                                    "test_unstructured_linkage_tree",
                                    "test_height_linkage_tree",
                                    "test_agglomerative_clustering_wrong_arg_memory",
                                    "test_ward_agglomeration",
                                    "assess_same_labelling",
                                    "test_scikit_vs_scipy",
                                    "test_connectivity_propagation",
                                    "test_ward_tree_children_order",
                                    "test_ward_linkage_tree_return_distance",
                                    "test_connectivity_fixing_non_lil",
                                    "test_int_float_dict",
                                    "test_connectivity_callable",
                                    "test_connectivity_ignores_diagonal",
                                    "test_compute_full_tree",
                                    "test_n_components",
                                    "test_agg_n_clusters",
                                    "test_affinity_passed_to_fix_connectivity",
                                    "test_small_distance_threshold",
                                    "test_cluster_distances_with_distance_threshold",
                                    "test_dist_threshold_invalid_parameters",
                                    "test_n_components_deprecation"
                                ],
                                "types": {
                                    "FakeAffinity": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "FakeAffinity"
                                            },
                                            {
                                                "name": "increment",
                                                "updates": [0]
                                            }
                                        ]
                                    }
                                }
                            },
                            "test_k_means": {
                                "functions": [
                                    "test_labels_assignment_and_inertia",
                                    "test_minibatch_update_consistency",
                                    "_check_fitted_model",
                                    "test_k_means_new_centers",
                                    "test_k_means_precompute_distances_flag",
                                    "test_k_means_plus_plus_init_not_precomputed",
                                    "test_k_means_random_init_not_precomputed",
                                    "test_k_means_n_init",
                                    "test_k_means_fortran_aligned_data",
                                    "test_mb_kmeans_verbose",
                                    "test_minibatch_init_with_large_k",
                                    "test_minibatch_k_means_init_multiple_runs_with_explicit_centers",
                                    "test_minibatch_sensible_reassign_fit",
                                    "test_minibatch_sensible_reassign_partial_fit",
                                    "test_minibatch_reassign",
                                    "test_minibatch_with_many_reassignments",
                                    "test_sparse_mb_k_means_callable_init",
                                    "test_mini_batch_k_means_random_init_partial_fit",
                                    "test_minibatch_default_init_size",
                                    "test_minibatch_tol",
                                    "test_minibatch_set_init_size",
                                    "test_k_means_copyx",
                                    "test_k_means_non_collapsed",
                                    "test_int_input",
                                    "test_transform",
                                    "test_fit_transform",
                                    "test_full_vs_elkan",
                                    "test_n_init",
                                    "test_k_means_function",
                                    "test_x_squared_norms_init_centroids",
                                    "test_max_iter_error",
                                    "test_k_means_init_centers",
                                    "test_sparse_validate_centers",
                                    "test_less_centers_than_unique_points",
                                    "_sort_centers",
                                    "test_weighted_vs_repeated",
                                    "test_unit_weights_vs_no_weights",
                                    "test_scaled_weights",
                                    "test_sample_weight_length",
                                    "test_check_sample_weight",
                                    "test_iter_attribute",
                                    "test_k_means_empty_cluster_relocated"
                                ],
                                "types": {}
                            },
                            "test_mean_shift": {
                                "functions": [
                                    "test_estimate_bandwidth",
                                    "test_estimate_bandwidth_1sample",
                                    "test_mean_shift_negative_bandwidth",
                                    "test_estimate_bandwidth_with_sparse_matrix",
                                    "test_parallel",
                                    "test_meanshift_predict",
                                    "test_meanshift_all_orphans",
                                    "test_unfitted",
                                    "test_cluster_intensity_tie",
                                    "test_bin_seeds"
                                ],
                                "types": {}
                            },
                            "test_optics": {
                                "functions": [
                                    "test_extract_xi",
                                    "test_cluster_hierarchy_",
                                    "test_correct_number_of_clusters",
                                    "test_minimum_number_of_sample_check",
                                    "test_bad_extract",
                                    "test_bad_reachability",
                                    "test_close_extract",
                                    "test_min_samples_edge_case",
                                    "test_min_cluster_size_invalid2",
                                    "test_processing_order",
                                    "test_compare_to_ELKI",
                                    "test_wrong_cluster_method",
                                    "test_extract_dbscan",
                                    "test_precomputed_dists"
                                ],
                                "types": {}
                            },
                            "test_spectral": {
                                "functions": [
                                    "test_spectral_unknown_mode",
                                    "test_spectral_unknown_assign_labels",
                                    "test_spectral_clustering_sparse",
                                    "test_affinities",
                                    "test_spectral_clustering_with_arpack_amg_solvers"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "affinity_propagation_": {
                        "functions": [
                            "_equal_similarities_and_preferences",
                            "affinity_propagation"
                        ],
                        "types": {
                            "AffinityPropagation": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "AffinityPropagation"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict"
                                ]
                            }
                        }
                    },
                    "bicluster": {
                        "functions": [
                            "_scale_normalize",
                            "_bistochastic_normalize",
                            "_log_normalize"
                        ],
                        "types": {
                            "BaseSpectral": {
                                "methods": ["_check_parameters", "fit", "_svd", "_k_means"]
                            },
                            "SpectralCoclustering": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "SpectralCoclustering"
                                    },
                                    "__init__",
                                    {
                                        "name": "_fit",
                                        "updates": [0]
                                    },
                                    "fit"
                                ]
                            },
                            "SpectralBiclustering": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "SpectralBiclustering"
                                    },
                                    "_check_parameters",
                                    {
                                        "name": "_fit",
                                        "updates": [0]
                                    },
                                    "_fit_best_piecewise",
                                    "_project_and_cluster",
                                    "fit"
                                ]
                            }
                        }
                    },
                    "birch": {
                        "functions": ["_iterate_sparse_X", "_split_node"],
                        "types": {
                            "_CFNode": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_CFNode"
                                    },
                                    {
                                        "name": "append_subcluster",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "update_split_subclusters",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "insert_cf_subcluster",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "_CFSubcluster": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_CFSubcluster"
                                    },
                                    {
                                        "name": "update",
                                        "updates": [0]
                                    },
                                    "merge_subcluster"
                                ]
                            },
                            "Birch": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "Birch"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_fit",
                                        "updates": [0]
                                    },
                                    "_get_leaves",
                                    {
                                        "name": "partial_fit",
                                        "updates": [0]
                                    },
                                    "_check_fit",
                                    "predict",
                                    "transform",
                                    {
                                        "name": "_global_clustering",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "dbscan_": {
                        "functions": ["dbscan"],
                        "types": {
                            "DBSCAN": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "DBSCAN"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_predict",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "hierarchical": {
                        "functions": [
                            {
                                "name": "_fix_connectivity",
                                "updates": [1]
                            },
                            "_single_linkage_tree",
                            "ward_tree",
                            {
                                "name": "linkage_tree",
                                "updates": [1]
                            },
                            "_complete_linkage",
                            "_average_linkage",
                            "_single_linkage",
                            "_hc_cut"
                        ],
                        "types": {
                            "AgglomerativeClustering": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "AgglomerativeClustering"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "FeatureAgglomeration": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "FeatureAgglomeration"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "k_means_": {
                        "functions": [
                            "_k_init",
                            "_validate_center_shape",
                            "_tolerance",
                            "_check_sample_weight",
                            "k_means",
                            "_kmeans_single_elkan",
                            "_kmeans_single_lloyd",
                            {
                                "name": "_labels_inertia_precompute_dense",
                                "updates": [4]
                            },
                            "_labels_inertia",
                            "_init_centroids",
                            {
                                "name": "_mini_batch_step",
                                "updates": [3, 4, 5]
                            },
                            {
                                "name": "_mini_batch_convergence",
                                "updates": [7]
                            }
                        ],
                        "types": {
                            "KMeans": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "KMeans"
                                    },
                                    "_check_test_data",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_predict",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "_transform",
                                    "predict",
                                    "score"
                                ]
                            },
                            "MiniBatchKMeans": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MiniBatchKMeans"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "_labels_inertia_minibatch",
                                    {
                                        "name": "partial_fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    {
                                        "name": "fit_predict",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "score"
                                ]
                            }
                        }
                    },
                    "mean_shift_": {
                        "functions": [
                            "estimate_bandwidth",
                            "_mean_shift_single_seed",
                            "mean_shift",
                            "get_bin_seeds"
                        ],
                        "types": {
                            "MeanShift": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MeanShift"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict"
                                ]
                            }
                        }
                    },
                    "optics_": {
                        "functions": [
                            "_validate_size",
                            "_compute_core_distances_",
                            "compute_optics_graph",
                            {
                                "name": "_set_reach_dist",
                                "updates": [1, 2]
                            },
                            "cluster_optics_dbscan",
                            "cluster_optics_xi",
                            "_extend_region",
                            "_update_filter_sdas",
                            "_correct_predecessor",
                            "_xi_cluster",
                            "_extract_xi_labels"
                        ],
                        "types": {
                            "OPTICS": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "OPTICS"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "setup": {
                        "functions": ["configuration"],
                        "types": {}
                    },
                    "spectral": {
                        "functions": [
                            {
                                "name": "discretize",
                                "updates": [0]
                            },
                            "spectral_clustering"
                        ],
                        "types": {
                            "SpectralClustering": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "SpectralClustering"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    }
                },
                "types": {
                    "SpectralClustering": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "SpectralClustering"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "MeanShift": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "MeanShift"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict"
                        ]
                    },
                    "AffinityPropagation": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "AffinityPropagation"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict"
                        ]
                    },
                    "AgglomerativeClustering": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "AgglomerativeClustering"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "FeatureAgglomeration": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "FeatureAgglomeration"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "KMeans": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "KMeans"
                            },
                            "_check_test_data",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_predict",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            "transform",
                            "_transform",
                            "predict",
                            "score"
                        ]
                    },
                    "MiniBatchKMeans": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "MiniBatchKMeans"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "_labels_inertia_minibatch",
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            "predict",
                            {
                                "name": "fit_predict",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            "transform",
                            "score"
                        ]
                    },
                    "DBSCAN": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "DBSCAN"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_predict",
                                "updates": [0]
                            }
                        ]
                    },
                    "OPTICS": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "OPTICS"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "SpectralBiclustering": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "SpectralBiclustering"
                            },
                            "_check_parameters",
                            {
                                "name": "_fit",
                                "updates": [0]
                            },
                            "_fit_best_piecewise",
                            "_project_and_cluster",
                            "fit"
                        ]
                    },
                    "SpectralCoclustering": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "SpectralCoclustering"
                            },
                            "__init__",
                            {
                                "name": "_fit",
                                "updates": [0]
                            },
                            "fit"
                        ]
                    },
                    "Birch": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "Birch"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "_fit",
                                "updates": [0]
                            },
                            "_get_leaves",
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            "_check_fit",
                            "predict",
                            "transform",
                            {
                                "name": "_global_clustering",
                                "updates": [0]
                            }
                        ]
                    }
                },
                "functions": [
                    "spectral_clustering",
                    "mean_shift",
                    "estimate_bandwidth",
                    "get_bin_seeds",
                    "affinity_propagation",
                    "ward_tree",
                    {
                        "name": "linkage_tree",
                        "updates": [1]
                    },
                    "k_means",
                    "dbscan",
                    "cluster_optics_dbscan",
                    "compute_optics_graph",
                    "cluster_optics_xi"
                ]
            },
            "compose": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_column_transformer": {
                                "functions": [
                                    "test_column_transformer",
                                    "test_column_transformer_dataframe",
                                    "test_column_transformer_sparse_array",
                                    "test_column_transformer_list",
                                    "test_column_transformer_sparse_stacking",
                                    "test_column_transformer_mixed_cols_sparse",
                                    "test_column_transformer_sparse_threshold",
                                    "test_column_transformer_error_msg_1D",
                                    "test_2D_transformer_output",
                                    "test_2D_transformer_output_pandas",
                                    "test_column_transformer_invalid_transformer",
                                    "test_make_column_transformer",
                                    "test_make_column_transformer_pandas",
                                    "test_make_column_transformer_kwargs",
                                    "test_make_column_transformer_remainder_transformer",
                                    "test_column_transformer_get_set_params",
                                    "test_column_transformer_named_estimators",
                                    "test_column_transformer_cloning",
                                    "test_column_transformer_get_feature_names",
                                    "test_column_transformer_special_strings",
                                    "test_column_transformer_remainder",
                                    "test_column_transformer_no_remaining_remainder_transformer",
                                    "test_column_transformer_drops_all_remainder_transformer",
                                    "test_column_transformer_sparse_remainder_transformer",
                                    "test_column_transformer_drop_all_sparse_remainder_transformer",
                                    "test_column_transformer_get_set_params_with_remainder",
                                    "test_column_transformer_no_estimators",
                                    "test_column_transformer_no_estimators_set_params",
                                    "test_column_transformer_callable_specifier",
                                    "test_column_transformer_negative_column_indexes"
                                ],
                                "types": {
                                    "Trans": {
                                        "methods": ["fit", "transform"]
                                    },
                                    "DoubleTrans": {
                                        "methods": ["fit", "transform"]
                                    },
                                    "SparseMatrixTrans": {
                                        "methods": ["fit", "transform"]
                                    },
                                    "TransNo2D": {
                                        "methods": ["fit", "transform"]
                                    },
                                    "TransRaise": {
                                        "methods": ["fit", "transform"]
                                    },
                                    "TransAssert": {
                                        "methods": ["fit", "transform"]
                                    },
                                    "NoTrans": {
                                        "methods": ["fit", "predict"]
                                    }
                                }
                            },
                            "test_target": {
                                "functions": [
                                    "test_transform_target_regressor_error",
                                    "test_transform_target_regressor_invertible",
                                    "_check_standard_scaled",
                                    "_check_shifted_by_one",
                                    "test_transform_target_regressor_functions",
                                    "test_transform_target_regressor_functions_multioutput",
                                    "test_transform_target_regressor_2d_transformer_multioutput",
                                    "test_transform_target_regressor_multi_to_single",
                                    "test_transform_target_regressor_ensure_y_array"
                                ],
                                "types": {
                                    "DummyCheckerArrayTransformer": {
                                        "methods": ["fit", "transform", "inverse_transform"]
                                    },
                                    "DummyCheckerListRegressor": {
                                        "methods": ["fit", "predict"]
                                    },
                                    "DummyTransformer": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "DummyTransformer"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "transform",
                                            "inverse_transform"
                                        ]
                                    }
                                }
                            }
                        },
                        "types": {},
                        "functions": []
                    }
                },
                "types": {},
                "functions": []
            },
            "covariance": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_covariance": {
                                "functions": [
                                    "test_covariance",
                                    "test_shrunk_covariance",
                                    "test_ledoit_wolf",
                                    "_naive_ledoit_wolf_shrinkage",
                                    "test_ledoit_wolf_small",
                                    "test_ledoit_wolf_large",
                                    "test_oas"
                                ],
                                "types": {}
                            },
                            "test_elliptic_envelope": {
                                "functions": [
                                    "test_elliptic_envelope",
                                    "test_score_samples",
                                    "test_raw_values_deprecation",
                                    "test_threshold_deprecation"
                                ],
                                "types": {}
                            },
                            "test_graphical_lasso": {
                                "functions": [
                                    "test_graphical_lasso",
                                    "test_graphical_lasso_iris",
                                    "test_graph_lasso_2D",
                                    "test_graphical_lasso_iris_singular"
                                ],
                                "types": {}
                            },
                            "test_graph_lasso": {
                                "functions": [],
                                "types": {}
                            },
                            "test_robust_covariance": {
                                "functions": [
                                    "test_mcd",
                                    "test_fast_mcd_on_invalid_input",
                                    "test_mcd_class_on_invalid_input",
                                    "launch_mcd_on_dataset",
                                    "test_mcd_issue1127",
                                    "test_mcd_issue3367",
                                    "test_mcd_support_covariance_is_zero",
                                    "test_mcd_increasing_det_warning"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "elliptic_envelope": {
                        "functions": [],
                        "types": {
                            "EllipticEnvelope": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "EllipticEnvelope"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "decision_function",
                                    "score_samples",
                                    "predict",
                                    "score"
                                ]
                            }
                        }
                    },
                    "empirical_covariance_": {
                        "functions": ["log_likelihood", "empirical_covariance"],
                        "types": {
                            "EmpiricalCovariance": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "EmpiricalCovariance"
                                    },
                                    {
                                        "name": "_set_covariance",
                                        "updates": [0]
                                    },
                                    "get_precision",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "score",
                                    "error_norm",
                                    "mahalanobis"
                                ]
                            }
                        }
                    },
                    "graph_lasso_": {
                        "functions": [
                            "_objective",
                            "_dual_gap",
                            "alpha_max",
                            "graphical_lasso",
                            "graphical_lasso_path"
                        ],
                        "types": {
                            "GraphicalLasso": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "GraphicalLasso"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "GraphicalLassoCV": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "GraphicalLassoCV"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "GraphLasso": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "GraphLassoCV": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "robust_covariance": {
                        "functions": ["c_step", "_c_step", "select_candidates", "fast_mcd"],
                        "types": {
                            "MinCovDet": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MinCovDet"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "correct_covariance",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "reweight_covariance",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "shrunk_covariance_": {
                        "functions": [
                            "shrunk_covariance",
                            "ledoit_wolf_shrinkage",
                            "ledoit_wolf",
                            "oas"
                        ],
                        "types": {
                            "ShrunkCovariance": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "ShrunkCovariance"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "LedoitWolf": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LedoitWolf"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "OAS": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    }
                },
                "types": {
                    "EmpiricalCovariance": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "EmpiricalCovariance"
                            },
                            {
                                "name": "_set_covariance",
                                "updates": [0]
                            },
                            "get_precision",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "score",
                            "error_norm",
                            "mahalanobis"
                        ]
                    },
                    "ShrunkCovariance": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "ShrunkCovariance"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "LedoitWolf": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LedoitWolf"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "OAS": {
                        "methods": [
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "MinCovDet": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "MinCovDet"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "correct_covariance",
                                "updates": [0]
                            },
                            {
                                "name": "reweight_covariance",
                                "updates": [0]
                            }
                        ]
                    },
                    "GraphLasso": {
                        "methods": [
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "GraphLassoCV": {
                        "methods": [
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "GraphicalLasso": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "GraphicalLasso"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "GraphicalLassoCV": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "GraphicalLassoCV"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "EllipticEnvelope": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "EllipticEnvelope"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "decision_function",
                            "score_samples",
                            "predict",
                            "score"
                        ]
                    }
                },
                "functions": [
                    "empirical_covariance",
                    "log_likelihood",
                    "shrunk_covariance",
                    "ledoit_wolf",
                    "ledoit_wolf_shrinkage",
                    "oas",
                    "fast_mcd",
                    "graphical_lasso"
                ]
            },
            "cross_decomposition": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_pls": {
                                "functions": [
                                    "test_pls",
                                    "test_convergence_fail",
                                    "test_PLSSVD",
                                    "test_univariate_pls_regression",
                                    "test_predict_transform_copy",
                                    "test_scale_and_stability",
                                    "test_pls_errors"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "cca_": {
                        "functions": [],
                        "types": {
                            "CCA": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "CCA"
                                    },
                                    "__init__"
                                ]
                            }
                        }
                    },
                    "pls_": {
                        "functions": [
                            "_nipals_twoblocks_inner_loop",
                            "_svd_cross_product",
                            "_center_scale_xy"
                        ],
                        "types": {
                            "_PLS": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "predict",
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    "_more_tags"
                                ]
                            },
                            "PLSRegression": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "PLSRegression"
                                    },
                                    "__init__",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "predict",
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "PLSCanonical": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "PLSCanonical"
                                    },
                                    "__init__",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "predict",
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "PLSSVD": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "PLSSVD"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform",
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    }
                },
                "types": {},
                "functions": []
            },
            "cross_validation": {
                "functions": [
                    { "name": "train_test_split", "returns": "List[numpy.ndarray]" }
                ]
            },
            "datasets": {
                "modules": {
                    "data": {
                        "modules": {},
                        "types": {},
                        "functions": []
                    },
                    "descr": {
                        "modules": {},
                        "types": {},
                        "functions": []
                    },
                    "images": {
                        "modules": {},
                        "types": {},
                        "functions": []
                    },
                    "tests": {
                        "modules": {
                            "data": {
                                "modules": {
                                    "openml": {
                                        "modules": {
                                            "1": {
                                                "modules": {},
                                                "types": {},
                                                "functions": []
                                            },
                                            "2": {
                                                "modules": {},
                                                "types": {},
                                                "functions": []
                                            },
                                            "3": {
                                                "modules": {},
                                                "types": {},
                                                "functions": []
                                            },
                                            "61": {
                                                "modules": {},
                                                "types": {},
                                                "functions": []
                                            },
                                            "292": {
                                                "modules": {},
                                                "types": {},
                                                "functions": []
                                            },
                                            "561": {
                                                "modules": {},
                                                "types": {},
                                                "functions": []
                                            },
                                            "1119": {
                                                "modules": {},
                                                "types": {},
                                                "functions": []
                                            },
                                            "40589": {
                                                "modules": {},
                                                "types": {},
                                                "functions": []
                                            },
                                            "40675": {
                                                "modules": {},
                                                "types": {},
                                                "functions": []
                                            },
                                            "40945": {
                                                "modules": {},
                                                "types": {},
                                                "functions": []
                                            },
                                            "40966": {
                                                "modules": {},
                                                "types": {},
                                                "functions": []
                                            }
                                        },
                                        "types": {},
                                        "functions": []
                                    }
                                },
                                "types": {},
                                "functions": []
                            },
                            "test_20news": {
                                "functions": [
                                    "test_20news",
                                    "test_20news_length_consistency",
                                    "test_20news_vectorized"
                                ],
                                "types": {}
                            },
                            "test_base": {
                                "functions": [
                                    "_remove_dir",
                                    "test_data_home",
                                    "test_default_empty_load_files",
                                    "test_default_load_files",
                                    "test_load_files_w_categories_desc_and_encoding",
                                    "test_load_files_wo_load_content",
                                    "test_load_sample_images",
                                    "test_load_digits",
                                    "test_load_digits_n_class_lt_10",
                                    "test_load_sample_image",
                                    "test_load_missing_sample_image_error",
                                    "test_load_diabetes",
                                    "test_load_linnerud",
                                    "test_load_iris",
                                    "test_load_wine",
                                    "test_load_breast_cancer",
                                    "test_load_boston",
                                    "test_loads_dumps_bunch",
                                    "test_bunch_pickle_generated_with_0_16_and_read_with_0_17",
                                    "test_bunch_dir",
                                    "test_refresh_cache"
                                ],
                                "types": {}
                            },
                            "test_california_housing": {
                                "functions": ["fetch", "test_fetch"],
                                "types": {}
                            },
                            "test_common": {
                                "functions": ["check_return_X_y"],
                                "types": {}
                            },
                            "test_covtype": {
                                "functions": ["fetch", "test_fetch"],
                                "types": {}
                            },
                            "test_kddcup99": {
                                "functions": ["test_percent10", "test_shuffle"],
                                "types": {}
                            },
                            "test_lfw": {
                                "functions": [
                                    "setup_module",
                                    "teardown_module",
                                    "test_load_empty_lfw_people",
                                    "test_load_fake_lfw_people",
                                    "test_load_fake_lfw_people_too_restrictive",
                                    "test_load_empty_lfw_pairs",
                                    "test_load_fake_lfw_pairs"
                                ],
                                "types": {}
                            },
                            "test_mldata": {
                                "functions": [],
                                "types": {}
                            },
                            "test_openml": {
                                "functions": [
                                    "_test_features_list",
                                    "_fetch_dataset_from_openml",
                                    "_monkey_patch_webbased_functions",
                                    "test_decode_iris",
                                    "test_decode_anneal",
                                    "test_decode_cpu",
                                    "test_decode_emotions",
                                    "test_retry_with_clean_cache",
                                    "test_retry_with_clean_cache_http_error",
                                    "test_fetch_openml_raises_illegal_argument"
                                ],
                                "types": {
                                    "MockHTTPResponse": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MockHTTPResponse"
                                            },
                                            "read",
                                            "tell",
                                            "seek",
                                            "close",
                                            "info"
                                        ]
                                    }
                                }
                            },
                            "test_rcv1": {
                                "functions": ["test_fetch_rcv1"],
                                "types": {}
                            },
                            "test_samples_generator": {
                                "functions": [
                                    "test_make_classification",
                                    "test_make_classification_informative_features",
                                    "test_make_multilabel_classification_return_sequences",
                                    "test_make_multilabel_classification_return_indicator",
                                    "test_make_multilabel_classification_return_indicator_sparse",
                                    "test_make_hastie_10_2",
                                    "test_make_regression",
                                    "test_make_regression_multitarget",
                                    "test_make_blobs",
                                    "test_make_blobs_n_samples_list",
                                    "test_make_blobs_n_samples_list_with_centers",
                                    "test_make_blobs_error",
                                    "test_make_friedman1",
                                    "test_make_friedman2",
                                    "test_make_friedman3",
                                    "test_make_low_rank_matrix",
                                    "test_make_sparse_coded_signal",
                                    "test_make_sparse_uncorrelated",
                                    "test_make_spd_matrix",
                                    "test_make_swiss_roll",
                                    "test_make_s_curve",
                                    "test_make_biclusters",
                                    "test_make_checkerboard",
                                    "test_make_moons",
                                    "test_make_circles"
                                ],
                                "types": {}
                            },
                            "test_svmlight_format": {
                                "functions": [
                                    "test_load_svmlight_file",
                                    "test_load_svmlight_file_fd",
                                    "test_load_svmlight_file_multilabel",
                                    "test_load_svmlight_files",
                                    "test_load_svmlight_file_n_features",
                                    "test_load_compressed",
                                    "test_load_invalid_file",
                                    "test_load_invalid_order_file",
                                    "test_load_zero_based",
                                    "test_load_zero_based_auto",
                                    "test_load_with_qid",
                                    "test_load_invalid_file2",
                                    "test_not_a_filename",
                                    "test_invalid_filename",
                                    "test_dump",
                                    "test_dump_multilabel",
                                    "test_dump_concise",
                                    "test_dump_comment",
                                    "test_dump_invalid",
                                    "test_dump_query_id",
                                    "test_load_with_long_qid",
                                    "test_load_zeros",
                                    "test_load_offset_exhaustive_splits",
                                    "test_load_with_offsets_error"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "base": {
                        "functions": [
                            "get_data_home",
                            "clear_data_home",
                            "load_files",
                            "load_data",
                            "load_wine",
                            "load_iris",
                            "load_breast_cancer",
                            "load_digits",
                            "load_diabetes",
                            "load_linnerud",
                            "load_boston",
                            "load_sample_images",
                            "load_sample_image",
                            "_pkl_filepath",
                            "_sha256",
                            "_fetch_remote",
                            "_refresh_cache"
                        ],
                        "types": {}
                    },
                    "california_housing": {
                        "functions": ["fetch_california_housing"],
                        "types": {}
                    },
                    "covtype": {
                        "functions": ["fetch_covtype"],
                        "types": {}
                    },
                    "kddcup99": {
                        "functions": ["fetch_kddcup99", "_fetch_brute_kddcup99", "_mkdirp"],
                        "types": {}
                    },
                    "lfw": {
                        "functions": [
                            "_check_fetch_lfw",
                            "_load_imgs",
                            "_fetch_lfw_people",
                            "fetch_lfw_people",
                            "_fetch_lfw_pairs",
                            "fetch_lfw_pairs"
                        ],
                        "types": {}
                    },
                    "mldata": {
                        "functions": ["setup_module", "teardown_module"],
                        "types": {}
                    },
                    "olivetti_faces": {
                        "functions": ["fetch_olivetti_faces"],
                        "types": {}
                    },
                    "openml": {
                        "functions": [
                            "_get_local_path",
                            "_retry_with_clean_cache",
                            "_open_openml_url",
                            "_get_json_content_from_openml_api",
                            "_split_sparse_columns",
                            "_sparse_data_to_array",
                            "_convert_arff_data",
                            "_get_data_info_by_name",
                            "_get_data_description_by_id",
                            "_get_data_features",
                            "_get_data_qualities",
                            "_get_data_shape",
                            "_download_data_arff",
                            "_verify_target_data_type",
                            "_valid_data_column_names",
                            "fetch_openml"
                        ],
                        "types": {}
                    },
                    "rcv1": {
                        "functions": [
                            "fetch_rcv1",
                            "_inverse_permutation",
                            "_find_permutation"
                        ],
                        "types": {}
                    },
                    "samples_generator": {
                        "functions": [
                            "_generate_hypercube",
                            {
                                "name": "make_classification",
                                "updates": [7]
                            },
                            "make_multilabel_classification",
                            "make_hastie_10_2",
                            "make_regression",
                            "make_circles",
                            "make_moons",
                            "make_blobs",
                            "make_friedman1",
                            "make_friedman2",
                            "make_friedman3",
                            "make_low_rank_matrix",
                            "make_sparse_coded_signal",
                            "make_sparse_uncorrelated",
                            "make_spd_matrix",
                            "make_sparse_spd_matrix",
                            "make_swiss_roll",
                            "make_s_curve",
                            "make_gaussian_quantiles",
                            "_shuffle",
                            "make_biclusters",
                            "make_checkerboard"
                        ],
                        "types": {}
                    },
                    "setup": {
                        "functions": ["configuration"],
                        "types": {}
                    },
                    "species_distributions": {
                        "functions": [
                            "_load_coverage",
                            "_load_csv",
                            "construct_grids",
                            "fetch_species_distributions"
                        ],
                        "types": {}
                    },
                    "svmlight_format": {
                        "functions": [
                            "load_svmlight_file",
                            "_gen_open",
                            "_open_and_load",
                            "load_svmlight_files",
                            "_dump_svmlight",
                            "dump_svmlight_file"
                        ],
                        "types": {}
                    },
                    "twenty_newsgroups": {
                        "functions": [
                            "_download_20newsgroups",
                            "strip_newsgroup_header",
                            "strip_newsgroup_quoting",
                            "strip_newsgroup_footer",
                            "fetch_20newsgroups",
                            "fetch_20newsgroups_vectorized"
                        ],
                        "types": {}
                    }
                },
                "types": {},
                "functions": [
                    "load_breast_cancer",
                    "load_boston",
                    "load_diabetes",
                    "load_digits",
                    "load_files",
                    "load_iris",
                    "load_linnerud",
                    "load_sample_images",
                    "load_sample_image",
                    "load_wine",
                    "get_data_home",
                    "clear_data_home",
                    "fetch_covtype",
                    "fetch_kddcup99",
                    "fetch_lfw_pairs",
                    "fetch_lfw_people",
                    "fetch_20newsgroups",
                    "fetch_20newsgroups_vectorized",
                    "fetch_openml",
                    {
                        "name": "make_classification",
                        "updates": [7]
                    },
                    "make_multilabel_classification",
                    "make_hastie_10_2",
                    "make_regression",
                    "make_blobs",
                    "make_moons",
                    "make_circles",
                    "make_friedman1",
                    "make_friedman2",
                    "make_friedman3",
                    "make_low_rank_matrix",
                    "make_sparse_coded_signal",
                    "make_sparse_uncorrelated",
                    "make_spd_matrix",
                    "make_swiss_roll",
                    "make_s_curve",
                    "make_sparse_spd_matrix",
                    "make_gaussian_quantiles",
                    "make_biclusters",
                    "make_checkerboard",
                    "load_svmlight_file",
                    "load_svmlight_files",
                    "dump_svmlight_file",
                    "fetch_olivetti_faces",
                    "fetch_species_distributions",
                    "fetch_california_housing",
                    "fetch_rcv1"
                ]
            },
            "decomposition": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_dict_learning": {
                                "functions": [
                                    "test_sparse_encode_shapes_omp",
                                    "test_dict_learning_shapes",
                                    "test_dict_learning_overcomplete",
                                    "test_dict_learning_reconstruction",
                                    "test_dict_learning_reconstruction_parallel",
                                    "test_dict_learning_lassocd_readonly_data",
                                    "test_dict_learning_nonzero_coefs",
                                    "test_dict_learning_unknown_fit_algorithm",
                                    "test_dict_learning_split",
                                    "test_dict_learning_online_shapes",
                                    "test_dict_learning_online_verbosity",
                                    "test_dict_learning_online_estimator_shapes",
                                    "test_dict_learning_online_overcomplete",
                                    "test_dict_learning_online_initialization",
                                    "test_dict_learning_online_readonly_initialization",
                                    "test_dict_learning_online_partial_fit",
                                    "test_sparse_encode_shapes",
                                    "test_sparse_encode_input",
                                    "test_sparse_encode_error",
                                    "test_sparse_encode_error_default_sparsity",
                                    "test_unknown_method",
                                    "test_sparse_coder_estimator",
                                    "test_sparse_coder_parallel_mmap"
                                ],
                                "types": {}
                            },
                            "test_factor_analysis": {
                                "functions": [],
                                "types": {}
                            },
                            "test_fastica": {
                                "functions": [
                                    "center_and_norm",
                                    "test_gs",
                                    "test_fastica_nowhiten",
                                    "test_fastica_convergence_fail",
                                    "test_non_square_fastica",
                                    "test_fit_transform",
                                    "test_inverse_transform",
                                    "test_fastica_errors"
                                ],
                                "types": {}
                            },
                            "test_incremental_pca": {
                                "functions": [
                                    "test_incremental_pca",
                                    "test_incremental_pca_check_projection",
                                    "test_incremental_pca_inverse",
                                    "test_incremental_pca_validation",
                                    "test_n_components_none",
                                    "test_incremental_pca_set_params",
                                    "test_incremental_pca_num_features_change",
                                    "test_incremental_pca_batch_signs",
                                    "test_incremental_pca_batch_values",
                                    "test_incremental_pca_batch_rank",
                                    "test_incremental_pca_partial_fit",
                                    "test_incremental_pca_against_pca_iris",
                                    "test_incremental_pca_against_pca_random_data",
                                    "test_explained_variances",
                                    "test_singular_values",
                                    "test_whitening",
                                    "test_incremental_pca_partial_fit_float_division"
                                ],
                                "types": {}
                            },
                            "test_kernel_pca": {
                                "functions": [
                                    "test_kernel_pca",
                                    "test_kernel_pca_invalid_parameters",
                                    "test_kernel_pca_consistent_transform",
                                    "test_kernel_pca_deterministic_output",
                                    "test_kernel_pca_sparse",
                                    "test_kernel_pca_linear_kernel",
                                    "test_kernel_pca_n_components",
                                    "test_remove_zero_eig",
                                    "test_leave_zero_eig",
                                    "test_kernel_pca_precomputed",
                                    "test_kernel_pca_invalid_kernel"
                                ],
                                "types": {}
                            },
                            "test_nmf": {
                                "functions": [
                                    "test_initialize_nn_output",
                                    "test_parameter_checking",
                                    "test_initialize_close",
                                    "test_initialize_variants",
                                    "test_nmf_transform_custom_init",
                                    "test_n_components_greater_n_features",
                                    "test_nmf_sparse_input",
                                    "test_nmf_sparse_transform",
                                    "test_non_negative_factorization_consistency",
                                    "test_non_negative_factorization_checking",
                                    "_beta_divergence_dense",
                                    "test_beta_divergence",
                                    "test_special_sparse_dot",
                                    "test_nmf_negative_beta_loss",
                                    "test_nmf_regularization",
                                    "test_nmf_underflow"
                                ],
                                "types": {}
                            },
                            "test_online_lda": {
                                "functions": [
                                    "_build_sparse_mtx",
                                    "test_lda_default_prior_params",
                                    "test_lda_fit_batch",
                                    "test_lda_fit_online",
                                    "test_lda_partial_fit",
                                    "test_lda_dense_input",
                                    "test_lda_transform",
                                    "test_lda_partial_fit_dim_mismatch",
                                    "test_invalid_params",
                                    "test_lda_negative_input",
                                    "test_lda_no_component_error",
                                    "test_lda_transform_mismatch",
                                    "test_lda_preplexity_mismatch",
                                    "test_perplexity_input_format",
                                    "test_lda_score_perplexity",
                                    "test_lda_fit_perplexity",
                                    "test_lda_empty_docs",
                                    "test_dirichlet_expectation",
                                    "check_verbosity"
                                ],
                                "types": {}
                            },
                            "test_pca": {
                                "functions": [
                                    "test_pca",
                                    "test_pca_arpack_solver",
                                    "test_pca_randomized_solver",
                                    "test_no_empty_slice_warning",
                                    "test_whitening",
                                    "test_singular_values",
                                    "test_pca_check_projection",
                                    "test_pca_inverse",
                                    "test_randomized_pca_check_projection",
                                    "test_randomized_pca_check_list",
                                    "test_randomized_pca_inverse",
                                    "test_n_components_mle",
                                    "test_pca_dim",
                                    "test_infer_dim_1",
                                    "test_infer_dim_2",
                                    "test_infer_dim_3",
                                    "test_infer_dim_by_explained_variance",
                                    "test_pca_score",
                                    "test_pca_score2",
                                    "test_pca_score3",
                                    "test_pca_score_with_different_solvers",
                                    "test_pca_zero_noise_variance_edge_cases",
                                    "test_svd_solver_auto",
                                    "test_pca_bad_solver",
                                    "test_pca_deterministic_output",
                                    "check_pca_float_dtype_preservation",
                                    "check_pca_int_dtype_upcast_to_double"
                                ],
                                "types": {}
                            },
                            "test_sparse_pca": {
                                "functions": [
                                    "generate_toy_data",
                                    "test_scaling_fit_transform",
                                    "test_pca_vs_spca"
                                ],
                                "types": {}
                            },
                            "test_truncated_svd": {
                                "functions": [
                                    "test_algorithms",
                                    "test_attributes",
                                    "test_integers",
                                    "test_explained_variance",
                                    "test_singular_values",
                                    "test_truncated_svd_eq_pca"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "base": {
                        "functions": [],
                        "types": {
                            "_BasePCA": {
                                "methods": [
                                    "get_covariance",
                                    "get_precision",
                                    "transform",
                                    "inverse_transform"
                                ]
                            }
                        }
                    },
                    "dict_learning": {
                        "functions": [
                            "_sparse_encode",
                            "sparse_encode",
                            {
                                "name": "_update_dict",
                                "updates": [0, 2]
                            },
                            "dict_learning",
                            "dict_learning_online"
                        ],
                        "types": {
                            "SparseCodingMixin": {
                                "methods": [
                                    {
                                        "name": "_set_sparse_coding_params",
                                        "updates": [0]
                                    },
                                    "transform"
                                ]
                            },
                            "SparseCoder": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "SparseCoder"
                                    },
                                    "fit",
                                    "transform"
                                ]
                            },
                            "DictionaryLearning": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "DictionaryLearning"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform"
                                ]
                            },
                            "MiniBatchDictionaryLearning": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MiniBatchDictionaryLearning"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "partial_fit",
                                        "updates": [0]
                                    },
                                    "transform"
                                ]
                            }
                        }
                    },
                    "factor_analysis": {
                        "functions": [],
                        "types": {
                            "FactorAnalysis": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "FactorAnalysis"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "get_covariance",
                                    "get_precision",
                                    "score_samples",
                                    "score"
                                ]
                            }
                        }
                    },
                    "fastica_": {
                        "functions": [
                            "_gs_decorrelation",
                            "_sym_decorrelation",
                            "_ica_def",
                            "_ica_par",
                            "_logcosh",
                            "_exp",
                            "_cube",
                            "fastica"
                        ],
                        "types": {
                            "FastICA": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "FastICA"
                                    },
                                    {
                                        "name": "_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "inverse_transform"
                                ]
                            }
                        }
                    },
                    "incremental_pca": {
                        "functions": [],
                        "types": {
                            "IncrementalPCA": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "IncrementalPCA"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "partial_fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "kernel_pca": {
                        "functions": [],
                        "types": {
                            "KernelPCA": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "KernelPCA"
                                    },
                                    "_get_kernel",
                                    {
                                        "name": "_fit_transform",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_fit_inverse_transform",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "inverse_transform"
                                ]
                            }
                        }
                    },
                    "nmf": {
                        "functions": [
                            "norm",
                            "trace_dot",
                            "_check_init",
                            "_beta_divergence",
                            "_special_sparse_dot",
                            "_compute_regularization",
                            "_check_string_param",
                            "_beta_loss_to_float",
                            "_initialize_nmf",
                            "_update_coordinate_descent",
                            "_fit_coordinate_descent",
                            "_multiplicative_update_w",
                            "_multiplicative_update_h",
                            {
                                "name": "_fit_multiplicative_update",
                                "updates": [1, 2]
                            },
                            "non_negative_factorization"
                        ],
                        "types": {
                            "NMF": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "NMF"
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "inverse_transform"
                                ]
                            }
                        }
                    },
                    "online_lda": {
                        "functions": ["_update_doc_distribution"],
                        "types": {
                            "LatentDirichletAllocation": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LatentDirichletAllocation"
                                    },
                                    "_check_params",
                                    {
                                        "name": "_init_latent_vars",
                                        "updates": [0]
                                    },
                                    "_e_step",
                                    {
                                        "name": "_em_step",
                                        "updates": [0]
                                    },
                                    "_check_non_neg_array",
                                    {
                                        "name": "partial_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "_unnormalized_transform",
                                    "transform",
                                    "_approx_bound",
                                    "score",
                                    "_perplexity_precomp_distr",
                                    "perplexity"
                                ]
                            }
                        }
                    },
                    "pca": {
                        "functions": ["_assess_dimension_", "_infer_dimension_"],
                        "types": {
                            "PCA": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "PCA"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_fit_full",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_fit_truncated",
                                        "updates": [0]
                                    },
                                    "score_samples",
                                    "score"
                                ]
                            }
                        }
                    },
                    "setup": {
                        "functions": ["configuration"],
                        "types": {}
                    },
                    "sparse_pca": {
                        "functions": [],
                        "types": {
                            "SparsePCA": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "SparsePCA"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform"
                                ]
                            },
                            "MiniBatchSparsePCA": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MiniBatchSparsePCA"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform"
                                ]
                            }
                        }
                    },
                    "truncated_svd": {
                        "functions": [],
                        "types": {
                            "TruncatedSVD": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "TruncatedSVD"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "inverse_transform"
                                ]
                            }
                        }
                    }
                },
                "types": {
                    "NMF": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "NMF"
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform",
                            "inverse_transform"
                        ]
                    },
                    "PCA": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "PCA"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            {
                                "name": "_fit",
                                "updates": [0]
                            },
                            {
                                "name": "_fit_full",
                                "updates": [0]
                            },
                            {
                                "name": "_fit_truncated",
                                "updates": [0]
                            },
                            "score_samples",
                            "score"
                        ]
                    },
                    "IncrementalPCA": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "IncrementalPCA"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "KernelPCA": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "KernelPCA"
                            },
                            "_get_kernel",
                            {
                                "name": "_fit_transform",
                                "updates": [0]
                            },
                            {
                                "name": "_fit_inverse_transform",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            "transform",
                            "inverse_transform"
                        ]
                    },
                    "SparsePCA": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "SparsePCA"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform"
                        ]
                    },
                    "MiniBatchSparsePCA": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "MiniBatchSparsePCA"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform"
                        ]
                    },
                    "TruncatedSVD": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "TruncatedSVD"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            "transform",
                            "inverse_transform"
                        ]
                    },
                    "FastICA": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "FastICA"
                            },
                            {
                                "name": "_fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform",
                            "inverse_transform"
                        ]
                    },
                    "DictionaryLearning": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "DictionaryLearning"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform"
                        ]
                    },
                    "MiniBatchDictionaryLearning": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "MiniBatchDictionaryLearning"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            "transform"
                        ]
                    },
                    "SparseCoder": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "SparseCoder"
                            },
                            "fit",
                            "transform"
                        ]
                    },
                    "FactorAnalysis": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "FactorAnalysis"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform",
                            "get_covariance",
                            "get_precision",
                            "score_samples",
                            "score"
                        ]
                    },
                    "LatentDirichletAllocation": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LatentDirichletAllocation"
                            },
                            "_check_params",
                            {
                                "name": "_init_latent_vars",
                                "updates": [0]
                            },
                            "_e_step",
                            {
                                "name": "_em_step",
                                "updates": [0]
                            },
                            "_check_non_neg_array",
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "_unnormalized_transform",
                            "transform",
                            "_approx_bound",
                            "score",
                            "_perplexity_precomp_distr",
                            "perplexity"
                        ]
                    }
                },
                "functions": [
                    "non_negative_factorization",
                    "fastica",
                    "dict_learning",
                    "dict_learning_online",
                    "sparse_encode"
                ]
            },
            "ensemble": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_bagging": {
                                "functions": [
                                    "test_classification",
                                    "test_sparse_classification",
                                    "test_regression",
                                    "test_sparse_regression",
                                    "test_bootstrap_samples",
                                    "test_bootstrap_features",
                                    "test_oob_score_classification",
                                    "test_oob_score_regression",
                                    "test_single_estimator",
                                    "test_error",
                                    "test_parallel_classification",
                                    "test_parallel_regression",
                                    "test_base_estimator",
                                    "test_bagging_with_pipeline",
                                    "test_bagging_sample_weight_unsupported_but_passed",
                                    "test_warm_start",
                                    "test_warm_start_smaller_n_estimators",
                                    "test_warm_start_equal_n_estimators",
                                    "test_warm_start_equivalence",
                                    "test_warm_start_with_oob_score_fails",
                                    "test_oob_score_removed_on_warm_start",
                                    "test_oob_score_consistency",
                                    "test_max_samples_consistency",
                                    "test_set_oob_score_label_encoding",
                                    {
                                        "name": "replace",
                                        "updates": [0]
                                    },
                                    "test_bagging_regressor_with_missing_inputs",
                                    "test_bagging_classifier_with_missing_inputs"
                                ],
                                "types": {
                                    "CustomSVC": {
                                        "methods": [
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            }
                                        ]
                                    },
                                    "CustomSVR": {
                                        "methods": [
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            }
                                        ]
                                    },
                                    "DummySizeEstimator": {
                                        "methods": [
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            }
                                        ]
                                    },
                                    "DummyZeroEstimator": {
                                        "methods": [
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "predict"
                                        ]
                                    }
                                }
                            },
                            "test_base": {
                                "functions": [
                                    "test_base",
                                    "test_base_zero_n_estimators",
                                    "test_base_not_int_n_estimators",
                                    "test_set_random_states"
                                ],
                                "types": {
                                    "AlphaParamPipeline": {
                                        "methods": ["get_params"]
                                    },
                                    "RevParamPipeline": {
                                        "methods": ["get_params"]
                                    }
                                }
                            },
                            "test_forest": {
                                "functions": [
                                    "check_classification_toy",
                                    "check_iris_criterion",
                                    "check_boston_criterion",
                                    "check_regressor_attributes",
                                    "check_probability",
                                    "check_importances",
                                    "test_importances_asymptotic",
                                    "check_unfitted_feature_importances",
                                    "check_oob_score",
                                    "check_oob_score_raise_error",
                                    "check_gridsearch",
                                    "check_parallel",
                                    "check_pickle",
                                    "check_multioutput",
                                    "check_classes_shape",
                                    "test_random_trees_dense_type",
                                    "test_random_trees_dense_equal",
                                    "test_random_hasher_sparse_data",
                                    "test_parallel_train",
                                    "test_distribution",
                                    "check_max_leaf_nodes_max_depth",
                                    "check_min_samples_split",
                                    "check_min_samples_leaf",
                                    "check_min_weight_fraction_leaf",
                                    "check_sparse_input",
                                    "check_memory_layout",
                                    "check_class_weights",
                                    "check_class_weight_balanced_and_bootstrap_multi_output",
                                    "check_class_weight_errors",
                                    "check_warm_start",
                                    "check_warm_start_clear",
                                    "check_warm_start_smaller_n_estimators",
                                    "check_warm_start_equal_n_estimators",
                                    "check_warm_start_oob",
                                    "check_decision_path",
                                    "test_forest_feature_importances_sum",
                                    "test_forest_degenerate_feature_importances"
                                ],
                                "types": {
                                    "MyBackend": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MyBackend"
                                            },
                                            {
                                                "name": "start_call",
                                                "updates": [0]
                                            }
                                        ]
                                    }
                                }
                            },
                            "test_gradient_boosting": {
                                "functions": [
                                    "check_classification_toy",
                                    "test_classifier_parameter_checks",
                                    "test_regressor_parameter_checks",
                                    "test_loss_function",
                                    "check_classification_synthetic",
                                    "check_boston",
                                    "check_iris",
                                    "test_regression_synthetic",
                                    "test_feature_importances",
                                    "test_probability_log",
                                    "test_check_inputs",
                                    "test_check_inputs_predict",
                                    "test_check_inputs_predict_stages",
                                    "test_check_max_features",
                                    "test_max_feature_regression",
                                    "test_max_feature_auto",
                                    "test_staged_predict",
                                    "test_staged_predict_proba",
                                    "test_serialization",
                                    "test_degenerate_targets",
                                    "test_quantile_loss",
                                    "test_symbol_labels",
                                    "test_float_class_labels",
                                    "test_shape_y",
                                    "test_mem_layout",
                                    "test_oob_improvement",
                                    "test_oob_improvement_raise",
                                    "test_oob_multilcass_iris",
                                    "test_verbose_output",
                                    "test_more_verbose_output",
                                    "early_stopping_monitor",
                                    "test_complete_classification",
                                    "test_complete_regression",
                                    "test_zero_estimator_reg",
                                    "test_zero_estimator_clf",
                                    "test_warm_start_wo_nestimators_change",
                                    "test_probability_exponential",
                                    "test_non_uniform_weights_toy_edge_case_reg",
                                    "test_non_uniform_weights_toy_edge_case_clf",
                                    "check_sparse_input",
                                    "test_gradient_boosting_early_stopping",
                                    "test_gradient_boosting_validation_fraction",
                                    "test_early_stopping_stratified",
                                    "_make_multiclass",
                                    "test_gradient_boosting_with_init_pipeline",
                                    "test_early_stopping_n_classes",
                                    "test_gbr_degenerate_feature_importances"
                                ],
                                "types": {
                                    "_NoSampleWeightWrapper": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "_NoSampleWeightWrapper"
                                            },
                                            "fit",
                                            "predict",
                                            "predict_proba"
                                        ]
                                    }
                                }
                            },
                            "test_gradient_boosting_loss_functions": {
                                "functions": [
                                    "test_binomial_deviance",
                                    "test_sample_weight_smoke",
                                    "test_sample_weight_init_estimators",
                                    "test_weighted_percentile",
                                    "test_weighted_percentile_equal",
                                    "test_weighted_percentile_zero_weight",
                                    "test_quantile_loss_function",
                                    "test_sample_weight_deviance",
                                    "test_init_raw_predictions_shapes",
                                    "test_init_raw_predictions_values"
                                ],
                                "types": {}
                            },
                            "test_iforest": {
                                "functions": ["test_iforest_average_path_length"],
                                "types": {}
                            },
                            "test_partial_dependence": {
                                "functions": [],
                                "types": {}
                            },
                            "test_voting": {
                                "functions": [
                                    "test_weights_regressor",
                                    "test_multilabel",
                                    "test_sample_weight_kwargs"
                                ],
                                "types": {
                                    "ClassifierErrorFit": {
                                        "methods": ["fit"]
                                    },
                                    "MockClassifier": {
                                        "methods": ["fit"]
                                    }
                                }
                            },
                            "test_weight_boosting": {
                                "functions": [
                                    "test_samme_proba",
                                    "test_oneclass_adaboost_proba",
                                    "test_classification_toy",
                                    "test_regression_toy",
                                    "test_iris",
                                    "test_boston",
                                    "test_staged_predict",
                                    "test_pickle",
                                    "test_importances",
                                    "test_error",
                                    "test_sample_weight_missing",
                                    "test_sparse_classification",
                                    "test_sparse_regression",
                                    "test_sample_weight_adaboost_regressor",
                                    "test_multidimensional_X"
                                ],
                                "types": {
                                    "MockEstimator": {
                                        "methods": ["predict_proba"]
                                    },
                                    "CustomSVC": {
                                        "methods": [
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            }
                                        ]
                                    },
                                    "CustomSVR": {
                                        "methods": [
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            }
                                        ]
                                    },
                                    "DummyEstimator": {
                                        "methods": ["fit", "predict"]
                                    }
                                }
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "bagging": {
                        "functions": [
                            "_generate_indices",
                            "_generate_bagging_indices",
                            "_parallel_build_estimators",
                            "_parallel_predict_proba",
                            "_parallel_predict_log_proba",
                            "_parallel_decision_function",
                            "_parallel_predict_regression"
                        ],
                        "types": {
                            "BaseBagging": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "_parallel_args",
                                    {
                                        "name": "_fit",
                                        "updates": [0]
                                    },
                                    "_validate_y",
                                    "_get_estimators_indices"
                                ]
                            },
                            "BaggingClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "BaggingClassifier"
                                    },
                                    "__init__",
                                    "_validate_estimator",
                                    {
                                        "name": "_set_oob_score",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_validate_y",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "predict_proba",
                                    "predict_log_proba",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "BaggingRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "BaggingRegressor"
                                    },
                                    "__init__",
                                    "predict",
                                    "_validate_estimator",
                                    {
                                        "name": "_set_oob_score",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "base": {
                        "functions": ["_set_random_states", "_partition_estimators"],
                        "types": {
                            "BaseEnsemble": {
                                "methods": [
                                    {
                                        "name": "_validate_estimator",
                                        "updates": [0]
                                    },
                                    "_make_estimator",
                                    "__len__",
                                    "__getitem__",
                                    "__iter__"
                                ]
                            }
                        }
                    },
                    "forest": {
                        "functions": [
                            "_generate_sample_indices",
                            "_generate_unsampled_indices",
                            "_parallel_build_trees",
                            {
                                "name": "_accumulate_prediction",
                                "updates": [2]
                            }
                        ],
                        "types": {
                            "BaseForest": {
                                "methods": [
                                    "apply",
                                    "decision_path",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "_validate_y_class_weight",
                                    "_validate_X_predict"
                                ]
                            },
                            "ForestClassifier": {
                                "methods": [
                                    {
                                        "name": "_set_oob_score",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_validate_y_class_weight",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "predict_proba",
                                    "predict_log_proba",
                                    "apply",
                                    "decision_path",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "ForestRegressor": {
                                "methods": [
                                    "predict",
                                    {
                                        "name": "_set_oob_score",
                                        "updates": [0]
                                    },
                                    "apply",
                                    "decision_path",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "RandomForestClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "RandomForestClassifier"
                                    },
                                    "predict",
                                    "predict_proba",
                                    "predict_log_proba",
                                    "apply",
                                    "decision_path",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "RandomForestRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "RandomForestRegressor"
                                    },
                                    "predict",
                                    "apply",
                                    "decision_path",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "ExtraTreesClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "ExtraTreesClassifier"
                                    },
                                    "predict",
                                    "predict_proba",
                                    "predict_log_proba",
                                    "apply",
                                    "decision_path",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "ExtraTreesRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "ExtraTreesRegressor"
                                    },
                                    "predict",
                                    "apply",
                                    "decision_path",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "RandomTreesEmbedding": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "RandomTreesEmbedding"
                                    },
                                    "_set_oob_score",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "apply",
                                    "decision_path"
                                ]
                            }
                        }
                    },
                    "gradient_boosting": {
                        "functions": [],
                        "types": {
                            "QuantileEstimator": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "QuantileEstimator"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict"
                                ]
                            },
                            "MeanEstimator": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict"
                                ]
                            },
                            "LogOddsEstimator": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict"
                                ]
                            },
                            "ScaledLogOddsEstimator": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict"
                                ]
                            },
                            "PriorProbabilityEstimator": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict"
                                ]
                            },
                            "ZeroEstimator": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "predict_proba"
                                ]
                            },
                            "LossFunction": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LossFunction"
                                    },
                                    "init_estimator",
                                    {
                                        "name": "update_terminal_regions",
                                        "updates": [5]
                                    }
                                ]
                            },
                            "RegressionLossFunction": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "RegressionLossFunction"
                                    },
                                    "__init__",
                                    "init_estimator",
                                    {
                                        "name": "update_terminal_regions",
                                        "updates": [5]
                                    }
                                ]
                            },
                            "LeastSquaresError": {
                                "methods": [
                                    "init_estimator",
                                    "__call__",
                                    "negative_gradient",
                                    {
                                        "name": "update_terminal_regions",
                                        "updates": [5]
                                    },
                                    "_update_terminal_region"
                                ]
                            },
                            "LeastAbsoluteError": {
                                "methods": [
                                    "init_estimator",
                                    "__call__",
                                    "negative_gradient",
                                    "_update_terminal_region",
                                    {
                                        "name": "update_terminal_regions",
                                        "updates": [5]
                                    }
                                ]
                            },
                            "HuberLossFunction": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "HuberLossFunction"
                                    },
                                    "init_estimator",
                                    "__call__",
                                    {
                                        "name": "negative_gradient",
                                        "updates": [0]
                                    },
                                    "_update_terminal_region",
                                    {
                                        "name": "update_terminal_regions",
                                        "updates": [5]
                                    }
                                ]
                            },
                            "QuantileLossFunction": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "QuantileLossFunction"
                                    },
                                    "init_estimator",
                                    "__call__",
                                    "negative_gradient",
                                    "_update_terminal_region",
                                    {
                                        "name": "update_terminal_regions",
                                        "updates": [5]
                                    }
                                ]
                            },
                            "ClassificationLossFunction": {
                                "methods": [
                                    "_score_to_proba",
                                    "init_estimator",
                                    {
                                        "name": "update_terminal_regions",
                                        "updates": [5]
                                    }
                                ]
                            },
                            "BinomialDeviance": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "BinomialDeviance"
                                    },
                                    "__init__",
                                    "init_estimator",
                                    "__call__",
                                    "negative_gradient",
                                    "_update_terminal_region",
                                    "_score_to_proba",
                                    "_score_to_decision",
                                    {
                                        "name": "update_terminal_regions",
                                        "updates": [5]
                                    }
                                ]
                            },
                            "MultinomialDeviance": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "MultinomialDeviance"
                                    },
                                    "__init__",
                                    "init_estimator",
                                    "__call__",
                                    "negative_gradient",
                                    "_update_terminal_region",
                                    "_score_to_proba",
                                    "_score_to_decision",
                                    {
                                        "name": "update_terminal_regions",
                                        "updates": [5]
                                    }
                                ]
                            },
                            "ExponentialLoss": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "ExponentialLoss"
                                    },
                                    "__init__",
                                    "init_estimator",
                                    "__call__",
                                    "negative_gradient",
                                    "_update_terminal_region",
                                    "_score_to_proba",
                                    "_score_to_decision",
                                    {
                                        "name": "update_terminal_regions",
                                        "updates": [5]
                                    }
                                ]
                            },
                            "VerboseReporter": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "VerboseReporter"
                                    },
                                    {
                                        "name": "init",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "update",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "BaseGradientBoosting": {
                                "methods": [
                                    "_fit_stage",
                                    {
                                        "name": "_check_params",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_init_state",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_clear_state",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_resize_state",
                                        "updates": [0]
                                    },
                                    "_is_initialized",
                                    "_check_initialized",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "_fit_stages",
                                    "_make_estimator",
                                    "_raw_predict_init",
                                    "_raw_predict",
                                    "_staged_raw_predict",
                                    {
                                        "name": "_validate_y",
                                        "updates": [0]
                                    },
                                    "apply"
                                ]
                            },
                            "GradientBoostingClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "GradientBoostingClassifier"
                                    },
                                    "__init__",
                                    {
                                        "name": "_validate_y",
                                        "updates": [0]
                                    },
                                    "decision_function",
                                    "staged_decision_function",
                                    "predict",
                                    "staged_predict",
                                    "predict_proba",
                                    "predict_log_proba",
                                    "staged_predict_proba",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "apply"
                                ]
                            },
                            "GradientBoostingRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "GradientBoostingRegressor"
                                    },
                                    "__init__",
                                    "predict",
                                    "staged_predict",
                                    "apply",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "iforest": {
                        "functions": ["_average_path_length"],
                        "types": {
                            "IsolationForest": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "IsolationForest"
                                    },
                                    "_set_oob_score",
                                    "_parallel_args",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "decision_function",
                                    "score_samples",
                                    "_compute_chunked_score_samples",
                                    "_compute_score_samples"
                                ]
                            }
                        }
                    },
                    "partial_dependence": {
                        "functions": ["_grid_from_X"],
                        "types": {}
                    },
                    "setup": {
                        "functions": ["configuration"],
                        "types": {}
                    },
                    "voting": {
                        "functions": ["_parallel_fit_estimator"],
                        "types": {
                            "_BaseVoting": {
                                "methods": ["_predict", "set_params", "get_params"]
                            },
                            "VotingClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "VotingClassifier"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "_collect_probas",
                                    "_predict_proba",
                                    "transform",
                                    "set_params",
                                    "get_params"
                                ]
                            },
                            "VotingRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "VotingRegressor"
                                    },
                                    "fit",
                                    "predict",
                                    "transform",
                                    "set_params",
                                    "get_params"
                                ]
                            }
                        }
                    },
                    "weight_boosting": {
                        "functions": ["_samme_proba"],
                        "types": {
                            "BaseWeightBoosting": {
                                "methods": [
                                    "_validate_data",
                                    {
                                        "name": "fit",
                                        "updates": [0, 3]
                                    },
                                    "staged_score"
                                ]
                            },
                            "AdaBoostClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "AdaBoostClassifier"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0, 3]
                                    },
                                    "_validate_estimator",
                                    {
                                        "name": "_boost",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_boost_real",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_boost_discrete",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "staged_predict",
                                    "decision_function",
                                    "staged_decision_function",
                                    "predict_proba",
                                    "staged_predict_proba",
                                    "predict_log_proba",
                                    "staged_score"
                                ]
                            },
                            "AdaBoostRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "AdaBoostRegressor"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0, 3]
                                    },
                                    "_validate_estimator",
                                    "_boost",
                                    "_get_median_predict",
                                    "predict",
                                    "staged_predict",
                                    "staged_score"
                                ]
                            }
                        }
                    }
                },
                "types": {
                    "BaseEnsemble": {
                        "methods": [
                            {
                                "name": "_validate_estimator",
                                "updates": [0]
                            },
                            "_make_estimator",
                            "__len__",
                            "__getitem__",
                            "__iter__"
                        ]
                    },
                    "RandomForestClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "RandomForestClassifier"
                            },
                            "predict",
                            "predict_proba",
                            "predict_log_proba",
                            "apply",
                            "decision_path",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "RandomForestRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "RandomForestRegressor"
                            },
                            "predict",
                            "apply",
                            "decision_path",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "RandomTreesEmbedding": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "RandomTreesEmbedding"
                            },
                            "_set_oob_score",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            "transform",
                            "apply",
                            "decision_path"
                        ]
                    },
                    "ExtraTreesClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "ExtraTreesClassifier"
                            },
                            "predict",
                            "predict_proba",
                            "predict_log_proba",
                            "apply",
                            "decision_path",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "ExtraTreesRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "ExtraTreesRegressor"
                            },
                            "predict",
                            "apply",
                            "decision_path",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "BaggingClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "BaggingClassifier"
                            },
                            "__init__",
                            "_validate_estimator",
                            {
                                "name": "_set_oob_score",
                                "updates": [0]
                            },
                            {
                                "name": "_validate_y",
                                "updates": [0]
                            },
                            "predict",
                            "predict_proba",
                            "predict_log_proba",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "BaggingRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "BaggingRegressor"
                            },
                            "__init__",
                            "predict",
                            "_validate_estimator",
                            {
                                "name": "_set_oob_score",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "IsolationForest": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "IsolationForest"
                            },
                            "_set_oob_score",
                            "_parallel_args",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            "decision_function",
                            "score_samples",
                            "_compute_chunked_score_samples",
                            "_compute_score_samples"
                        ]
                    },
                    "AdaBoostClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "AdaBoostClassifier"
                            },
                            {
                                "name": "fit",
                                "updates": [0, 3]
                            },
                            "_validate_estimator",
                            {
                                "name": "_boost",
                                "updates": [0]
                            },
                            {
                                "name": "_boost_real",
                                "updates": [0]
                            },
                            {
                                "name": "_boost_discrete",
                                "updates": [0]
                            },
                            "predict",
                            "staged_predict",
                            "decision_function",
                            "staged_decision_function",
                            "predict_proba",
                            "staged_predict_proba",
                            "predict_log_proba",
                            "staged_score"
                        ]
                    },
                    "AdaBoostRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "AdaBoostRegressor"
                            },
                            {
                                "name": "fit",
                                "updates": [0, 3]
                            },
                            "_validate_estimator",
                            "_boost",
                            "_get_median_predict",
                            "predict",
                            "staged_predict",
                            "staged_score"
                        ]
                    },
                    "GradientBoostingClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "GradientBoostingClassifier"
                            },
                            "__init__",
                            {
                                "name": "_validate_y",
                                "updates": [0]
                            },
                            "decision_function",
                            "staged_decision_function",
                            "predict",
                            "staged_predict",
                            "predict_proba",
                            "predict_log_proba",
                            "staged_predict_proba",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "apply"
                        ]
                    },
                    "GradientBoostingRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "GradientBoostingRegressor"
                            },
                            "__init__",
                            "predict",
                            "staged_predict",
                            "apply",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "VotingClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "VotingClassifier"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            "_collect_probas",
                            "_predict_proba",
                            "transform",
                            "set_params",
                            "get_params"
                        ]
                    },
                    "VotingRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "VotingRegressor"
                            },
                            "fit",
                            "predict",
                            "transform",
                            "set_params",
                            "get_params"
                        ]
                    }
                },
                "functions": []
            },
            "experimental": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_enable_hist_gradient_boosting": {
                                "functions": ["test_imports_strategies"],
                                "types": {}
                            },
                            "test_enable_iterative_imputer": {
                                "functions": ["test_imports_strategies"],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "enable_hist_gradient_boosting": {
                        "functions": [],
                        "types": {}
                    },
                    "enable_iterative_imputer": {
                        "functions": [],
                        "types": {}
                    }
                },
                "types": {},
                "functions": []
            },
            "externals": {
                "modules": {
                    "joblib": {
                        "modules": {
                            "numpy_pickle": {
                                "functions": [],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "conftest": {
                        "functions": ["pytest_ignore_collect"],
                        "types": {}
                    },
                    "setup": {
                        "functions": ["configuration"],
                        "types": {}
                    },
                    "six": {
                        "functions": [
                            {
                                "name": "_add_doc",
                                "updates": [0]
                            },
                            "_import_module",
                            "add_move",
                            "remove_move",
                            "iterkeys",
                            "itervalues",
                            "iteritems",
                            "iterlists",
                            "with_metaclass",
                            "add_metaclass"
                        ],
                        "types": {
                            "X": {
                                "methods": ["__len__"]
                            },
                            "_LazyDescr": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_LazyDescr"
                                    },
                                    "__get__"
                                ]
                            },
                            "MovedModule": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MovedModule"
                                    },
                                    "_resolve"
                                ]
                            },
                            "MovedAttribute": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MovedAttribute"
                                    },
                                    "_resolve"
                                ]
                            },
                            "_MovedItems": {
                                "methods": []
                            },
                            "Module_six_moves_urllib_parse": {
                                "methods": []
                            },
                            "Module_six_moves_urllib_error": {
                                "methods": []
                            },
                            "Module_six_moves_urllib_request": {
                                "methods": []
                            },
                            "Module_six_moves_urllib_response": {
                                "methods": []
                            },
                            "Module_six_moves_urllib_robotparser": {
                                "methods": []
                            },
                            "Module_six_moves_urllib": {
                                "methods": []
                            },
                            "Iterator": {
                                "methods": ["next"]
                            }
                        }
                    }
                },
                "types": {},
                "functions": []
            },
            "feature_extraction": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_dict_vectorizer": {
                                "functions": [
                                    "test_feature_selection",
                                    "test_one_of_k",
                                    "test_unseen_or_no_features",
                                    "test_deterministic_vocabulary"
                                ],
                                "types": {}
                            },
                            "test_feature_hasher": {
                                "functions": [
                                    "test_feature_hasher_dicts",
                                    "test_feature_hasher_strings",
                                    "test_feature_hasher_pairs",
                                    "test_feature_hasher_pairs_with_string_values",
                                    "test_hash_empty_input",
                                    "test_hasher_invalid_input",
                                    "test_hasher_set_params",
                                    "test_hasher_zeros",
                                    "test_hash_collisions"
                                ],
                                "types": {}
                            },
                            "test_image": {
                                "functions": [
                                    "test_img_to_graph",
                                    "test_grid_to_graph",
                                    "_downsampled_face",
                                    "_orange_face",
                                    "_make_images",
                                    "test_extract_patches_all",
                                    "test_extract_patches_all_color",
                                    "test_extract_patches_all_rect",
                                    "test_extract_patches_max_patches",
                                    "test_extract_patch_same_size_image",
                                    "test_extract_patches_less_than_max_patches",
                                    "test_reconstruct_patches_perfect",
                                    "test_reconstruct_patches_perfect_color",
                                    "test_patch_extractor_fit",
                                    "test_patch_extractor_max_patches",
                                    "test_patch_extractor_max_patches_default",
                                    "test_patch_extractor_all_patches",
                                    "test_patch_extractor_color",
                                    "test_extract_patches_strided",
                                    "test_extract_patches_square",
                                    "test_width_patch"
                                ],
                                "types": {}
                            },
                            "test_text": {
                                "functions": [
                                    "uppercase",
                                    "strip_eacute",
                                    "split_tokenize",
                                    "lazy_analyze",
                                    "test_strip_accents",
                                    "test_to_ascii",
                                    "test_word_analyzer_unigrams_and_bigrams",
                                    "test_unicode_decode_error",
                                    "test_char_ngram_analyzer",
                                    "test_char_wb_ngram_analyzer",
                                    "test_word_ngram_analyzer",
                                    "test_countvectorizer_custom_vocabulary",
                                    "test_countvectorizer_custom_vocabulary_pipeline",
                                    "test_countvectorizer_custom_vocabulary_repeated_indices",
                                    "test_countvectorizer_custom_vocabulary_gap_index",
                                    "test_countvectorizer_stop_words",
                                    "test_countvectorizer_empty_vocabulary",
                                    "test_fit_countvectorizer_twice",
                                    "test_tf_idf_smoothing",
                                    "test_tfidf_no_smoothing",
                                    "test_sublinear_tf",
                                    "test_vectorizer",
                                    "test_tfidf_vectorizer_setters",
                                    "test_feature_names",
                                    "test_count_vectorizer_max_features",
                                    "test_vectorizer_max_df",
                                    "test_vectorizer_min_df",
                                    "test_count_binary_occurrences",
                                    "test_vectorizer_pipeline_cross_validation",
                                    "test_tfidf_vectorizer_with_fixed_vocabulary",
                                    "test_pickling_vectorizer",
                                    "test_countvectorizer_vocab_sets_when_pickling",
                                    "test_countvectorizer_vocab_dicts_when_pickling",
                                    "test_stop_words_removal",
                                    "test_pickling_transformer",
                                    "test_transformer_idf_setter",
                                    "test_tfidf_vectorizer_setter",
                                    "test_tfidfvectorizer_invalid_idf_attr",
                                    "test_non_unique_vocab",
                                    "test_tfidfvectorizer_binary",
                                    "test_tfidfvectorizer_export_idf",
                                    "test_vectorizer_vocab_clone",
                                    "test_tfidf_transformer_sparse",
                                    "_check_stop_words_consistency"
                                ],
                                "types": {
                                    "CustomEstimator": {
                                        "methods": ["build_preprocessor"]
                                    }
                                }
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "dict_vectorizer": {
                        "functions": ["_tosequence"],
                        "types": {
                            "DictVectorizer": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "DictVectorizer"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_transform",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    "inverse_transform",
                                    {
                                        "name": "transform",
                                        "updates": [0]
                                    },
                                    "get_feature_names",
                                    {
                                        "name": "restrict",
                                        "updates": [0]
                                    },
                                    "_more_tags"
                                ]
                            }
                        }
                    },
                    "hashing": {
                        "functions": ["_iteritems"],
                        "types": {
                            "FeatureHasher": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "FeatureHasher"
                                    },
                                    "fit",
                                    "transform",
                                    "_more_tags"
                                ]
                            }
                        }
                    },
                    "image": {
                        "functions": [
                            "_make_edges_3d",
                            "_compute_gradient_3d",
                            "_mask_edges_weights",
                            "_to_graph",
                            "img_to_graph",
                            "grid_to_graph",
                            "_compute_n_patches",
                            "extract_patches",
                            "extract_patches_2d",
                            "reconstruct_from_patches_2d"
                        ],
                        "types": {
                            "PatchExtractor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "PatchExtractor"
                                    },
                                    "fit",
                                    {
                                        "name": "transform",
                                        "updates": [0]
                                    },
                                    "_more_tags"
                                ]
                            }
                        }
                    },
                    "setup": {
                        "functions": ["configuration"],
                        "types": {}
                    },
                    "stop_words": {
                        "functions": [],
                        "types": {}
                    },
                    "text": {
                        "functions": [
                            "strip_accents_unicode",
                            "strip_accents_ascii",
                            "strip_tags",
                            "_check_stop_list",
                            "_document_frequency",
                            "_make_int_array"
                        ],
                        "types": {
                            "VectorizerMixin": {
                                "methods": [
                                    "decode",
                                    "_word_ngrams",
                                    "_char_ngrams",
                                    "_char_wb_ngrams",
                                    "build_preprocessor",
                                    "build_tokenizer",
                                    "get_stop_words",
                                    {
                                        "name": "_check_stop_words_consistency",
                                        "updates": [0]
                                    },
                                    "_validate_custom_analyzer",
                                    {
                                        "name": "build_analyzer",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_validate_vocabulary",
                                        "updates": [0]
                                    },
                                    "_check_vocabulary",
                                    "_validate_params"
                                ]
                            },
                            "HashingVectorizer": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "HashingVectorizer"
                                    },
                                    "partial_fit",
                                    "fit",
                                    "transform",
                                    "fit_transform",
                                    "_get_hasher",
                                    "_more_tags",
                                    "decode",
                                    "build_preprocessor",
                                    "build_tokenizer",
                                    "get_stop_words",
                                    {
                                        "name": "build_analyzer",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "CountVectorizer": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "CountVectorizer"
                                    },
                                    {
                                        "name": "_sort_features",
                                        "updates": [1, 2]
                                    },
                                    {
                                        "name": "_limit_features",
                                        "updates": [2]
                                    },
                                    "_count_vocab",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "inverse_transform",
                                    "get_feature_names",
                                    "_more_tags",
                                    "decode",
                                    "build_preprocessor",
                                    "build_tokenizer",
                                    "get_stop_words",
                                    {
                                        "name": "build_analyzer",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "TfidfTransformer": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "TfidfTransformer"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "transform",
                                        "updates": [1]
                                    },
                                    "_more_tags"
                                ]
                            },
                            "TfidfVectorizer": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "TfidfVectorizer"
                                    },
                                    "_check_params",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "_more_tags",
                                    "inverse_transform",
                                    "get_feature_names",
                                    "decode",
                                    "build_preprocessor",
                                    "build_tokenizer",
                                    "get_stop_words",
                                    {
                                        "name": "build_analyzer",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    }
                },
                "types": {
                    "DictVectorizer": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "DictVectorizer"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "_transform",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            "inverse_transform",
                            {
                                "name": "transform",
                                "updates": [0]
                            },
                            "get_feature_names",
                            {
                                "name": "restrict",
                                "updates": [0]
                            },
                            "_more_tags"
                        ]
                    },
                    "FeatureHasher": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "FeatureHasher"
                            },
                            "fit",
                            "transform",
                            "_more_tags"
                        ]
                    }
                },
                "functions": ["img_to_graph", "grid_to_graph"]
            },
            "feature_selection": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_base": {
                                "functions": [
                                    "test_transform_dense",
                                    "test_transform_sparse",
                                    "test_inverse_transform_dense",
                                    "test_inverse_transform_sparse",
                                    "test_get_support"
                                ],
                                "types": {
                                    "StepSelector": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "StepSelector"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "_get_support_mask"
                                        ]
                                    }
                                }
                            },
                            "test_chi2": {
                                "functions": [
                                    "mkchi2",
                                    "test_chi2",
                                    "test_chi2_coo",
                                    "test_chi2_negative",
                                    "test_chi2_unused_feature",
                                    "test_chisquare"
                                ],
                                "types": {}
                            },
                            "test_feature_select": {
                                "functions": [
                                    "test_f_oneway_vs_scipy_stats",
                                    "test_f_oneway_ints",
                                    "test_f_classif",
                                    "test_f_regression",
                                    "test_f_regression_input_dtype",
                                    "test_f_regression_center",
                                    "test_f_classif_multi_class",
                                    "test_select_percentile_classif",
                                    "test_select_percentile_classif_sparse",
                                    "test_select_kbest_classif",
                                    "test_select_kbest_all",
                                    "test_select_kbest_zero",
                                    "test_select_heuristics_classif",
                                    "assert_best_scores_kept",
                                    "test_select_percentile_regression",
                                    "test_select_percentile_regression_full",
                                    "test_invalid_percentile",
                                    "test_select_kbest_regression",
                                    "test_select_heuristics_regression",
                                    "test_boundary_case_ch2",
                                    "test_select_fdr_regression",
                                    "test_select_fwe_regression",
                                    "test_selectkbest_tiebreaking",
                                    "test_selectpercentile_tiebreaking",
                                    "test_tied_pvalues",
                                    "test_scorefunc_multilabel",
                                    "test_tied_scores",
                                    "test_nans",
                                    "test_score_func_error",
                                    "test_invalid_k",
                                    "test_f_classif_constant_feature",
                                    "test_no_feature_selected",
                                    "test_mutual_info_classif",
                                    "test_mutual_info_regression"
                                ],
                                "types": {}
                            },
                            "test_from_model": {
                                "functions": [
                                    "test_max_features",
                                    "test_max_features_tiebreak",
                                    "test_threshold_and_max_features",
                                    "test_coef_default_threshold",
                                    "test_calling_fit_reinitializes",
                                    "test_threshold_string"
                                ],
                                "types": {
                                    "FixedImportanceEstimator": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "FixedImportanceEstimator"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            }
                                        ]
                                    }
                                }
                            },
                            "test_mutual_info": {
                                "functions": [
                                    "test_compute_mi_dd",
                                    "test_compute_mi_cc",
                                    "test_compute_mi_cd",
                                    "test_compute_mi_cd_unique_label",
                                    "test_mutual_info_classif_discrete",
                                    "test_mutual_info_regression",
                                    "test_mutual_info_classif_mixed",
                                    "test_mutual_info_options"
                                ],
                                "types": {}
                            },
                            "test_rfe": {
                                "functions": [
                                    "test_rfe_features_importance",
                                    "test_rfe",
                                    "test_rfe_mockclassifier",
                                    "test_rfecv",
                                    "test_rfecv_mockclassifier",
                                    "test_rfecv_verbose_output",
                                    "test_rfecv_grid_scores_size",
                                    "test_rfe_min_step",
                                    "test_number_of_subsets_of_features"
                                ],
                                "types": {
                                    "MockClassifier": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MockClassifier"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "predict",
                                            "score",
                                            "get_params",
                                            "set_params"
                                        ]
                                    }
                                }
                            },
                            "test_variance_threshold": {
                                "functions": ["test_zero_variance", "test_variance_threshold"],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "base": {
                        "functions": [],
                        "types": {
                            "SelectorMixin": {
                                "methods": ["get_support", "transform", "inverse_transform"]
                            }
                        }
                    },
                    "from_model": {
                        "functions": ["_get_feature_importances", "_calculate_threshold"],
                        "types": {
                            "SelectFromModel": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "SelectFromModel"
                                    },
                                    "_get_support_mask",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "mutual_info_": {
                        "functions": [
                            "_compute_mi_cc",
                            "_compute_mi_cd",
                            "_compute_mi",
                            "_iterate_columns",
                            {
                                "name": "_estimate_mi",
                                "updates": [0]
                            },
                            "mutual_info_regression",
                            "mutual_info_classif"
                        ],
                        "types": {}
                    },
                    "rfe": {
                        "functions": ["_rfe_single_fit"],
                        "types": {
                            "RFE": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "RFE"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_fit",
                                        "updates": [0]
                                    },
                                    "_get_support_mask",
                                    "_more_tags"
                                ]
                            },
                            "RFECV": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "RFECV"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "univariate_selection": {
                        "functions": [
                            {
                                "name": "_clean_nans",
                                "updates": [0]
                            },
                            "f_oneway",
                            "f_classif",
                            "_chisquare",
                            "chi2",
                            "f_regression"
                        ],
                        "types": {
                            "_BaseFilter": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_BaseFilter"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "_check_params"
                                ]
                            },
                            "SelectPercentile": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "SelectPercentile"
                                    },
                                    "_check_params",
                                    "_get_support_mask",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "SelectKBest": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "SelectKBest"
                                    },
                                    "_check_params",
                                    "_get_support_mask",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "SelectFpr": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "SelectFpr"
                                    },
                                    "_get_support_mask",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "SelectFdr": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "SelectFdr"
                                    },
                                    "_get_support_mask",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "SelectFwe": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "SelectFwe"
                                    },
                                    "_get_support_mask",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "GenericUnivariateSelect": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "GenericUnivariateSelect"
                                    },
                                    "_make_selector",
                                    "_check_params",
                                    "_get_support_mask",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "variance_threshold": {
                        "functions": [],
                        "types": {
                            "VarianceThreshold": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "VarianceThreshold"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "_get_support_mask"
                                ]
                            }
                        }
                    }
                },
                "types": {
                    "SelectPercentile": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "SelectPercentile"
                            },
                            "_check_params",
                            "_get_support_mask",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "SelectKBest": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "SelectKBest"
                            },
                            "_check_params",
                            "_get_support_mask",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "SelectFpr": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "SelectFpr"
                            },
                            "_get_support_mask",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "SelectFdr": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "SelectFdr"
                            },
                            "_get_support_mask",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "SelectFwe": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "SelectFwe"
                            },
                            "_get_support_mask",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "GenericUnivariateSelect": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "GenericUnivariateSelect"
                            },
                            "_make_selector",
                            "_check_params",
                            "_get_support_mask",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "VarianceThreshold": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "VarianceThreshold"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "_get_support_mask"
                        ]
                    },
                    "RFE": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "RFE"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "_fit",
                                "updates": [0]
                            },
                            "_get_support_mask",
                            "_more_tags"
                        ]
                    },
                    "RFECV": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "RFECV"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "SelectFromModel": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "SelectFromModel"
                            },
                            "_get_support_mask",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    }
                },
                "functions": [
                    "chi2",
                    "f_classif",
                    "f_oneway",
                    "f_regression",
                    "mutual_info_regression",
                    "mutual_info_classif"
                ]
            },
            "gaussian_process": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_gpc": {
                                "functions": ["f", "test_random_starts"],
                                "types": {}
                            },
                            "test_gpr": {
                                "functions": [
                                    "f",
                                    "test_no_optimizer",
                                    "test_anisotropic_kernel",
                                    "test_random_starts",
                                    "test_y_multioutput",
                                    "test_gpr_correct_error_message",
                                    "test_no_fit_default_predict"
                                ],
                                "types": {}
                            },
                            "test_kernels": {
                                "functions": [
                                    "test_kernel_operator_commutative",
                                    "test_kernel_anisotropic",
                                    "check_hyperparameters_equal",
                                    "test_matern_kernel"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "correlation_models": {
                        "functions": [],
                        "types": {}
                    },
                    "gpc": {
                        "functions": [],
                        "types": {
                            "_BinaryGaussianProcessClassifierLaplace": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_BinaryGaussianProcessClassifierLaplace"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "predict_proba",
                                    {
                                        "name": "log_marginal_likelihood",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_posterior_mode",
                                        "updates": [0]
                                    },
                                    "_constrained_optimization"
                                ]
                            },
                            "GaussianProcessClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "GaussianProcessClassifier"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "predict_proba",
                                    "log_marginal_likelihood"
                                ]
                            }
                        }
                    },
                    "gpr": {
                        "functions": [],
                        "types": {
                            "GaussianProcessRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "GaussianProcessRegressor"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "predict",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "sample_y",
                                        "updates": [0]
                                    },
                                    "log_marginal_likelihood",
                                    "_constrained_optimization"
                                ]
                            }
                        }
                    },
                    "kernels": {
                        "functions": ["_check_length_scale", "_approx_fprime"],
                        "types": {
                            "Hyperparameter": {
                                "methods": ["__new__", "__eq__"]
                            },
                            "Kernel": {
                                "methods": [
                                    "get_params",
                                    "set_params",
                                    "clone_with_theta",
                                    "__add__",
                                    "__radd__",
                                    "__mul__",
                                    "__rmul__",
                                    "__pow__",
                                    "__eq__",
                                    "__repr__"
                                ]
                            },
                            "NormalizedKernelMixin": {
                                "methods": ["diag"]
                            },
                            "StationaryKernelMixin": {
                                "methods": ["is_stationary"]
                            },
                            "CompoundKernel": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "CompoundKernel"
                                    },
                                    "get_params",
                                    "__call__",
                                    "__eq__",
                                    "is_stationary",
                                    "diag",
                                    "set_params",
                                    "clone_with_theta"
                                ]
                            },
                            "KernelOperator": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "KernelOperator"
                                    },
                                    "get_params",
                                    "__eq__",
                                    "is_stationary",
                                    "set_params",
                                    "clone_with_theta"
                                ]
                            },
                            "Sum": {
                                "methods": [
                                    "__call__",
                                    "diag",
                                    "__repr__",
                                    "get_params",
                                    "is_stationary",
                                    "set_params",
                                    "clone_with_theta"
                                ]
                            },
                            "Product": {
                                "methods": [
                                    "__call__",
                                    "diag",
                                    "__repr__",
                                    "get_params",
                                    "is_stationary",
                                    "set_params",
                                    "clone_with_theta"
                                ]
                            },
                            "Exponentiation": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "Exponentiation"
                                    },
                                    "get_params",
                                    "__eq__",
                                    "__call__",
                                    "diag",
                                    "__repr__",
                                    "is_stationary",
                                    "set_params",
                                    "clone_with_theta"
                                ]
                            },
                            "ConstantKernel": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "ConstantKernel"
                                    },
                                    "__call__",
                                    "diag",
                                    "__repr__",
                                    "is_stationary",
                                    "get_params",
                                    "set_params",
                                    "clone_with_theta"
                                ]
                            },
                            "WhiteKernel": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "WhiteKernel"
                                    },
                                    "__call__",
                                    "diag",
                                    "__repr__",
                                    "is_stationary",
                                    "get_params",
                                    "set_params",
                                    "clone_with_theta"
                                ]
                            },
                            "RBF": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "RBF"
                                    },
                                    "__call__",
                                    "__repr__",
                                    "is_stationary",
                                    "diag",
                                    "get_params",
                                    "set_params",
                                    "clone_with_theta"
                                ]
                            },
                            "Matern": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "Matern"
                                    },
                                    "__call__",
                                    "__repr__",
                                    "is_stationary",
                                    "diag",
                                    "get_params",
                                    "set_params",
                                    "clone_with_theta"
                                ]
                            },
                            "RationalQuadratic": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "RationalQuadratic"
                                    },
                                    "__call__",
                                    "__repr__",
                                    "is_stationary",
                                    "diag",
                                    "get_params",
                                    "set_params",
                                    "clone_with_theta"
                                ]
                            },
                            "ExpSineSquared": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "ExpSineSquared"
                                    },
                                    "__call__",
                                    "__repr__",
                                    "is_stationary",
                                    "diag",
                                    "get_params",
                                    "set_params",
                                    "clone_with_theta"
                                ]
                            },
                            "DotProduct": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "DotProduct"
                                    },
                                    "__call__",
                                    "diag",
                                    "is_stationary",
                                    "__repr__",
                                    "get_params",
                                    "set_params",
                                    "clone_with_theta"
                                ]
                            },
                            "PairwiseKernel": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "PairwiseKernel"
                                    },
                                    "__call__",
                                    "diag",
                                    "is_stationary",
                                    "__repr__",
                                    "get_params",
                                    "set_params",
                                    "clone_with_theta"
                                ]
                            }
                        }
                    },
                    "regression_models": {
                        "functions": [],
                        "types": {}
                    }
                },
                "types": {
                    "GaussianProcessRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "GaussianProcessRegressor"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "predict",
                                "updates": [0]
                            },
                            {
                                "name": "sample_y",
                                "updates": [0]
                            },
                            "log_marginal_likelihood",
                            "_constrained_optimization"
                        ]
                    },
                    "GaussianProcessClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "GaussianProcessClassifier"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            "predict_proba",
                            "log_marginal_likelihood"
                        ]
                    }
                },
                "functions": []
            },
            "impute": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_impute": {
                                "functions": [
                                    "_check_statistics",
                                    "test_imputation_shape",
                                    "safe_median",
                                    "safe_mean",
                                    "test_imputation_mean_median",
                                    "test_imputation_median_special_cases",
                                    "test_imputation_most_frequent",
                                    "test_imputation_constant_integer",
                                    "test_imputation_copy",
                                    "test_iterative_imputer_zero_iters",
                                    "test_iterative_imputer_verbose",
                                    "test_iterative_imputer_all_missing",
                                    "test_iterative_imputer_clip",
                                    "test_iterative_imputer_clip_truncnorm",
                                    "test_iterative_imputer_truncated_normal_posterior",
                                    "test_iterative_imputer_transform_stochasticity",
                                    "test_iterative_imputer_no_missing",
                                    "test_iterative_imputer_rank_one",
                                    "test_iterative_imputer_additive_matrix",
                                    "test_iterative_imputer_early_stopping",
                                    "test_iterative_imputer_catch_warning",
                                    "test_missing_indicator_string",
                                    "test_missing_indicator_no_missing",
                                    "test_missing_indicator_sparse_no_explicit_zeros"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    }
                },
                "types": {},
                "functions": []
            },
            "inspection": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_partial_dependence": {
                                "functions": [
                                    "test_grid_from_X",
                                    "test_warning_recursion_non_constant_init",
                                    "test_partial_dependence_sample_weight",
                                    "test_plot_partial_dependence",
                                    "test_plot_partial_dependence_multiclass",
                                    "test_plot_partial_dependence_multioutput",
                                    "test_plot_partial_dependence_fig"
                                ],
                                "types": {
                                    "NoPredictProbaNoDecisionFunction": {
                                        "methods": [
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "partial_dependence": {
                        "functions": [
                            "_grid_from_X",
                            "_partial_dependence_recursion",
                            "_partial_dependence_brute",
                            "partial_dependence",
                            "plot_partial_dependence"
                        ],
                        "types": {}
                    }
                },
                "types": {},
                "functions": ["partial_dependence", "plot_partial_dependence"]
            },
            "linear_model": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_base": {
                                "functions": [
                                    "test_linear_regression",
                                    "test_linear_regression_sample_weights",
                                    "test_raises_value_error_if_sample_weights_greater_than_1d",
                                    "test_fit_intercept",
                                    "test_linear_regression_sparse",
                                    "test_linear_regression_multiple_outcome",
                                    "test_linear_regression_sparse_multiple_outcome",
                                    "test_preprocess_data",
                                    "test_preprocess_data_multioutput",
                                    "test_preprocess_data_weighted",
                                    "test_sparse_preprocess_data_with_return_mean",
                                    "test_csr_preprocess_data",
                                    "test_dtype_preprocess_data",
                                    "test_rescale_data",
                                    "test_fused_types_make_dataset"
                                ],
                                "types": {}
                            },
                            "test_bayes": {
                                "functions": [
                                    "test_n_iter",
                                    "test_bayesian_ridge_scores",
                                    "test_bayesian_ridge_score_values",
                                    "test_bayesian_ridge_parameter",
                                    "test_bayesian_sample_weights",
                                    "test_toy_bayesian_ridge_object",
                                    "test_prediction_bayesian_ridge_ard_with_constant_input",
                                    "test_std_bayesian_ridge_ard_with_constant_input",
                                    "test_update_of_sigma_in_ard",
                                    "test_toy_ard_object",
                                    "test_ard_accuracy_on_easy_problem",
                                    "test_return_std"
                                ],
                                "types": {}
                            },
                            "test_coordinate_descent": {
                                "functions": [
                                    "test_lasso_zero",
                                    "test_lasso_toy",
                                    "test_enet_toy",
                                    "build_dataset",
                                    "test_lasso_cv_with_some_model_selection",
                                    "test_lasso_cv_positive_constraint",
                                    "test_lasso_path_return_models_vs_new_return_gives_same_coefficients",
                                    "test_warm_start",
                                    "test_lasso_alpha_warning",
                                    "test_lasso_positive_constraint",
                                    "test_enet_positive_constraint",
                                    "test_enet_cv_positive_constraint",
                                    "test_multi_task_lasso_and_enet",
                                    "test_lasso_readonly_data",
                                    "test_multi_task_lasso_readonly_data",
                                    "test_enet_multitarget",
                                    "test_multioutput_enetcv_error",
                                    "test_warm_start_convergence",
                                    "test_warm_start_convergence_with_regularizer_decrement",
                                    "test_random_descent",
                                    "test_enet_path_positive",
                                    "test_sparse_dense_descent_paths",
                                    "test_check_input_false",
                                    "test_enet_copy_X_False_check_input_False",
                                    "test_overrided_gram_matrix",
                                    "test_enet_float_precision",
                                    "test_enet_l1_ratio",
                                    "test_coef_shape_not_zero",
                                    "test_warm_start_multitask_lasso",
                                    "test_convergence_warnings",
                                    "test_sparse_input_convergence_warning"
                                ],
                                "types": {}
                            },
                            "test_huber": {
                                "functions": [
                                    "make_regression_with_outliers",
                                    "test_huber_equals_lr_for_high_epsilon",
                                    "test_huber_max_iter",
                                    "test_huber_gradient",
                                    "test_huber_sample_weights",
                                    "test_huber_sparse",
                                    "test_huber_scaling_invariant",
                                    "test_huber_warm_start",
                                    "test_huber_better_r2_score",
                                    "test_huber_bool"
                                ],
                                "types": {}
                            },
                            "test_least_angle": {
                                "functions": [
                                    "test_simple",
                                    "test_simple_precomputed",
                                    "_assert_same_lars_path_result",
                                    "test_x_none_gram_none_raises_value_error",
                                    "test_all_precomputed",
                                    "test_collinearity",
                                    "test_no_path",
                                    "test_no_path_precomputed",
                                    "test_no_path_all_precomputed",
                                    "test_singular_matrix",
                                    "test_rank_deficient_design",
                                    "test_lasso_lars_vs_lasso_cd",
                                    "test_lasso_lars_vs_lasso_cd_early_stopping",
                                    "test_lasso_lars_path_length",
                                    "test_lasso_lars_vs_lasso_cd_ill_conditioned",
                                    "test_lasso_lars_vs_lasso_cd_ill_conditioned2",
                                    "test_lars_add_features",
                                    "test_lars_n_nonzero_coefs",
                                    "test_lars_cv_max_iter",
                                    "test_lasso_lars_ic",
                                    "test_lars_path_readonly_data",
                                    "test_lasso_lars_vs_lasso_cd_positive",
                                    "test_lasso_lars_vs_R_implementation"
                                ],
                                "types": {}
                            },
                            "test_logistic": {
                                "functions": [
                                    "check_predictions",
                                    "test_logistic_cv_score_does_not_warn_by_default",
                                    "test_predict_iris",
                                    "test_multinomial_binary_probabilities",
                                    "test_consistency_path",
                                    "test_logistic_regression_path_convergence_fail",
                                    "test_liblinear_dual_random_state",
                                    "test_logistic_loss_and_grad",
                                    "test_logistic_grad_hess",
                                    "test_intercept_logistic_helper",
                                    "test_ovr_multinomial_iris",
                                    "test_logistic_regression_solvers",
                                    "test_logistic_regression_solvers_multiclass",
                                    "_compute_class_weight_dictionary",
                                    "test_logistic_regression_class_weights",
                                    "test_multinomial_grad_hess",
                                    "test_liblinear_decision_function_zero",
                                    "test_logreg_intercept_scaling",
                                    "test_logreg_l1",
                                    "test_logreg_l1_sparse_data",
                                    "test_logreg_predict_proba_multinomial",
                                    "test_max_iter",
                                    "test_saga_vs_liblinear",
                                    "test_warm_start_converge_LR",
                                    "test_elastic_net_coeffs",
                                    "test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr",
                                    "test_logistic_regression_path_coefs_multinomial",
                                    "test_logistic_regression_path_deprecation"
                                ],
                                "types": {
                                    "MockScorer": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MockScorer"
                                            },
                                            {
                                                "name": "__call__",
                                                "updates": [0]
                                            }
                                        ]
                                    }
                                }
                            },
                            "test_omp": {
                                "functions": [
                                    "test_correct_shapes",
                                    "test_correct_shapes_gram",
                                    "test_n_nonzero_coefs",
                                    "test_tol",
                                    "test_with_without_gram",
                                    "test_with_without_gram_tol",
                                    "test_unreachable_accuracy",
                                    "test_bad_input",
                                    "test_perfect_signal_recovery",
                                    "test_orthogonal_mp_gram_readonly",
                                    "test_estimator",
                                    "test_identical_regressors",
                                    "test_swapped_regressors",
                                    "test_no_atoms",
                                    "test_omp_path",
                                    "test_omp_return_path_prop_with_gram",
                                    "test_omp_cv",
                                    "test_omp_reaches_least_squares"
                                ],
                                "types": {}
                            },
                            "test_passive_aggressive": {
                                "functions": [
                                    "test_classifier_undefined_methods",
                                    "test_regressor_undefined_methods"
                                ],
                                "types": {
                                    "MyPassiveAggressive": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MyPassiveAggressive"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "project"
                                        ]
                                    }
                                }
                            },
                            "test_perceptron": {
                                "functions": ["test_undefined_methods"],
                                "types": {
                                    "MyPerceptron": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MyPerceptron"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "project",
                                            "predict"
                                        ]
                                    }
                                }
                            },
                            "test_ransac": {
                                "functions": [
                                    "test_ransac_inliers_outliers",
                                    "test_ransac_is_data_valid",
                                    "test_ransac_is_model_valid",
                                    "test_ransac_max_trials",
                                    "test_ransac_stop_n_inliers",
                                    "test_ransac_stop_score",
                                    "test_ransac_score",
                                    "test_ransac_predict",
                                    "test_ransac_resid_thresh_no_inliers",
                                    "test_ransac_no_valid_data",
                                    "test_ransac_no_valid_model",
                                    "test_ransac_exceed_max_skips",
                                    "test_ransac_warn_exceed_max_skips",
                                    "test_ransac_sparse_coo",
                                    "test_ransac_sparse_csr",
                                    "test_ransac_sparse_csc",
                                    "test_ransac_none_estimator",
                                    "test_ransac_min_n_samples",
                                    "test_ransac_default_residual_threshold",
                                    "test_ransac_dynamic_max_trials",
                                    "test_ransac_fit_sample_weight"
                                ],
                                "types": {}
                            },
                            "test_ridge": {
                                "functions": [
                                    "test_primal_dual_relationship",
                                    "test_ridge_singular",
                                    "test_ridge_regression_sample_weights",
                                    "test_ridge_regression_convergence_fail",
                                    "test_ridge_sample_weights",
                                    "test_ridge_shapes",
                                    "test_ridge_intercept",
                                    "test_toy_ridge_object",
                                    "test_ridge_vs_lstsq",
                                    "test_ridge_individual_penalties",
                                    "_make_sparse_offset_regression",
                                    "_test_ridge_loo",
                                    "_test_ridge_cv_normalize",
                                    "_test_ridge_cv",
                                    "_test_ridge_diabetes",
                                    "_test_multi_ridge_diabetes",
                                    "_test_ridge_classifiers",
                                    "_test_tolerance",
                                    "check_dense_sparse",
                                    "test_ridge_sparse_svd",
                                    "test_class_weights",
                                    "test_raises_value_error_if_sample_weights_greater_than_1d",
                                    "test_sparse_design_with_sample_weights",
                                    "test_raises_value_error_if_solver_not_supported",
                                    "test_sparse_cg_max_iter",
                                    "test_ridge_fit_intercept_sparse",
                                    "test_ridge_classifier_no_support_multilabel",
                                    "test_dtype_match_cholesky"
                                ],
                                "types": {}
                            },
                            "test_sag": {
                                "functions": [
                                    "log_dloss",
                                    "log_loss",
                                    "squared_dloss",
                                    "squared_loss",
                                    "get_pobj",
                                    "sag",
                                    "sag_sparse",
                                    "get_step_size",
                                    "test_classifier_matching",
                                    "test_regressor_matching",
                                    "test_get_auto_step_size",
                                    "test_sag_regressor",
                                    "test_multinomial_loss",
                                    "test_multinomial_loss_ground_truth"
                                ],
                                "types": {}
                            },
                            "test_sgd": {
                                "functions": [
                                    {
                                        "name": "_update_kwargs",
                                        "updates": [0]
                                    },
                                    "SGDClassifier",
                                    "SGDRegressor",
                                    "SparseSGDClassifier",
                                    "SparseSGDRegressor",
                                    "asgd",
                                    "_test_warm_start",
                                    "test_l1_ratio",
                                    "test_underflow_or_overlow",
                                    "test_numerical_stability_large_gradient",
                                    "test_tol_parameter",
                                    "_test_gradient_common",
                                    "test_gradient_hinge",
                                    "test_gradient_squared_hinge",
                                    "test_gradient_log",
                                    "test_gradient_squared_loss",
                                    "test_gradient_huber",
                                    "test_gradient_modified_huber",
                                    "test_gradient_epsilon_insensitive",
                                    "test_gradient_squared_epsilon_insensitive",
                                    "test_multi_thread_multi_class_and_early_stopping",
                                    "test_multi_core_gridsearch_and_early_stopping"
                                ],
                                "types": {
                                    "_SparseSGDClassifier": {
                                        "methods": [
                                            "fit",
                                            "partial_fit",
                                            "decision_function",
                                            "predict_proba"
                                        ]
                                    },
                                    "_SparseSGDRegressor": {
                                        "methods": ["fit", "partial_fit", "decision_function"]
                                    }
                                }
                            },
                            "test_sparse_coordinate_descent": {
                                "functions": [
                                    "test_sparse_coef",
                                    "test_normalize_option",
                                    "test_lasso_zero",
                                    "test_enet_toy_list_input",
                                    "test_enet_toy_explicit_sparse_input",
                                    "make_sparse_data",
                                    "_test_sparse_enet_not_as_toy_dataset",
                                    "test_sparse_enet_not_as_toy_dataset",
                                    "test_sparse_lasso_not_as_toy_dataset",
                                    "test_enet_multitarget",
                                    "test_path_parameters",
                                    "test_same_output_sparse_dense_lasso_and_enet_cv",
                                    "test_same_multiple_output_sparse_dense",
                                    "test_sparse_enet_coordinate_descent"
                                ],
                                "types": {}
                            },
                            "test_theil_sen": {
                                "functions": [
                                    "gen_toy_problem_1d",
                                    "gen_toy_problem_2d",
                                    "gen_toy_problem_4d",
                                    "test_modweiszfeld_step_1d",
                                    "test_modweiszfeld_step_2d",
                                    "test_spatial_median_1d",
                                    "test_spatial_median_2d",
                                    "test_theil_sen_1d",
                                    "test_theil_sen_1d_no_intercept",
                                    "test_theil_sen_2d",
                                    "test_calc_breakdown_point",
                                    "test_checksubparams_negative_subpopulation",
                                    "test_checksubparams_too_few_subsamples",
                                    "test_checksubparams_too_many_subsamples",
                                    "test_checksubparams_n_subsamples_if_less_samples_than_features",
                                    "test_subpopulation",
                                    "test_subsamples",
                                    "test_verbosity",
                                    "test_theil_sen_parallel",
                                    "test_less_samples_than_features"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "base": {
                        "functions": [
                            "make_dataset",
                            "_preprocess_data",
                            "_rescale_data",
                            "_pre_fit"
                        ],
                        "types": {
                            "LinearModel": {
                                "methods": [
                                    "_decision_function",
                                    "predict",
                                    {
                                        "name": "_set_intercept",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "LinearClassifierMixin": {
                                "methods": ["decision_function", "predict", "_predict_proba_lr"]
                            },
                            "SparseCoefMixin": {
                                "methods": [
                                    {
                                        "name": "densify",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "sparsify",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "LinearRegression": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LinearRegression"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict"
                                ]
                            }
                        }
                    },
                    "bayes": {
                        "functions": [],
                        "types": {
                            "BayesianRidge": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "BayesianRidge"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "_update_coef_",
                                    "_log_marginal_likelihood"
                                ]
                            },
                            "ARDRegression": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "ARDRegression"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict"
                                ]
                            }
                        }
                    },
                    "coordinate_descent": {
                        "functions": [
                            "_alpha_grid",
                            "lasso_path",
                            "enet_path",
                            {
                                "name": "_path_residuals",
                                "updates": [5]
                            }
                        ],
                        "types": {
                            "ElasticNet": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "ElasticNet"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "_decision_function"
                                ]
                            },
                            "Lasso": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "Lasso"
                                    },
                                    "__init__",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "LinearModelCV": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "LassoCV": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "LassoCV"
                                    },
                                    "__init__",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "ElasticNetCV": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "ElasticNetCV"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "MultiTaskElasticNet": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MultiTaskElasticNet"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "_more_tags"
                                ]
                            },
                            "MultiTaskLasso": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MultiTaskLasso"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "MultiTaskElasticNetCV": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MultiTaskElasticNetCV"
                                    },
                                    "_more_tags",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "MultiTaskLassoCV": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "MultiTaskLassoCV"
                                    },
                                    "__init__",
                                    "_more_tags",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "huber": {
                        "functions": ["_huber_loss_and_gradient"],
                        "types": {
                            "HuberRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "HuberRegressor"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "least_angle": {
                        "functions": [
                            "lars_path",
                            "lars_path_gram",
                            {
                                "name": "_lars_path_solver",
                                "updates": [3]
                            },
                            "_check_copy_and_writeable",
                            {
                                "name": "_lars_path_residues",
                                "updates": [0]
                            }
                        ],
                        "types": {
                            "Lars": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "Lars"
                                    },
                                    {
                                        "name": "_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "LassoLars": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LassoLars"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "LarsCV": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LarsCV"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "LassoLarsCV": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LassoLarsCV"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "LassoLarsIC": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LassoLarsIC"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "logistic": {
                        "functions": [
                            "_intercept_dot",
                            "_logistic_loss_and_grad",
                            "_logistic_loss",
                            "_logistic_grad_hess",
                            "_multinomial_loss",
                            "_multinomial_loss_grad",
                            "_multinomial_grad_hess",
                            "_check_solver",
                            "_check_multi_class",
                            "_logistic_regression_path",
                            "_log_reg_scoring_path"
                        ],
                        "types": {
                            "LogisticRegression": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LogisticRegression"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "score",
                                    "predict",
                                    "predict_proba",
                                    "predict_log_proba"
                                ]
                            },
                            "LogisticRegressionCV": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LogisticRegressionCV"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "score",
                                    "predict",
                                    "predict_proba",
                                    "predict_log_proba"
                                ]
                            }
                        }
                    },
                    "omp": {
                        "functions": [
                            "_cholesky_omp",
                            {
                                "name": "_gram_omp",
                                "updates": [0, 1]
                            },
                            "orthogonal_mp",
                            "orthogonal_mp_gram",
                            {
                                "name": "_omp_path_residues",
                                "updates": [0]
                            }
                        ],
                        "types": {
                            "OrthogonalMatchingPursuit": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "OrthogonalMatchingPursuit"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "OrthogonalMatchingPursuitCV": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "OrthogonalMatchingPursuitCV"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "passive_aggressive": {
                        "functions": [],
                        "types": {
                            "PassiveAggressiveClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "PassiveAggressiveClassifier"
                                    },
                                    "partial_fit",
                                    "fit"
                                ]
                            },
                            "PassiveAggressiveRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "PassiveAggressiveRegressor"
                                    },
                                    "partial_fit",
                                    "fit"
                                ]
                            }
                        }
                    },
                    "perceptron": {
                        "functions": [],
                        "types": {
                            "Perceptron": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "Perceptron"
                                    },
                                    "__init__"
                                ]
                            }
                        }
                    },
                    "ransac": {
                        "functions": ["_dynamic_max_trials"],
                        "types": {
                            "RANSACRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "RANSACRegressor"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "score"
                                ]
                            }
                        }
                    },
                    "ridge": {
                        "functions": [
                            "_solve_sparse_cg",
                            "_solve_lsqr",
                            "_solve_cholesky",
                            "_solve_cholesky_kernel",
                            "_solve_svd",
                            "_get_valid_accept_sparse",
                            "ridge_regression",
                            "_ridge_regression",
                            "_check_gcv_mode",
                            "_find_smallest_angle"
                        ],
                        "types": {
                            "_BaseRidge": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "Ridge": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "Ridge"
                                    },
                                    "__init__",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "RidgeClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "RidgeClassifier"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "score"
                                ]
                            },
                            "_X_operator": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_X_operator"
                                    },
                                    "_matvec",
                                    "_matmat",
                                    "_transpose"
                                ]
                            },
                            "_Xt_operator": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_Xt_operator"
                                    },
                                    "_matvec",
                                    "_matmat"
                                ]
                            },
                            "_RidgeGCV": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_RidgeGCV"
                                    },
                                    "_decomp_diag",
                                    "_diag_dot",
                                    "_compute_gram",
                                    "_compute_covariance",
                                    "_sparse_multidot_diag",
                                    "_eigen_decompose_gram",
                                    "_solve_eigen_gram",
                                    "_eigen_decompose_covariance",
                                    "_solve_eigen_covariance_no_intercept",
                                    "_solve_eigen_covariance_intercept",
                                    "_solve_eigen_covariance",
                                    "_svd_decompose_design_matrix",
                                    "_solve_svd_design_matrix",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "_BaseRidgeCV": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_BaseRidgeCV"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "RidgeCV": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "RidgeClassifierCV": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "RidgeClassifierCV"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "score"
                                ]
                            }
                        }
                    },
                    "sag": {
                        "functions": ["get_auto_step_size", "sag_solver"],
                        "types": {}
                    },
                    "setup": {
                        "functions": ["configuration"],
                        "types": {}
                    },
                    "stochastic_gradient": {
                        "functions": ["_prepare_fit_binary", "fit_binary"],
                        "types": {
                            "_ValidationScoreCallback": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_ValidationScoreCallback"
                                    },
                                    "__call__"
                                ]
                            },
                            "BaseSGD": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "BaseSGD"
                                    },
                                    "set_params",
                                    "_validate_params",
                                    "_get_loss_function",
                                    "_get_learning_rate_type",
                                    "_get_penalty_type",
                                    "_validate_sample_weight",
                                    {
                                        "name": "_allocate_parameter_mem",
                                        "updates": [0]
                                    },
                                    "_make_validation_split",
                                    "_make_validation_score_cb"
                                ]
                            },
                            "BaseSGDClassifier": {
                                "methods": [
                                    {
                                        "name": "_partial_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_fit_binary",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_fit_multiclass",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "partial_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "set_params"
                                ]
                            },
                            "SGDClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "SGDClassifier"
                                    },
                                    "__init__",
                                    "_check_proba",
                                    "_predict_proba",
                                    "_predict_log_proba",
                                    {
                                        "name": "partial_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "set_params"
                                ]
                            },
                            "BaseSGDRegressor": {
                                "methods": [
                                    {
                                        "name": "_partial_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "partial_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "_decision_function",
                                    "predict",
                                    {
                                        "name": "_fit_regressor",
                                        "updates": [0]
                                    },
                                    "set_params"
                                ]
                            },
                            "SGDRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "SGDRegressor"
                                    },
                                    "__init__",
                                    {
                                        "name": "partial_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "set_params"
                                ]
                            }
                        }
                    },
                    "theil_sen": {
                        "functions": [
                            "_modified_weiszfeld_step",
                            "_spatial_median",
                            "_breakdown_point",
                            "_lstsq"
                        ],
                        "types": {
                            "TheilSenRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "TheilSenRegressor"
                                    },
                                    "_check_subparams",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    }
                },
                "types": {
                    "LinearRegression": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LinearRegression"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict"
                        ]
                    },
                    "BayesianRidge": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "BayesianRidge"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            "_update_coef_",
                            "_log_marginal_likelihood"
                        ]
                    },
                    "ARDRegression": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "ARDRegression"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict"
                        ]
                    },
                    "Lars": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "Lars"
                            },
                            {
                                "name": "_fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "LassoLars": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LassoLars"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "LarsCV": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LarsCV"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "LassoLarsCV": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LassoLarsCV"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "LassoLarsIC": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LassoLarsIC"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "Lasso": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "Lasso"
                            },
                            "__init__",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "ElasticNet": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "ElasticNet"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "_decision_function"
                        ]
                    },
                    "LassoCV": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "LassoCV"
                            },
                            "__init__",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "ElasticNetCV": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "ElasticNetCV"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "MultiTaskLasso": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "MultiTaskLasso"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "MultiTaskElasticNet": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "MultiTaskElasticNet"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "_more_tags"
                        ]
                    },
                    "MultiTaskElasticNetCV": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "MultiTaskElasticNetCV"
                            },
                            "_more_tags",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "MultiTaskLassoCV": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "MultiTaskLassoCV"
                            },
                            "__init__",
                            "_more_tags",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "HuberRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "HuberRegressor"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "SGDClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "SGDClassifier"
                            },
                            "__init__",
                            "_check_proba",
                            "_predict_proba",
                            "_predict_log_proba",
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "set_params"
                        ]
                    },
                    "SGDRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "SGDRegressor"
                            },
                            "__init__",
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            "set_params"
                        ]
                    },
                    "Ridge": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "Ridge"
                            },
                            "__init__",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "RidgeCV": {
                        "methods": [
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "RidgeClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "RidgeClassifier"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "RidgeClassifierCV": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "RidgeClassifierCV"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "LogisticRegression": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LogisticRegression"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "score",
                            "predict",
                            "predict_proba",
                            "predict_log_proba"
                        ]
                    },
                    "LogisticRegressionCV": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LogisticRegressionCV"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "score",
                            "predict",
                            "predict_proba",
                            "predict_log_proba"
                        ]
                    },
                    "OrthogonalMatchingPursuit": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "OrthogonalMatchingPursuit"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "OrthogonalMatchingPursuitCV": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "OrthogonalMatchingPursuitCV"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "PassiveAggressiveClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "PassiveAggressiveClassifier"
                            },
                            { "name": "partial_fit", "updates": [0] },
                            { "name": "fit", "updates": [0] },
                            "score",
                            "predict"
                        ]
                    },
                    "PassiveAggressiveRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "PassiveAggressiveRegressor"
                            },
                            { "name": "partial_fit", "updates": [0] },
                            { "name": "fit", "updates": [0] },
                            "score",
                            "predict"
                        ]
                    },
                    "Perceptron": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "Perceptron"
                            },
                            { "name": "partial_fit", "updates": [0] },
                            { "name": "fit", "updates": [0] },
                            "score",
                            "predict"
                        ]
                    },
                    "RANSACRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "RANSACRegressor"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            "score"
                        ]
                    },
                    "TheilSenRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "TheilSenRegressor"
                            },
                            "_check_subparams",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    }
                },
                "functions": [
                    "lars_path",
                    "lars_path_gram",
                    "lasso_path",
                    "enet_path",
                    "ridge_regression",
                    "orthogonal_mp",
                    "orthogonal_mp_gram"
                ]
            },
            "manifold": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_isomap": {
                                "functions": [
                                    "test_isomap_simple_grid",
                                    "test_isomap_reconstruction_error",
                                    "test_transform",
                                    "test_pipeline",
                                    "test_isomap_clone_bug",
                                    "test_sparse_input"
                                ],
                                "types": {}
                            },
                            "test_locally_linear": {
                                "functions": [
                                    "test_barycenter_kneighbors_graph",
                                    "test_lle_simple_grid",
                                    "test_lle_manifold",
                                    "test_lle_init_parameters",
                                    "test_pipeline",
                                    "test_singular_matrix",
                                    "test_integer_input"
                                ],
                                "types": {}
                            },
                            "test_mds": {
                                "functions": ["test_smacof", "test_smacof_error", "test_MDS"],
                                "types": {}
                            },
                            "test_spectral_embedding": {
                                "functions": [
                                    "_check_with_col_sign_flipping",
                                    "test_sparse_graph_connected_component",
                                    "test_spectral_embedding_precomputed_affinity",
                                    "test_spectral_embedding_callable_affinity",
                                    "test_spectral_embedding_amg_solver",
                                    "test_spectral_embedding_unknown_eigensolver",
                                    "test_spectral_embedding_unknown_affinity",
                                    "test_connectivity",
                                    "test_spectral_embedding_deterministic",
                                    "test_spectral_embedding_unnormalized",
                                    "test_spectral_embedding_first_eigen_vector"
                                ],
                                "types": {}
                            },
                            "test_t_sne": {
                                "functions": [
                                    "test_gradient_descent_stops",
                                    "test_binary_search",
                                    "test_binary_search_neighbors",
                                    "test_binary_perplexity_stability",
                                    "test_gradient",
                                    "test_trustworthiness",
                                    "test_preserve_trustworthiness_approximately",
                                    "test_optimization_minimizes_kl_divergence",
                                    "test_fit_csr_matrix",
                                    "test_preserve_trustworthiness_approximately_with_precomputed_distances",
                                    "test_trustworthiness_precomputed_deprecation",
                                    "test_trustworthiness_not_euclidean_metric",
                                    "test_early_exaggeration_too_small",
                                    "test_too_few_iterations",
                                    "test_non_square_precomputed_distances",
                                    "test_non_positive_precomputed_distances",
                                    "test_non_positive_computed_distances",
                                    "test_init_not_available",
                                    "test_init_ndarray",
                                    "test_init_ndarray_precomputed",
                                    "test_distance_not_available",
                                    "test_method_not_available",
                                    "test_angle_out_of_range_checks",
                                    "test_pca_initialization_not_compatible_with_precomputed_kernel",
                                    "test_n_components_range",
                                    "test_early_exaggeration_used",
                                    "test_n_iter_used",
                                    "test_answer_gradient_two_points",
                                    "test_answer_gradient_four_points",
                                    "test_skip_num_points_gradient",
                                    "_run_answer_test",
                                    "test_verbose",
                                    "test_chebyshev_metric",
                                    "test_reduction_to_one_component",
                                    "test_no_sparse_on_barnes_hut",
                                    "test_barnes_hut_angle",
                                    "test_min_grad_norm",
                                    "test_accessible_kl_divergence",
                                    "check_uniform_grid",
                                    "assert_uniform_grid",
                                    "test_bh_match_exact",
                                    "test_tsne_with_different_distance_metrics"
                                ],
                                "types": {
                                    "ObjectiveSmallGradient": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "ObjectiveSmallGradient"
                                            },
                                            {
                                                "name": "__call__",
                                                "updates": [0]
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "isomap": {
                        "functions": [],
                        "types": {
                            "Isomap": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "Isomap"
                                    },
                                    {
                                        "name": "_fit_transform",
                                        "updates": [0]
                                    },
                                    "reconstruction_error",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    "transform"
                                ]
                            }
                        }
                    },
                    "locally_linear": {
                        "functions": [
                            "barycenter_weights",
                            "barycenter_kneighbors_graph",
                            "null_space",
                            "locally_linear_embedding"
                        ],
                        "types": {
                            "LocallyLinearEmbedding": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LocallyLinearEmbedding"
                                    },
                                    {
                                        "name": "_fit_transform",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    "transform"
                                ]
                            }
                        }
                    },
                    "mds": {
                        "functions": ["_smacof_single", "smacof"],
                        "types": {
                            "MDS": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MDS"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "setup": {
                        "functions": ["configuration"],
                        "types": {}
                    },
                    "spectral_embedding_": {
                        "functions": [
                            "_graph_connected_component",
                            "_graph_is_connected",
                            "_set_diag",
                            "spectral_embedding"
                        ],
                        "types": {
                            "SpectralEmbedding": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "SpectralEmbedding"
                                    },
                                    {
                                        "name": "_get_affinity_matrix",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "t_sne": {
                        "functions": [
                            "_joint_probabilities",
                            "_joint_probabilities_nn",
                            "_kl_divergence",
                            "_kl_divergence_bh",
                            {
                                "name": "_gradient_descent",
                                "updates": [12]
                            },
                            "trustworthiness"
                        ],
                        "types": {
                            "TSNE": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "TSNE"
                                    },
                                    {
                                        "name": "_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_tsne",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    }
                },
                "types": {
                    "LocallyLinearEmbedding": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LocallyLinearEmbedding"
                            },
                            {
                                "name": "_fit_transform",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            "transform"
                        ]
                    },
                    "Isomap": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "Isomap"
                            },
                            {
                                "name": "_fit_transform",
                                "updates": [0]
                            },
                            "reconstruction_error",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            "transform"
                        ]
                    },
                    "MDS": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "MDS"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            }
                        ]
                    },
                    "SpectralEmbedding": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "SpectralEmbedding"
                            },
                            {
                                "name": "_get_affinity_matrix",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            }
                        ]
                    },
                    "TSNE": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "TSNE"
                            },
                            {
                                "name": "_fit",
                                "updates": [0]
                            },
                            {
                                "name": "_tsne",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    }
                },
                "functions": [
                    "locally_linear_embedding",
                    "smacof",
                    "spectral_embedding"
                ]
            },
            "metrics": {
                "modules": {
                    "cluster": {
                        "modules": {
                            "tests": {
                                "modules": {
                                    "test_bicluster": {
                                        "functions": [
                                            "test_jaccard",
                                            "test_consensus_score",
                                            "test_consensus_score_issue2445"
                                        ],
                                        "types": {}
                                    },
                                    "test_common": {
                                        "functions": ["test_symmetric_non_symmetric_union"],
                                        "types": {}
                                    },
                                    "test_supervised": {
                                        "functions": [
                                            "test_future_warning",
                                            "test_generalized_average",
                                            "test_homogeneous_but_not_complete_labeling",
                                            "test_complete_but_not_homogeneous_labeling",
                                            "test_not_complete_and_not_homogeneous_labeling",
                                            "test_beta_parameter",
                                            "test_non_consecutive_labels",
                                            "test_expected_mutual_info_overflow",
                                            "test_int_overflow_mutual_info_fowlkes_mallows_score",
                                            "test_entropy",
                                            "test_contingency_matrix",
                                            "test_contingency_matrix_sparse",
                                            "test_v_measure_and_mutual_information",
                                            "test_fowlkes_mallows_score",
                                            "test_fowlkes_mallows_score_properties"
                                        ],
                                        "types": {}
                                    },
                                    "test_unsupervised": {
                                        "functions": [
                                            "test_silhouette",
                                            "test_cluster_size_1",
                                            "test_silhouette_paper_example",
                                            "test_correct_labelsize",
                                            "test_non_encoded_labels",
                                            "test_non_numpy_labels",
                                            "assert_raises_on_only_one_label",
                                            "assert_raises_on_all_points_same_cluster",
                                            "test_calinski_harabasz_score",
                                            "test_deprecated_calinski_harabaz_score",
                                            "test_davies_bouldin_score"
                                        ],
                                        "types": {}
                                    }
                                },
                                "types": {},
                                "functions": []
                            },
                            "bicluster": {
                                "functions": [
                                    "_check_rows_and_columns",
                                    "_jaccard",
                                    "_pairwise_similarity",
                                    "consensus_score"
                                ],
                                "types": {}
                            },
                            "setup": {
                                "functions": ["configuration"],
                                "types": {}
                            },
                            "supervised": {
                                "functions": [
                                    "_comb2",
                                    "check_clusterings",
                                    "_generalized_average",
                                    "contingency_matrix",
                                    "adjusted_rand_score",
                                    "homogeneity_completeness_v_measure",
                                    "homogeneity_score",
                                    "completeness_score",
                                    "v_measure_score",
                                    "mutual_info_score",
                                    "adjusted_mutual_info_score",
                                    "normalized_mutual_info_score",
                                    "fowlkes_mallows_score",
                                    "entropy"
                                ],
                                "types": {}
                            },
                            "unsupervised": {
                                "functions": [
                                    "check_number_of_labels",
                                    "silhouette_score",
                                    "_silhouette_reduce",
                                    "silhouette_samples",
                                    "calinski_harabasz_score",
                                    "davies_bouldin_score"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": [
                            "adjusted_mutual_info_score",
                            "normalized_mutual_info_score",
                            "adjusted_rand_score",
                            "completeness_score",
                            "contingency_matrix",
                            "homogeneity_completeness_v_measure",
                            "homogeneity_score",
                            "mutual_info_score",
                            "v_measure_score",
                            "fowlkes_mallows_score",
                            "entropy",
                            "silhouette_samples",
                            "silhouette_score",
                            "calinski_harabasz_score",
                            "davies_bouldin_score",
                            "consensus_score"
                        ]
                    },
                    "tests": {
                        "modules": {
                            "test_classification": {
                                "functions": [
                                    "make_prediction",
                                    "test_classification_report_dictionary_output",
                                    "test_multilabel_accuracy_score_subset_accuracy",
                                    "test_precision_recall_f1_score_binary",
                                    "test_average_precision_score_score_non_binary_class",
                                    "test_average_precision_score_duplicate_values",
                                    "test_average_precision_score_tied_values",
                                    "test_precision_recall_f_unused_pos_label",
                                    "test_confusion_matrix_binary",
                                    "test_multilabel_confusion_matrix_binary",
                                    "test_multilabel_confusion_matrix_multiclass",
                                    "test_multilabel_confusion_matrix_multilabel",
                                    "test_multilabel_confusion_matrix_errors",
                                    "test_cohen_kappa",
                                    "test_matthews_corrcoef_against_numpy_corrcoef",
                                    "test_matthews_corrcoef_against_jurman",
                                    "test_matthews_corrcoef",
                                    "test_matthews_corrcoef_multiclass",
                                    "test_precision_recall_f1_score_multiclass",
                                    "test_precision_recall_f1_score_binary_averaged",
                                    "test_zero_precision_recall",
                                    "test_confusion_matrix_multiclass_subset_labels",
                                    "test_confusion_matrix_dtype",
                                    "test_classification_report_multiclass",
                                    "test_classification_report_multiclass_balanced",
                                    "test_classification_report_multiclass_with_label_detection",
                                    "test_classification_report_multiclass_with_digits",
                                    "test_classification_report_multiclass_with_string_label",
                                    "test_classification_report_multiclass_with_unicode_label",
                                    "test_classification_report_multiclass_with_long_string_label",
                                    "test_classification_report_labels_target_names_unequal_length",
                                    "test_classification_report_no_labels_target_names_unequal_length",
                                    "test_multilabel_zero_one_loss_subset",
                                    "test_multilabel_hamming_loss",
                                    "test_jaccard_score_validation",
                                    "test_multilabel_jaccard_score",
                                    "test_multiclass_jaccard_score",
                                    "test_average_binary_jaccard_score",
                                    "test_precision_recall_f1_no_labels_average_none",
                                    "test_prf_warnings",
                                    "test_recall_warnings",
                                    "test_precision_warnings",
                                    "test_fscore_warnings",
                                    "test_prf_average_binary_data_non_binary",
                                    "test__check_targets",
                                    "test__check_targets_multiclass_with_both_y_true_and_y_pred_binary",
                                    "test_hinge_loss_binary",
                                    "test_hinge_loss_multiclass",
                                    "test_hinge_loss_multiclass_missing_labels_with_labels_none",
                                    "test_hinge_loss_multiclass_with_missing_labels",
                                    "test_hinge_loss_multiclass_invariance_lists",
                                    "test_log_loss",
                                    "test_log_loss_pandas_input",
                                    "test_brier_score_loss",
                                    "test_balanced_accuracy_score_unseen",
                                    "test_multilabel_jaccard_similarity_score_deprecation"
                                ],
                                "types": {}
                            },
                            "test_common": {
                                "functions": [
                                    "precision_recall_curve_padded_thresholds",
                                    "test_normalize_option_multilabel_classification",
                                    "check_averaging",
                                    "test_averaging_binary_multilabel_all_zeroes"
                                ],
                                "types": {}
                            },
                            "test_pairwise": {
                                "functions": [
                                    "test_pairwise_distances",
                                    "test_no_data_conversion_warning",
                                    "test_pairwise_precomputed_non_negative",
                                    "callable_rbf_kernel",
                                    "test_pairwise_callable_nonstrict_metric",
                                    "test_pairwise_kernels_callable",
                                    "test_pairwise_kernels_filter_param",
                                    "test_paired_distances_callable",
                                    "test_pairwise_distances_argmin_min",
                                    "_reduce_func",
                                    "test_pairwise_distances_chunked_reduce",
                                    "check_pairwise_distances_chunked",
                                    "test_cosine_distances",
                                    "test_haversine_distances",
                                    "test_paired_euclidean_distances",
                                    "test_paired_manhattan_distances",
                                    "test_chi_square_kernel",
                                    "test_linear_kernel",
                                    "test_rbf_kernel",
                                    "test_laplacian_kernel",
                                    "test_cosine_similarity",
                                    "test_check_dense_matrices",
                                    "test_check_XB_returned",
                                    "test_check_different_dimensions",
                                    "test_check_invalid_dimensions",
                                    "test_check_sparse_arrays",
                                    "tuplify",
                                    "test_check_tuple_input",
                                    "test_check_preserve_type"
                                ],
                                "types": {}
                            },
                            "test_ranking": {
                                "functions": [
                                    "make_prediction",
                                    "_auc",
                                    "_average_precision",
                                    "_average_precision_slow",
                                    "_partial_roc_auc_score",
                                    "test_roc_curve_end_points",
                                    "test_roc_returns_consistency",
                                    "test_roc_curve_multi",
                                    "test_roc_curve_confidence",
                                    "test_roc_curve_hard",
                                    "test_roc_curve_one_label",
                                    "test_roc_curve_toydata",
                                    "test_roc_curve_drop_intermediate",
                                    "test_roc_curve_fpr_tpr_increasing",
                                    "test_auc",
                                    "test_auc_errors",
                                    "test_deprecated_auc_reorder",
                                    "test_auc_score_non_binary_class",
                                    "test_binary_clf_curve",
                                    "test_precision_recall_curve",
                                    "_test_precision_recall_curve",
                                    "test_precision_recall_curve_errors",
                                    "test_precision_recall_curve_toydata",
                                    "test_average_precision_constant_values",
                                    "test_average_precision_score_pos_label_errors",
                                    "test_score_scale_invariance",
                                    "check_lrap_toy",
                                    "check_zero_or_all_relevant_labels",
                                    "check_lrap_error_raised",
                                    "check_lrap_only_ties",
                                    "check_lrap_without_tie_and_increasing_score",
                                    "_my_lrap",
                                    "check_alternative_lrap_implementation",
                                    "test_lrap_error_raised",
                                    "test_lrap_sample_weighting_zero_labels",
                                    "test_coverage_error",
                                    "test_coverage_tie_handling",
                                    "test_label_ranking_loss",
                                    "test_ranking_appropriate_input_shape",
                                    "test_ranking_loss_ties_handling",
                                    "test_partial_roc_auc_score"
                                ],
                                "types": {}
                            },
                            "test_regression": {
                                "functions": [
                                    "test_regression_metrics",
                                    "test_multioutput_regression",
                                    "test_regression_metrics_at_limits",
                                    "test__check_reg_targets",
                                    "test__check_reg_targets_exception",
                                    "test_regression_multioutput_array",
                                    "test_regression_custom_weights"
                                ],
                                "types": {}
                            },
                            "test_score_objects": {
                                "functions": [
                                    "_make_estimators",
                                    "setup_module",
                                    "teardown_module",
                                    "test_all_scorers_repr",
                                    "check_scoring_validator_for_single_metric_usecases",
                                    "check_multimetric_scoring_single_metric_wrapper",
                                    "test_check_scoring_and_check_multimetric_scoring",
                                    "test_make_scorer",
                                    "test_classification_scores",
                                    "test_regression_scorers",
                                    "test_thresholded_scorers_multilabel_indicator_data"
                                ],
                                "types": {
                                    "EstimatorWithoutFit": {
                                        "methods": []
                                    },
                                    "EstimatorWithFit": {
                                        "methods": ["fit"]
                                    },
                                    "EstimatorWithFitAndScore": {
                                        "methods": ["fit", "score"]
                                    },
                                    "EstimatorWithFitAndPredict": {
                                        "methods": [
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "predict"
                                        ]
                                    },
                                    "DummyScorer": {
                                        "methods": ["__call__"]
                                    }
                                }
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "base": {
                        "functions": ["_average_binary_score"],
                        "types": {}
                    },
                    "classification": {
                        "functions": [
                            "_check_targets",
                            "_weighted_sum",
                            "accuracy_score",
                            "confusion_matrix",
                            "multilabel_confusion_matrix",
                            "cohen_kappa_score",
                            "jaccard_similarity_score",
                            "jaccard_score",
                            "matthews_corrcoef",
                            "zero_one_loss",
                            "f1_score",
                            "fbeta_score",
                            {
                                "name": "_prf_divide",
                                "updates": [1]
                            },
                            "_check_set_wise_labels",
                            "precision_recall_fscore_support",
                            "precision_score",
                            "recall_score",
                            "balanced_accuracy_score",
                            "classification_report",
                            "hamming_loss",
                            "log_loss",
                            "hinge_loss",
                            "brier_score_loss"
                        ],
                        "types": {}
                    },
                    "pairwise": {
                        "functions": [
                            "_return_float_dtype",
                            "check_pairwise_arrays",
                            "check_paired_arrays",
                            "euclidean_distances",
                            "_euclidean_distances_upcast",
                            "_argmin_min_reduce",
                            "pairwise_distances_argmin_min",
                            "pairwise_distances_argmin",
                            "haversine_distances",
                            "manhattan_distances",
                            "cosine_distances",
                            "paired_euclidean_distances",
                            "paired_manhattan_distances",
                            "paired_cosine_distances",
                            "paired_distances",
                            "linear_kernel",
                            "polynomial_kernel",
                            "sigmoid_kernel",
                            "rbf_kernel",
                            "laplacian_kernel",
                            "cosine_similarity",
                            "additive_chi2_kernel",
                            "chi2_kernel",
                            "distance_metrics",
                            {
                                "name": "_dist_wrapper",
                                "updates": [1]
                            },
                            "_parallel_pairwise",
                            "_pairwise_callable",
                            "_check_chunk_size",
                            "_precompute_metric_params",
                            "pairwise_distances_chunked",
                            "pairwise_distances",
                            "kernel_metrics",
                            "pairwise_kernels"
                        ],
                        "types": {}
                    },
                    "ranking": {
                        "functions": [
                            "auc",
                            "average_precision_score",
                            "roc_auc_score",
                            "_binary_clf_curve",
                            "precision_recall_curve",
                            "roc_curve",
                            "label_ranking_average_precision_score",
                            "coverage_error",
                            "label_ranking_loss"
                        ],
                        "types": {}
                    },
                    "regression": {
                        "functions": [
                            "_check_reg_targets",
                            "mean_absolute_error",
                            "mean_squared_error",
                            "mean_squared_log_error",
                            "median_absolute_error",
                            "explained_variance_score",
                            "r2_score",
                            "max_error"
                        ],
                        "types": {}
                    },
                    "scorer": {
                        "functions": [
                            "get_scorer",
                            "_passthrough_scorer",
                            "check_scoring",
                            "_check_multimetric_scoring",
                            "make_scorer"
                        ],
                        "types": {
                            "_BaseScorer": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_BaseScorer"
                                    },
                                    "__repr__",
                                    "_factory_args"
                                ]
                            },
                            "_PredictScorer": {
                                "methods": ["__call__"]
                            },
                            "_ProbaScorer": {
                                "methods": ["__call__", "_factory_args"]
                            },
                            "_ThresholdScorer": {
                                "methods": ["__call__", "_factory_args"]
                            }
                        }
                    },
                    "setup": {
                        "functions": ["configuration"],
                        "types": {}
                    }
                },
                "types": {},
                "functions": [
                    "auc",
                    "average_precision_score",
                    "coverage_error",
                    "label_ranking_average_precision_score",
                    "label_ranking_loss",
                    "precision_recall_curve",
                    "roc_auc_score",
                    "roc_curve",
                    "accuracy_score",
                    "balanced_accuracy_score",
                    "classification_report",
                    "cohen_kappa_score",
                    "confusion_matrix",
                    "f1_score",
                    "fbeta_score",
                    "hamming_loss",
                    "hinge_loss",
                    "jaccard_similarity_score",
                    "jaccard_score",
                    "log_loss",
                    "matthews_corrcoef",
                    "precision_recall_fscore_support",
                    "precision_score",
                    "recall_score",
                    "zero_one_loss",
                    "brier_score_loss",
                    "multilabel_confusion_matrix",
                    "adjusted_mutual_info_score",
                    "adjusted_rand_score",
                    "completeness_score",
                    "consensus_score",
                    "homogeneity_completeness_v_measure",
                    "homogeneity_score",
                    "mutual_info_score",
                    "normalized_mutual_info_score",
                    "fowlkes_mallows_score",
                    "silhouette_samples",
                    "silhouette_score",
                    "calinski_harabasz_score",
                    "v_measure_score",
                    "davies_bouldin_score",
                    "euclidean_distances",
                    "pairwise_distances",
                    "pairwise_distances_argmin",
                    "pairwise_distances_argmin_min",
                    "pairwise_kernels",
                    "pairwise_distances_chunked",
                    "explained_variance_score",
                    "max_error",
                    "mean_absolute_error",
                    "mean_squared_error",
                    "mean_squared_log_error",
                    "median_absolute_error",
                    "r2_score",
                    "check_scoring",
                    "make_scorer",
                    "get_scorer"
                ]
            },
            "mixture": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_bayesian_mixture": {
                                "functions": [
                                    "test_log_dirichlet_norm",
                                    "test_log_wishart_norm",
                                    "test_bayesian_mixture_covariance_type",
                                    "test_bayesian_mixture_weight_concentration_prior_type",
                                    "test_bayesian_mixture_weights_prior_initialisation",
                                    "test_bayesian_mixture_mean_prior_initialisation",
                                    "test_bayesian_mixture_precisions_prior_initialisation",
                                    "test_bayesian_mixture_check_is_fitted",
                                    "test_bayesian_mixture_weights",
                                    "test_compare_covar_type",
                                    "test_bayesian_mixture_fit_predict_n_init",
                                    "test_bayesian_mixture_predict_predict_proba"
                                ],
                                "types": {}
                            },
                            "test_gaussian_mixture": {
                                "functions": [
                                    "generate_data",
                                    "test_gaussian_mixture_attributes",
                                    "test_check_X",
                                    "test_check_weights",
                                    "test_check_means",
                                    "test_check_precisions",
                                    "test_suffstat_sk_full",
                                    "test_suffstat_sk_tied",
                                    "test_suffstat_sk_diag",
                                    "test_gaussian_suffstat_sk_spherical",
                                    "test_compute_log_det_cholesky",
                                    "_naive_lmvnpdf_diag",
                                    "test_gaussian_mixture_log_probabilities",
                                    "test_gaussian_mixture_estimate_log_prob_resp",
                                    "test_gaussian_mixture_predict_predict_proba",
                                    "test_gaussian_mixture_fit_predict_n_init",
                                    "test_gaussian_mixture_fit",
                                    "test_gaussian_mixture_fit_best_params",
                                    "test_gaussian_mixture_fit_convergence_warning",
                                    "test_multiple_init",
                                    "test_gaussian_mixture_n_parameters",
                                    "test_bic_1d_1component",
                                    "test_gaussian_mixture_aic_bic",
                                    "test_gaussian_mixture_verbose",
                                    "test_score",
                                    "test_score_samples",
                                    "test_monotonic_likelihood",
                                    "test_regularisation",
                                    "test_property",
                                    "test_sample"
                                ],
                                "types": {
                                    "RandomData": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "RandomData"
                                            }
                                        ]
                                    }
                                }
                            },
                            "test_mixture": {
                                "functions": [],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "base": {
                        "functions": ["_check_shape", "_check_X"],
                        "types": {
                            "BaseMixture": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "BaseMixture"
                                    },
                                    "_check_initial_parameters",
                                    "_initialize_parameters",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_predict",
                                        "updates": [0]
                                    },
                                    "_e_step",
                                    "score_samples",
                                    "score",
                                    "predict",
                                    "predict_proba",
                                    "sample",
                                    "_estimate_weighted_log_prob",
                                    "_estimate_log_prob_resp",
                                    {
                                        "name": "_print_verbose_msg_init_beg",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_print_verbose_msg_iter_end",
                                        "updates": [0]
                                    },
                                    "_print_verbose_msg_init_end"
                                ]
                            }
                        }
                    },
                    "bayesian_mixture": {
                        "functions": ["_log_dirichlet_norm", "_log_wishart_norm"],
                        "types": {
                            "BayesianGaussianMixture": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "BayesianGaussianMixture"
                                    },
                                    {
                                        "name": "_check_parameters",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_check_weights_parameters",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_check_means_parameters",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_check_precision_parameters",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_checkcovariance_prior_parameter",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_initialize",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_estimate_weights",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_estimate_means",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_estimate_precisions",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_estimate_wishart_full",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_estimate_wishart_tied",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_estimate_wishart_diag",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_estimate_wishart_spherical",
                                        "updates": [0]
                                    },
                                    "_check_is_fitted",
                                    {
                                        "name": "_m_step",
                                        "updates": [0]
                                    },
                                    "_estimate_log_weights",
                                    "_estimate_log_prob",
                                    "_compute_lower_bound",
                                    "_get_parameters",
                                    {
                                        "name": "_set_parameters",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "gaussian_mixture": {
                        "functions": [
                            "_check_weights",
                            "_check_means",
                            "_check_precision_positivity",
                            "_check_precision_matrix",
                            "_check_precisions_full",
                            "_check_precisions",
                            "_estimate_gaussian_covariances_full",
                            "_estimate_gaussian_covariances_tied",
                            "_estimate_gaussian_covariances_diag",
                            "_estimate_gaussian_covariances_spherical",
                            "_estimate_gaussian_parameters",
                            "_compute_precision_cholesky",
                            "_compute_log_det_cholesky",
                            "_estimate_log_gaussian_prob"
                        ],
                        "types": {
                            "GaussianMixture": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "GaussianMixture"
                                    },
                                    {
                                        "name": "_check_parameters",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_initialize",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_m_step",
                                        "updates": [0]
                                    },
                                    "_estimate_log_prob",
                                    "_estimate_log_weights",
                                    "_compute_lower_bound",
                                    "_check_is_fitted",
                                    "_get_parameters",
                                    {
                                        "name": "_set_parameters",
                                        "updates": [0]
                                    },
                                    "_n_parameters",
                                    "bic",
                                    "aic"
                                ]
                            }
                        }
                    }
                },
                "types": {
                    "GaussianMixture": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "GaussianMixture"
                            },
                            {
                                "name": "_check_parameters",
                                "updates": [0]
                            },
                            {
                                "name": "_initialize",
                                "updates": [0]
                            },
                            {
                                "name": "_m_step",
                                "updates": [0]
                            },
                            "_estimate_log_prob",
                            "_estimate_log_weights",
                            "_compute_lower_bound",
                            "_check_is_fitted",
                            "_get_parameters",
                            {
                                "name": "_set_parameters",
                                "updates": [0]
                            },
                            "_n_parameters",
                            "bic",
                            "aic"
                        ]
                    },
                    "BayesianGaussianMixture": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "BayesianGaussianMixture"
                            },
                            {
                                "name": "_check_parameters",
                                "updates": [0]
                            },
                            {
                                "name": "_check_weights_parameters",
                                "updates": [0]
                            },
                            {
                                "name": "_check_means_parameters",
                                "updates": [0]
                            },
                            {
                                "name": "_check_precision_parameters",
                                "updates": [0]
                            },
                            {
                                "name": "_checkcovariance_prior_parameter",
                                "updates": [0]
                            },
                            {
                                "name": "_initialize",
                                "updates": [0]
                            },
                            {
                                "name": "_estimate_weights",
                                "updates": [0]
                            },
                            {
                                "name": "_estimate_means",
                                "updates": [0]
                            },
                            {
                                "name": "_estimate_precisions",
                                "updates": [0]
                            },
                            {
                                "name": "_estimate_wishart_full",
                                "updates": [0]
                            },
                            {
                                "name": "_estimate_wishart_tied",
                                "updates": [0]
                            },
                            {
                                "name": "_estimate_wishart_diag",
                                "updates": [0]
                            },
                            {
                                "name": "_estimate_wishart_spherical",
                                "updates": [0]
                            },
                            "_check_is_fitted",
                            {
                                "name": "_m_step",
                                "updates": [0]
                            },
                            "_estimate_log_weights",
                            "_estimate_log_prob",
                            "_compute_lower_bound",
                            "_get_parameters",
                            {
                                "name": "_set_parameters",
                                "updates": [0]
                            }
                        ]
                    }
                },
                "functions": []
            },
            "model_selection": {
                "modules": {
                    "tests": {
                        "modules": {
                            "common": {
                                "functions": [],
                                "types": {
                                    "OneTimeSplitter": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "OneTimeSplitter"
                                            },
                                            "split",
                                            "get_n_splits"
                                        ]
                                    }
                                }
                            },
                            "test_search": {
                                "functions": [
                                    "assert_grid_iter_equals_getitem",
                                    "test_parameter_grid",
                                    "check_hyperparameter_searcher_with_fit_params",
                                    "test_refit_callable",
                                    "test_refit_callable_invalid_type",
                                    "test_refit_callable_multi_metric",
                                    "test_param_sampler",
                                    "check_cv_results_array_types",
                                    "check_cv_results_keys",
                                    "test_grid_search_cv_results",
                                    "test_random_search_cv_results",
                                    "test_grid_search_cv_results_multimetric",
                                    "test_random_search_cv_results_multimetric",
                                    "compare_cv_results_multimetric_with_single",
                                    "compare_refit_methods_when_refit_with_acc",
                                    "test_parameters_sampler_replacement",
                                    "test_custom_run_search",
                                    "test__custom_fit_no_run_search",
                                    "test_deprecated_grid_search_iid",
                                    "test_empty_cv_iterator_error",
                                    "test_random_search_bad_cv"
                                ],
                                "types": {
                                    "MockClassifier": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MockClassifier"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "predict",
                                            "transform",
                                            "inverse_transform",
                                            "score",
                                            "get_params",
                                            {
                                                "name": "set_params",
                                                "updates": [0]
                                            }
                                        ]
                                    },
                                    "LinearSVCNoScore": {
                                        "methods": []
                                    },
                                    "BrokenClassifier": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "BrokenClassifier"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "predict"
                                        ]
                                    },
                                    "FailingClassifier": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "FailingClassifier"
                                            },
                                            "fit",
                                            "predict",
                                            "score"
                                        ]
                                    },
                                    "CustomSearchCV": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [],
                                                "returns": "CustomSearchCV"
                                            },
                                            "__init__",
                                            "_run_search"
                                        ]
                                    },
                                    "NoRunSearchSearchCV": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [],
                                                "returns": "NoRunSearchSearchCV"
                                            },
                                            "__init__",
                                            "fit"
                                        ]
                                    },
                                    "BadSearchCV": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [],
                                                "returns": "BadSearchCV"
                                            },
                                            "__init__"
                                        ]
                                    },
                                    "BrokenKFold": {
                                        "methods": ["get_n_splits"]
                                    }
                                }
                            },
                            "test_split": {
                                "functions": [
                                    "check_valid_split",
                                    "check_cv_coverage",
                                    "test_kfold_valueerrors",
                                    "test_kfold_indices",
                                    "test_kfold_no_shuffle",
                                    "test_stratified_kfold_no_shuffle",
                                    "test_stratified_kfold_ratios",
                                    "test_kfold_balance",
                                    "test_stratifiedkfold_balance",
                                    "test_shuffle_kfold",
                                    "test_shuffle_kfold_stratifiedkfold_reproducibility",
                                    "test_shuffle_stratifiedkfold",
                                    "test_kfold_can_detect_dependent_samples_on_digits",
                                    "test_shuffle_split",
                                    "test_stratified_shuffle_split_respects_test_size",
                                    "test_stratified_shuffle_split_iter",
                                    "test_stratified_shuffle_split_even",
                                    "test_stratified_shuffle_split_overlap_train_test_bug",
                                    "test_stratified_shuffle_split_multilabel",
                                    "test_stratified_shuffle_split_multilabel_many_labels",
                                    "test_predefinedsplit_with_kfold_split",
                                    "test_group_shuffle_split",
                                    "test_leave_one_p_group_out",
                                    "test_leave_group_out_changing_groups",
                                    "test_leave_one_p_group_out_error_on_fewer_number_of_groups",
                                    "test_repeated_kfold_determinstic_split",
                                    "test_get_n_splits_for_repeated_kfold",
                                    "test_get_n_splits_for_repeated_stratified_kfold",
                                    "test_repeated_stratified_kfold_determinstic_split",
                                    "test_train_test_split_errors",
                                    "test_train_test_split",
                                    "test_train_test_split_sparse",
                                    "test_train_test_split_mock_pandas",
                                    "test_train_test_split_list_input",
                                    "test_shufflesplit_reproducible",
                                    "test_stratifiedshufflesplit_list_input",
                                    "test_train_test_split_allow_nans",
                                    "test_check_cv",
                                    "test_cv_iterable_wrapper",
                                    "test_group_kfold",
                                    "test_time_series_cv",
                                    "_check_time_series_max_train_size",
                                    "test_time_series_max_train_size",
                                    "test_nsplit_default_warn",
                                    "test_check_cv_default_warn",
                                    "test_build_repr",
                                    "test_train_test_split_empty_trainset",
                                    "test_leave_one_out_empty_trainset",
                                    "test_leave_p_out_empty_trainset"
                                ],
                                "types": {
                                    "MockClassifier": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MockClassifier"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "predict",
                                            "score",
                                            "get_params"
                                        ]
                                    },
                                    "MockSplitter": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MockSplitter"
                                            },
                                            "__repr__"
                                        ]
                                    }
                                }
                            },
                            "test_validation": {
                                "functions": [
                                    "test_cross_validate",
                                    "check_cross_validate_single_metric",
                                    "check_cross_validate_multi_metric",
                                    "test_cross_val_score_mask",
                                    "test_cross_val_score_score_func",
                                    "test_cross_val_score_errors",
                                    "test_cross_val_score_with_score_func_classification",
                                    "test_cross_val_score_with_score_func_regression",
                                    "test_permutation_score",
                                    "test_permutation_test_score_allow_nans",
                                    "test_cross_val_score_allow_nans",
                                    "test_cross_val_score_multilabel",
                                    "test_learning_curve",
                                    "test_learning_curve_unsupervised",
                                    "test_learning_curve_verbose",
                                    "test_learning_curve_incremental_learning_not_possible",
                                    "test_learning_curve_incremental_learning",
                                    "test_learning_curve_incremental_learning_unsupervised",
                                    "test_learning_curve_n_sample_range_out_of_bounds",
                                    "test_learning_curve_remove_duplicate_sample_sizes",
                                    "test_learning_curve_with_boolean_indices",
                                    "test_validation_curve",
                                    "test_validation_curve_clone_estimator",
                                    "test_validation_curve_cv_splits_consistency",
                                    "test_check_is_permutation",
                                    "test_cross_val_predict_sparse_prediction",
                                    "check_cross_val_predict_binary",
                                    "check_cross_val_predict_multiclass",
                                    "check_cross_val_predict_multilabel",
                                    "check_cross_val_predict_with_method_binary",
                                    "check_cross_val_predict_with_method_multiclass",
                                    "test_cross_val_predict_with_method_multilabel_ovr",
                                    "test_cross_val_predict_with_method_multilabel_rf",
                                    "test_cross_val_predict_with_method_rare_class",
                                    "test_cross_val_predict_with_method_multilabel_rf_rare_class",
                                    "get_expected_predictions",
                                    "test_fit_and_score_failing",
                                    "test_fit_and_score_working",
                                    "three_params_scorer",
                                    "test_score"
                                ],
                                "types": {
                                    "MockImprovingEstimator": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MockImprovingEstimator"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "predict",
                                            "score",
                                            "_is_training_data"
                                        ]
                                    },
                                    "MockIncrementalImprovingEstimator": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MockIncrementalImprovingEstimator"
                                            },
                                            "_is_training_data",
                                            {
                                                "name": "partial_fit",
                                                "updates": [0]
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "predict",
                                            "score"
                                        ]
                                    },
                                    "MockEstimatorWithParameter": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MockEstimatorWithParameter"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "predict",
                                            "score",
                                            "_is_training_data"
                                        ]
                                    },
                                    "MockEstimatorWithSingleFitCallAllowed": {
                                        "methods": [
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "predict",
                                            "score"
                                        ]
                                    },
                                    "MockClassifier": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MockClassifier"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "predict",
                                            "score",
                                            "get_params"
                                        ]
                                    },
                                    "BrokenEstimator": {
                                        "methods": []
                                    },
                                    "BadCV": {
                                        "methods": ["split"]
                                    },
                                    "RFWithDecisionFunction": {
                                        "methods": ["decision_function"]
                                    }
                                }
                            }
                        },
                        "types": {},
                        "functions": []
                    }
                },
                "types": {},
                "functions": []
            },
            "neighbors": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_ball_tree": {
                                "functions": [
                                    "dist_func",
                                    "brute_force_neighbors",
                                    "test_ball_tree_query_radius",
                                    "test_ball_tree_query_radius_distance",
                                    "compute_kernel_slow",
                                    "test_gaussian_kde",
                                    "test_ball_tree_two_point",
                                    "test_ball_tree_pickle",
                                    "test_neighbors_heap",
                                    "test_node_heap",
                                    "test_simultaneous_sort",
                                    "test_query_haversine"
                                ],
                                "types": {}
                            },
                            "test_dist_metrics": {
                                "functions": [
                                    "dist_func",
                                    "check_cdist",
                                    "check_cdist_bool",
                                    "check_pdist",
                                    {
                                        "name": "check_pdist_bool",
                                        "updates": [1]
                                    },
                                    "check_pickle",
                                    "test_haversine_metric",
                                    "test_pyfunc_metric",
                                    "test_bad_pyfunc_metric",
                                    "test_input_data_size"
                                ],
                                "types": {}
                            },
                            "test_kde": {
                                "functions": [
                                    "compute_kernel_slow",
                                    "check_results",
                                    "test_kernel_density_sampling",
                                    "test_kde_score",
                                    "test_kde_badargs",
                                    "test_kde_pipeline_gridsearch",
                                    "test_kde_sample_weights"
                                ],
                                "types": {}
                            },
                            "test_kd_tree": {
                                "functions": [
                                    "brute_force_neighbors",
                                    "check_neighbors",
                                    "test_kd_tree_query_radius",
                                    "test_kd_tree_query_radius_distance",
                                    "compute_kernel_slow",
                                    "check_results",
                                    "test_gaussian_kde",
                                    "test_neighbors_heap",
                                    "test_node_heap",
                                    "test_simultaneous_sort"
                                ],
                                "types": {}
                            },
                            "test_lof": {
                                "functions": [
                                    "test_contamination",
                                    "test_contamination_future_warning",
                                    "test_predicted_outlier_number"
                                ],
                                "types": {}
                            },
                            "test_nca": {
                                "functions": [
                                    "test_simple_example",
                                    "test_toy_example_collapse_points",
                                    "test_finite_differences",
                                    "test_params_validation",
                                    "test_transformation_dimensions",
                                    "test_n_components",
                                    "test_init_transformation",
                                    "test_warm_start_validation",
                                    "test_warm_start_effectiveness",
                                    "test_no_verbose",
                                    "test_singleton_class",
                                    "test_one_class",
                                    "test_callback",
                                    "test_expected_transformation_shape",
                                    "test_convergence_warning"
                                ],
                                "types": {
                                    "LossStorer": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "LossStorer"
                                            },
                                            {
                                                "name": "callback",
                                                "updates": [0]
                                            }
                                        ]
                                    },
                                    "TransformationStorer": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "TransformationStorer"
                                            },
                                            {
                                                "name": "callback",
                                                "updates": [0]
                                            }
                                        ]
                                    }
                                }
                            },
                            "test_nearest_centroid": {
                                "functions": [
                                    "test_classification_toy",
                                    "test_precomputed",
                                    "test_iris",
                                    "test_iris_shrinkage",
                                    "test_pickle",
                                    "test_shrinkage_correct",
                                    "test_shrinkage_threshold_decoded_y",
                                    "test_predict_translated_data",
                                    "test_manhattan_metric"
                                ],
                                "types": {}
                            },
                            "test_neighbors": {
                                "functions": [
                                    "_weight_func",
                                    "test_unsupervised_kneighbors",
                                    "test_unsupervised_inputs",
                                    "test_n_neighbors_datatype",
                                    "test_not_fitted_error_gets_raised",
                                    "test_precomputed",
                                    "test_unsupervised_radius_neighbors",
                                    "test_kneighbors_classifier",
                                    "test_kneighbors_classifier_float_labels",
                                    "test_kneighbors_classifier_predict_proba",
                                    "test_radius_neighbors_classifier",
                                    "test_radius_neighbors_classifier_when_no_neighbors",
                                    "test_radius_neighbors_classifier_outlier_labeling",
                                    "test_radius_neighbors_classifier_zero_distance",
                                    "test_neighbors_regressors_zero_distance",
                                    "test_radius_neighbors_boundary_handling",
                                    "test_RadiusNeighborsClassifier_multioutput",
                                    "test_kneighbors_classifier_sparse",
                                    "test_KNeighborsClassifier_multioutput",
                                    "test_kneighbors_regressor",
                                    "test_KNeighborsRegressor_multioutput_uniform_weight",
                                    "test_kneighbors_regressor_multioutput",
                                    "test_radius_neighbors_regressor",
                                    "test_RadiusNeighborsRegressor_multioutput_with_uniform_weight",
                                    "test_RadiusNeighborsRegressor_multioutput",
                                    "test_kneighbors_regressor_sparse",
                                    "test_neighbors_iris",
                                    "test_neighbors_digits",
                                    "test_kneighbors_graph",
                                    "test_kneighbors_graph_sparse",
                                    "test_radius_neighbors_graph",
                                    "test_radius_neighbors_graph_sparse",
                                    "test_neighbors_badargs",
                                    "test_neighbors_metrics",
                                    "test_callable_metric",
                                    "test_valid_brute_metric_for_auto_algorithm",
                                    "test_metric_params_interface",
                                    "test_predict_sparse_ball_kd_tree",
                                    "test_non_euclidean_kneighbors",
                                    "check_object_arrays",
                                    "test_k_and_radius_neighbors_train_is_not_query",
                                    "test_k_and_radius_neighbors_X_None",
                                    "test_k_and_radius_neighbors_duplicates",
                                    "test_include_self_neighbors_graph",
                                    "test_dtype_convert",
                                    "test_sparse_metric_callable"
                                ],
                                "types": {}
                            },
                            "test_quad_tree": {
                                "functions": [
                                    "test_quadtree_boundary_computation",
                                    "test_quadtree_similar_point",
                                    "test_summarize"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "base": {
                        "functions": [
                            "_check_weights",
                            {
                                "name": "_get_weights",
                                "updates": [0]
                            },
                            "_tree_query_parallel_helper",
                            "_tree_query_radius_parallel_helper"
                        ],
                        "types": {
                            "NeighborsBase": {
                                "methods": [
                                    "_check_algorithm_metric",
                                    {
                                        "name": "_fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "KNeighborsMixin": {
                                "methods": [
                                    "_kneighbors_reduce_func",
                                    "kneighbors",
                                    "kneighbors_graph"
                                ]
                            },
                            "RadiusNeighborsMixin": {
                                "methods": [
                                    "_radius_neighbors_reduce_func",
                                    "radius_neighbors",
                                    "radius_neighbors_graph"
                                ]
                            },
                            "SupervisedFloatMixin": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "SupervisedIntegerMixin": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "UnsupervisedMixin": {
                                "methods": ["fit"]
                            }
                        }
                    },
                    "classification": {
                        "functions": [],
                        "types": {
                            "KNeighborsClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "KNeighborsClassifier"
                                    },
                                    "predict",
                                    "predict_proba"
                                ]
                            },
                            "RadiusNeighborsClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "RadiusNeighborsClassifier"
                                    },
                                    "predict"
                                ]
                            }
                        }
                    },
                    "graph": {
                        "functions": [
                            "_check_params",
                            "_query_include_self",
                            "kneighbors_graph",
                            "radius_neighbors_graph"
                        ],
                        "types": {}
                    },
                    "kde": {
                        "functions": [],
                        "types": {
                            "KernelDensity": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "KernelDensity"
                                    },
                                    "_choose_algorithm",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "score_samples",
                                    "score",
                                    "sample"
                                ]
                            }
                        }
                    },
                    "lof": {
                        "functions": [],
                        "types": {
                            "LocalOutlierFactor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LocalOutlierFactor"
                                    },
                                    {
                                        "name": "_fit_predict",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "_predict",
                                    "_decision_function",
                                    "_score_samples",
                                    "_local_reachability_density"
                                ]
                            }
                        }
                    },
                    "nca": {
                        "functions": [],
                        "types": {
                            "NeighborhoodComponentsAnalysis": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "NeighborhoodComponentsAnalysis"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "_validate_params",
                                    "_initialize",
                                    {
                                        "name": "_callback",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_loss_grad_lbfgs",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "nearest_centroid": {
                        "functions": [],
                        "types": {
                            "NearestCentroid": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "NearestCentroid"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict"
                                ]
                            }
                        }
                    },
                    "regression": {
                        "functions": [],
                        "types": {
                            "KNeighborsRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "KNeighborsRegressor"
                                    },
                                    "predict"
                                ]
                            },
                            "RadiusNeighborsRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "RadiusNeighborsRegressor"
                                    },
                                    "predict"
                                ]
                            }
                        }
                    },
                    "setup": {
                        "functions": ["configuration"],
                        "types": {}
                    },
                    "unsupervised": {
                        "functions": [],
                        "types": {
                            "NearestNeighbors": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "NearestNeighbors"
                                    },
                                    "__init__"
                                ]
                            }
                        }
                    }
                },
                "types": {
                    "NearestNeighbors": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "NearestNeighbors"
                            },
                            "__init__"
                        ]
                    },
                    "KNeighborsClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "KNeighborsClassifier"
                            },
                            "predict",
                            "predict_proba"
                        ]
                    },
                    "RadiusNeighborsClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "RadiusNeighborsClassifier"
                            },
                            "predict"
                        ]
                    },
                    "KNeighborsRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "KNeighborsRegressor"
                            },
                            "predict"
                        ]
                    },
                    "RadiusNeighborsRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "RadiusNeighborsRegressor"
                            },
                            "predict"
                        ]
                    },
                    "NearestCentroid": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "NearestCentroid"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict"
                        ]
                    },
                    "KernelDensity": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "KernelDensity"
                            },
                            "_choose_algorithm",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "score_samples",
                            "score",
                            "sample"
                        ]
                    },
                    "LocalOutlierFactor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LocalOutlierFactor"
                            },
                            {
                                "name": "_fit_predict",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "_predict",
                            "_decision_function",
                            "_score_samples",
                            "_local_reachability_density"
                        ]
                    },
                    "NeighborhoodComponentsAnalysis": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "NeighborhoodComponentsAnalysis"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform",
                            "_validate_params",
                            "_initialize",
                            {
                                "name": "_callback",
                                "updates": [0]
                            },
                            {
                                "name": "_loss_grad_lbfgs",
                                "updates": [0]
                            }
                        ]
                    }
                },
                "functions": ["kneighbors_graph", "radius_neighbors_graph"]
            },
            "neural_network": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_mlp": {
                                "functions": [
                                    "test_alpha",
                                    "test_fit",
                                    "test_gradient",
                                    "test_lbfgs_classification",
                                    "test_lbfgs_regression",
                                    "test_learning_rate_warmstart",
                                    "test_multilabel_classification",
                                    "test_partial_fit_classes_error",
                                    "test_partial_fit_classification",
                                    "test_partial_fit_unseen_classes",
                                    "test_partial_fit_regression",
                                    "test_partial_fit_errors",
                                    "test_params_errors",
                                    "test_predict_proba_binary",
                                    "test_predict_proba_multiclass",
                                    "test_predict_proba_multilabel",
                                    "test_shuffle",
                                    "test_sparse_matrices",
                                    "test_tolerance",
                                    "test_verbose_sgd",
                                    "test_early_stopping",
                                    "test_adaptive_learning_rate",
                                    "test_n_iter_no_change",
                                    "test_early_stopping_stratified"
                                ],
                                "types": {}
                            },
                            "test_rbm": {
                                "functions": [
                                    "test_fit",
                                    "test_partial_fit",
                                    "test_transform",
                                    "test_small_sparse",
                                    "test_small_sparse_partial_fit",
                                    "test_sample_hiddens",
                                    "test_fit_gibbs",
                                    "test_fit_gibbs_sparse",
                                    "test_gibbs_smoke",
                                    "test_score_samples",
                                    "test_rbm_verbose",
                                    "test_sparse_and_verbose"
                                ],
                                "types": {}
                            },
                            "test_stochastic_optimizers": {
                                "functions": [
                                    "test_base_optimizer",
                                    "test_sgd_optimizer_no_momentum",
                                    "test_sgd_optimizer_momentum",
                                    "test_sgd_optimizer_trigger_stopping",
                                    "test_sgd_optimizer_nesterovs_momentum",
                                    "test_adam_optimizer"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "multilayer_perceptron": {
                        "functions": ["_pack"],
                        "types": {
                            "BaseMultilayerPerceptron": {
                                "methods": [
                                    "_unpack",
                                    {
                                        "name": "_forward_pass",
                                        "updates": [1]
                                    },
                                    {
                                        "name": "_compute_loss_grad",
                                        "updates": [5, 6]
                                    },
                                    {
                                        "name": "_loss_grad_lbfgs",
                                        "updates": [0, 4]
                                    },
                                    {
                                        "name": "_backprop",
                                        "updates": [4, 5, 6]
                                    },
                                    {
                                        "name": "_initialize",
                                        "updates": [0]
                                    },
                                    "_init_coef",
                                    {
                                        "name": "_fit",
                                        "updates": [0, 3]
                                    },
                                    "_validate_hyperparameters",
                                    {
                                        "name": "_fit_lbfgs",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_fit_stochastic",
                                        "updates": [0, 3, 4, 5, 6]
                                    },
                                    {
                                        "name": "_update_no_improvement_count",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_partial_fit",
                                        "updates": [0]
                                    },
                                    "_predict"
                                ]
                            },
                            "MLPClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "MLPClassifier"
                                    },
                                    "__init__",
                                    {
                                        "name": "_validate_input",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "fit",
                                    {
                                        "name": "_partial_fit",
                                        "updates": [0]
                                    },
                                    "predict_log_proba",
                                    "predict_proba"
                                ]
                            },
                            "MLPRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "MLPRegressor"
                                    },
                                    "__init__",
                                    "predict",
                                    "_validate_input",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "rbm": {
                        "functions": [],
                        "types": {
                            "BernoulliRBM": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "BernoulliRBM"
                                    },
                                    "transform",
                                    "_mean_hiddens",
                                    "_sample_hiddens",
                                    "_sample_visibles",
                                    "_free_energy",
                                    {
                                        "name": "gibbs",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "partial_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_fit",
                                        "updates": [0]
                                    },
                                    "score_samples",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    }
                },
                "types": {
                    "BernoulliRBM": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "BernoulliRBM"
                            },
                            "transform",
                            "_mean_hiddens",
                            "_sample_hiddens",
                            "_sample_visibles",
                            "_free_energy",
                            {
                                "name": "gibbs",
                                "updates": [0]
                            },
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            {
                                "name": "_fit",
                                "updates": [0]
                            },
                            "score_samples",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "MLPClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "MLPClassifier"
                            },
                            "__init__",
                            {
                                "name": "_validate_input",
                                "updates": [0]
                            },
                            "predict",
                            "fit",
                            {
                                "name": "_partial_fit",
                                "updates": [0]
                            },
                            "predict_log_proba",
                            "predict_proba"
                        ]
                    },
                    "MLPRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "MLPRegressor"
                            },
                            "__init__",
                            "predict",
                            "_validate_input",
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    }
                },
                "functions": []
            },
            "preprocessing": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_base": {
                                "functions": [
                                    "toarray",
                                    "_check_transform_selected",
                                    "test_transform_selected_retain_order"
                                ],
                                "types": {}
                            },
                            "test_common": {
                                "functions": ["_get_valid_samples_by_column"],
                                "types": {}
                            },
                            "test_data": {
                                "functions": [
                                    "toarray",
                                    "_check_dim_1axis",
                                    "assert_correct_incr",
                                    "test_polynomial_features",
                                    "test_polynomial_feature_names",
                                    "test_polynomial_feature_array_order",
                                    "test_standard_scaler_1d",
                                    "test_standard_scaler_dtype",
                                    "test_scale_1d",
                                    "test_scaler_2d_arrays",
                                    "test_scaler_float16_overflow",
                                    "test_handle_zeros_in_scale",
                                    "test_minmax_scaler_partial_fit",
                                    "test_standard_scaler_partial_fit",
                                    "test_standard_scaler_partial_fit_numerical_stability",
                                    "test_partial_fit_sparse_input",
                                    "test_standard_scaler_trasform_with_partial_fit",
                                    "test_min_max_scaler_iris",
                                    "test_min_max_scaler_zero_variance_features",
                                    "test_minmax_scale_axis1",
                                    "test_min_max_scaler_1d",
                                    "test_scaler_without_centering",
                                    "_check_identity_scalers_attributes",
                                    "test_scaler_return_identity",
                                    "test_scaler_int",
                                    "test_scaler_without_copy",
                                    "test_scale_sparse_with_mean_raise_exception",
                                    "test_scale_input_finiteness_validation",
                                    "test_robust_scaler_error_sparse",
                                    "test_robust_scaler_col_zero_sparse",
                                    "test_robust_scaler_2d_arrays",
                                    "test_robust_scaler_transform_one_row_csr",
                                    "test_robust_scaler_iris",
                                    "test_robust_scaler_iris_quantiles",
                                    "test_quantile_transform_iris",
                                    "test_quantile_transform_check_error",
                                    "test_quantile_transform_sparse_ignore_zeros",
                                    "test_quantile_transform_dense_toy",
                                    "test_quantile_transform_subsampling",
                                    "test_quantile_transform_sparse_toy",
                                    "test_quantile_transform_bounds",
                                    "test_quantile_transform_and_inverse",
                                    "test_quantile_transform_nan",
                                    "test_deprecated_quantile_transform_copy",
                                    "test_robust_scaler_invalid_range",
                                    "test_scale_function_without_centering",
                                    "test_robust_scale_axis1",
                                    "test_robust_scale_1d_array",
                                    "test_robust_scaler_zero_variance_features",
                                    "test_maxabs_scaler_zero_variance_features",
                                    "test_maxabs_scaler_large_negative_value",
                                    "test_maxabs_scaler_transform_one_row_csr",
                                    "test_maxabs_scaler_1d",
                                    "test_maxabs_scaler_partial_fit",
                                    "test_normalizer_l1",
                                    "test_normalizer_l2",
                                    "test_normalizer_max",
                                    "test_normalize",
                                    "test_binarizer",
                                    "test_center_kernel",
                                    "test_cv_pipeline_precomputed",
                                    "test_fit_transform",
                                    "test_add_dummy_feature",
                                    "test_add_dummy_feature_coo",
                                    "test_add_dummy_feature_csc",
                                    "test_add_dummy_feature_csr",
                                    "test_fit_cold_start",
                                    "test_power_transformer_1d",
                                    "test_power_transformer_2d",
                                    "test_power_transformer_boxcox_strictly_positive_exception",
                                    "test_power_transformer_method_exception",
                                    "test_power_transformer_lambda_zero",
                                    "test_power_transformer_lambda_one",
                                    "test_yeo_johnson_darwin_example",
                                    "test_power_transform_default_method"
                                ],
                                "types": {}
                            },
                            "test_discretization": {
                                "functions": [
                                    "test_valid_n_bins",
                                    "test_invalid_n_bins",
                                    "test_invalid_n_bins_array",
                                    "test_invalid_n_features",
                                    "test_transform_1d_behavior",
                                    "test_numeric_stability",
                                    "test_invalid_encode_option",
                                    "test_encode_options",
                                    "test_invalid_strategy_option",
                                    "test_overwrite",
                                    "test_percentile_numeric_stability"
                                ],
                                "types": {}
                            },
                            "test_encoders": {
                                "functions": [
                                    "toarray",
                                    "test_one_hot_encoder_sparse",
                                    "test_one_hot_encoder_dense",
                                    "test_one_hot_encoder_deprecationwarnings",
                                    "test_one_hot_encoder_force_new_behaviour",
                                    "_run_one_hot",
                                    "_check_one_hot",
                                    "test_one_hot_encoder_categorical_features",
                                    "test_one_hot_encoder_categorical_features_ignore_unknown",
                                    "test_one_hot_encoder_handle_unknown",
                                    "test_one_hot_encoder_not_fitted",
                                    "test_one_hot_encoder_no_categorical_features",
                                    "test_one_hot_encoder_handle_unknown_strings",
                                    "test_one_hot_encoder_set_params",
                                    "check_categorical_onehot",
                                    "test_one_hot_encoder_unsorted_categories",
                                    "test_one_hot_encoder_specified_categories_mixed_columns",
                                    "test_one_hot_encoder_pandas",
                                    "test_one_hot_encoder_feature_names",
                                    "test_one_hot_encoder_feature_names_unicode",
                                    "test_ordinal_encoder_inverse",
                                    "test_ordinal_encoder_raise_categories_shape",
                                    "test_encoder_dtypes",
                                    "test_encoder_dtypes_pandas",
                                    "test_one_hot_encoder_warning",
                                    "test_one_hot_encoder_drop_manual",
                                    "test_one_hot_encoder_invalid_params"
                                ],
                                "types": {}
                            },
                            "test_function_transformer": {
                                "functions": [
                                    "_make_func",
                                    "test_delegate_to_func",
                                    "test_function_transformer_frame"
                                ],
                                "types": {}
                            },
                            "test_imputation": {
                                "functions": ["safe_median", "safe_mean"],
                                "types": {}
                            },
                            "test_label": {
                                "functions": [
                                    "toarray",
                                    "test_label_binarizer",
                                    "test_label_binarizer_unseen_labels",
                                    "test_label_binarizer_set_label_encoding",
                                    "test_label_encoder_negative_ints",
                                    "test_label_encoder_errors",
                                    "test_sparse_output_multilabel_binarizer",
                                    "test_multilabel_binarizer",
                                    "test_multilabel_binarizer_empty_sample",
                                    "test_multilabel_binarizer_unknown_class",
                                    "test_multilabel_binarizer_given_classes",
                                    "test_multilabel_binarizer_multiple_calls",
                                    "test_multilabel_binarizer_same_length_sequence",
                                    "test_multilabel_binarizer_non_integer_labels",
                                    "test_multilabel_binarizer_non_unique",
                                    "test_multilabel_binarizer_inverse_validation",
                                    "test_label_binarize_with_class_order",
                                    "check_binarized_results",
                                    "test_label_binarize_binary",
                                    "test_label_binarize_multiclass",
                                    "test_label_binarize_multilabel",
                                    "test_invalid_input_label_binarize",
                                    "test_inverse_binarize_multiclass"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "base": {
                        "functions": [
                            {
                                "name": "_transform_selected",
                                "updates": [0]
                            }
                        ],
                        "types": {}
                    },
                    "data": {
                        "functions": [
                            {
                                "name": "_handle_zeros_in_scale",
                                "updates": [0]
                            },
                            "scale",
                            "minmax_scale",
                            "maxabs_scale",
                            "robust_scale",
                            "normalize",
                            {
                                "name": "binarize",
                                "updates": [0]
                            },
                            "add_dummy_feature",
                            "quantile_transform",
                            "power_transform"
                        ],
                        "types": {
                            "MinMaxScaler": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MinMaxScaler"
                                    },
                                    "_reset",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "partial_fit",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "inverse_transform",
                                    "_more_tags"
                                ]
                            },
                            "StandardScaler": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "StandardScaler"
                                    },
                                    "_reset",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "partial_fit",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "inverse_transform",
                                    "_more_tags"
                                ]
                            },
                            "MaxAbsScaler": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MaxAbsScaler"
                                    },
                                    "_reset",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "partial_fit",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "inverse_transform",
                                    "_more_tags"
                                ]
                            },
                            "RobustScaler": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "RobustScaler"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "inverse_transform",
                                    "_more_tags"
                                ]
                            },
                            "PolynomialFeatures": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "PolynomialFeatures"
                                    },
                                    "get_feature_names",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform"
                                ]
                            },
                            "Normalizer": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "Normalizer"
                                    },
                                    "fit",
                                    "transform",
                                    "_more_tags"
                                ]
                            },
                            "Binarizer": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "Binarizer"
                                    },
                                    "fit",
                                    "transform",
                                    "_more_tags"
                                ]
                            },
                            "KernelCenterer": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "KernelCenterer"
                                    },
                                    "__init__",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform"
                                ]
                            },
                            "QuantileTransformer": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "QuantileTransformer"
                                    },
                                    {
                                        "name": "_dense_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_sparse_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_transform_col",
                                        "updates": [1]
                                    },
                                    "_check_inputs",
                                    "_check_is_fitted",
                                    {
                                        "name": "_transform",
                                        "updates": [1]
                                    },
                                    {
                                        "name": "transform",
                                        "updates": [1]
                                    },
                                    {
                                        "name": "inverse_transform",
                                        "updates": [1]
                                    },
                                    "_more_tags"
                                ]
                            },
                            "PowerTransformer": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "PowerTransformer"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0, 1]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0, 1]
                                    },
                                    {
                                        "name": "_fit",
                                        "updates": [0, 1]
                                    },
                                    {
                                        "name": "transform",
                                        "updates": [1]
                                    },
                                    {
                                        "name": "inverse_transform",
                                        "updates": [1]
                                    },
                                    "_box_cox_inverse_tranform",
                                    "_yeo_johnson_inverse_transform",
                                    "_yeo_johnson_transform",
                                    "_box_cox_optimize",
                                    "_yeo_johnson_optimize",
                                    "_check_input",
                                    "_more_tags"
                                ]
                            }
                        }
                    },
                    "imputation": {
                        "functions": ["_get_mask", "_most_frequent"],
                        "types": {
                            "Imputer": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "Imputer"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "_sparse_fit",
                                    "_dense_fit",
                                    {
                                        "name": "transform",
                                        "updates": [1]
                                    },
                                    "_more_tags"
                                ]
                            }
                        }
                    },
                    "label": {
                        "functions": [
                            "_encode_numpy",
                            "_encode_python",
                            "_encode",
                            "_encode_check_unknown",
                            "label_binarize",
                            "_inverse_binarize_multiclass",
                            {
                                "name": "_inverse_binarize_thresholding",
                                "updates": [0]
                            }
                        ],
                        "types": {
                            "LabelEncoder": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "inverse_transform",
                                    "_more_tags"
                                ]
                            },
                            "LabelBinarizer": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LabelBinarizer"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "inverse_transform",
                                    "_more_tags"
                                ]
                            },
                            "MultiLabelBinarizer": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MultiLabelBinarizer"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit_transform",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "transform",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_build_cache",
                                        "updates": [0]
                                    },
                                    "_transform",
                                    "inverse_transform",
                                    "_more_tags"
                                ]
                            }
                        }
                    },
                    "setup": {
                        "functions": ["configuration"],
                        "types": {}
                    }
                },
                "types": {
                    "Binarizer": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "Binarizer"
                            },
                            "fit",
                            "transform",
                            "_more_tags"
                        ]
                    },
                    "KernelCenterer": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "KernelCenterer"
                            },
                            "__init__",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform"
                        ]
                    },
                    "MinMaxScaler": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "MinMaxScaler"
                            },
                            "_reset",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            "transform",
                            "inverse_transform",
                            "_more_tags"
                        ]
                    },
                    "MaxAbsScaler": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "MaxAbsScaler"
                            },
                            "_reset",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            "transform",
                            "inverse_transform",
                            "_more_tags"
                        ]
                    },
                    "Normalizer": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "Normalizer"
                            },
                            "fit",
                            "transform",
                            "_more_tags"
                        ]
                    },
                    "RobustScaler": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "RobustScaler"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform",
                            "inverse_transform",
                            "_more_tags"
                        ]
                    },
                    "StandardScaler": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "StandardScaler"
                            },
                            "_reset",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            "transform",
                            "inverse_transform",
                            "_more_tags"
                        ]
                    },
                    "QuantileTransformer": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "QuantileTransformer"
                            },
                            {
                                "name": "_dense_fit",
                                "updates": [0]
                            },
                            {
                                "name": "_sparse_fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "_transform_col",
                                "updates": [1]
                            },
                            "_check_inputs",
                            "_check_is_fitted",
                            {
                                "name": "_transform",
                                "updates": [1]
                            },
                            {
                                "name": "transform",
                                "updates": [1]
                            },
                            {
                                "name": "inverse_transform",
                                "updates": [1]
                            },
                            "_more_tags"
                        ]
                    },
                    "PowerTransformer": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "PowerTransformer"
                            },
                            {
                                "name": "fit",
                                "updates": [0, 1]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0, 1]
                            },
                            {
                                "name": "_fit",
                                "updates": [0, 1]
                            },
                            {
                                "name": "transform",
                                "updates": [1]
                            },
                            {
                                "name": "inverse_transform",
                                "updates": [1]
                            },
                            "_box_cox_inverse_tranform",
                            "_yeo_johnson_inverse_transform",
                            "_yeo_johnson_transform",
                            "_box_cox_optimize",
                            "_yeo_johnson_optimize",
                            "_check_input",
                            "_more_tags"
                        ]
                    },
                    "PolynomialFeatures": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "PolynomialFeatures"
                            },
                            "get_feature_names",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform"
                        ]
                    },
                    "LabelBinarizer": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LabelBinarizer"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            "transform",
                            "inverse_transform",
                            "_more_tags"
                        ]
                    },
                    "LabelEncoder": {
                        "methods": [
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            "transform",
                            "inverse_transform",
                            "_more_tags"
                        ]
                    },
                    "MultiLabelBinarizer": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "MultiLabelBinarizer"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            {
                                "name": "transform",
                                "updates": [0]
                            },
                            {
                                "name": "_build_cache",
                                "updates": [0]
                            },
                            "_transform",
                            "inverse_transform",
                            "_more_tags"
                        ]
                    },
                    "Imputer": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "Imputer"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "_sparse_fit",
                            "_dense_fit",
                            {
                                "name": "transform",
                                "updates": [1]
                            },
                            "_more_tags"
                        ]
                    }
                },
                "functions": [
                    "add_dummy_feature",
                    {
                        "name": "binarize",
                        "updates": [0]
                    },
                    "normalize",
                    "scale",
                    "robust_scale",
                    "maxabs_scale",
                    "minmax_scale",
                    "quantile_transform",
                    "power_transform",
                    "label_binarize"
                ]
            },
            "semi_supervised": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_label_propagation": {
                                "functions": [
                                    "test_fit_transduction",
                                    "test_distribution",
                                    "test_predict",
                                    "test_predict_proba",
                                    "test_label_spreading_closed_form",
                                    "test_label_propagation_closed_form",
                                    "test_valid_alpha",
                                    "test_convergence_speed",
                                    "test_convergence_warning"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "label_propagation": {
                        "functions": [],
                        "types": {
                            "BaseLabelPropagation": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "BaseLabelPropagation"
                                    },
                                    {
                                        "name": "_get_kernel",
                                        "updates": [0]
                                    },
                                    "predict",
                                    {
                                        "name": "predict_proba",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "LabelPropagation": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LabelPropagation"
                                    },
                                    "__init__",
                                    {
                                        "name": "_build_graph",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    {
                                        "name": "predict_proba",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "LabelSpreading": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LabelSpreading"
                                    },
                                    "__init__",
                                    {
                                        "name": "_build_graph",
                                        "updates": [0]
                                    },
                                    "predict",
                                    {
                                        "name": "predict_proba",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    }
                },
                "types": {
                    "LabelPropagation": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LabelPropagation"
                            },
                            "__init__",
                            {
                                "name": "_build_graph",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            {
                                "name": "predict_proba",
                                "updates": [0]
                            }
                        ]
                    },
                    "LabelSpreading": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LabelSpreading"
                            },
                            "__init__",
                            {
                                "name": "_build_graph",
                                "updates": [0]
                            },
                            "predict",
                            {
                                "name": "predict_proba",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    }
                },
                "functions": []
            },
            "svm": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_bounds": {
                                "functions": [
                                    "test_l1_min_c_l2_loss",
                                    "check_l1_min_c",
                                    "test_ill_posed_min_c",
                                    "test_unsupported_loss"
                                ],
                                "types": {}
                            },
                            "test_sparse": {
                                "functions": [
                                    "check_svm_model_equal",
                                    "test_unsorted_indices",
                                    "test_svc_with_custom_kernel",
                                    "test_svc_iris",
                                    "test_sparse_decision_function",
                                    "test_error",
                                    "test_linearsvc",
                                    "test_linearsvc_iris",
                                    "test_sample_weights",
                                    "test_sparse_liblinear_intercept_handling",
                                    "test_sparse_realdata",
                                    "test_sparse_svc_clone_with_callable_kernel",
                                    "test_timeout",
                                    "test_consistent_proba"
                                ],
                                "types": {}
                            },
                            "test_svm": {
                                "functions": [
                                    "test_libsvm_parameters",
                                    "test_libsvm_iris",
                                    "test_precomputed",
                                    "test_svr",
                                    "test_linearsvr",
                                    "test_linearsvr_fit_sampleweight",
                                    "test_svr_errors",
                                    "test_oneclass",
                                    "test_oneclass_decision_function",
                                    "test_oneclass_score_samples",
                                    "test_tweak_params",
                                    "test_probability",
                                    "test_decision_function",
                                    "test_decision_function_shape",
                                    "test_svr_predict",
                                    "test_sample_weights",
                                    "test_bad_input",
                                    "test_unicode_kernel",
                                    "test_sparse_precomputed",
                                    "test_linearsvc_parameters",
                                    "test_linearsvx_loss_penalty_deprecations",
                                    "test_linear_svx_uppercase_loss_penality_raises_error",
                                    "test_linearsvc",
                                    "test_linearsvc_crammer_singer",
                                    "test_linearsvc_fit_sampleweight",
                                    "test_crammer_singer_binary",
                                    "test_linearsvc_iris",
                                    "test_dense_liblinear_intercept_handling",
                                    "test_liblinear_set_coef",
                                    "test_immutable_coef_property",
                                    "test_linearsvc_verbose",
                                    "test_svc_clone_with_callable_kernel",
                                    "test_svc_bad_kernel",
                                    "test_timeout",
                                    "test_unfitted",
                                    "test_linear_svm_convergence_warnings",
                                    "test_svr_coef_sign",
                                    "test_linear_svc_intercept_scaling",
                                    "test_lsvc_intercept_scaling_zero",
                                    "test_hasattr_predict_proba",
                                    "test_decision_function_shape_two_class",
                                    "test_ovr_decision_function",
                                    "test_gamma_auto",
                                    "test_gamma_scale"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "base": {
                        "functions": [
                            "_one_vs_one_coef",
                            "_get_liblinear_solver_type",
                            "_fit_liblinear"
                        ],
                        "types": {
                            "BaseLibSVM": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_validate_targets",
                                        "updates": [0]
                                    },
                                    "_warn_from_fit_status",
                                    {
                                        "name": "_dense_fit",
                                        "updates": [0]
                                    },
                                    {
                                        "name": "_sparse_fit",
                                        "updates": [1, 0]
                                    },
                                    "predict",
                                    "_dense_predict",
                                    "_sparse_predict",
                                    "_compute_kernel",
                                    {
                                        "name": "_decision_function",
                                        "updates": [1]
                                    },
                                    "_dense_decision_function",
                                    {
                                        "name": "_sparse_decision_function",
                                        "updates": [1]
                                    },
                                    "_validate_for_predict",
                                    "_get_coef"
                                ]
                            },
                            "BaseSVC": {
                                "methods": [
                                    {
                                        "name": "_validate_targets",
                                        "updates": [0]
                                    },
                                    "decision_function",
                                    "predict",
                                    "_check_proba",
                                    "_predict_proba",
                                    "_predict_log_proba",
                                    "_dense_predict_proba",
                                    {
                                        "name": "_sparse_predict_proba",
                                        "updates": [1]
                                    },
                                    "_get_coef",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    }
                                ]
                            }
                        }
                    },
                    "bounds": {
                        "functions": ["l1_min_c"],
                        "types": {}
                    },
                    "classes": {
                        "functions": [],
                        "types": {
                            "LinearSVC": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LinearSVC"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "score"
                                ]
                            },
                            "LinearSVR": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "LinearSVR"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "score"
                                ]
                            },
                            "SVC": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "SVC"
                                    },
                                    "__init__"
                                ]
                            },
                            "NuSVC": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "NuSVC"
                                    },
                                    "__init__"
                                ]
                            },
                            "SVR": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "SVR"
                                    },
                                    "__init__"
                                ]
                            },
                            "NuSVR": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "NuSVR"
                                    },
                                    "__init__"
                                ]
                            },
                            "OneClassSVM": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "OneClassSVM"
                                    },
                                    "__init__",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "decision_function",
                                    "score_samples",
                                    "predict"
                                ]
                            }
                        }
                    },
                    "setup": {
                        "functions": ["configuration"],
                        "types": {}
                    }
                },
                "types": {
                    "SVC": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "SVC"
                            },
                            "__init__"
                        ]
                    },
                    "NuSVC": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "NuSVC"
                            },
                            "__init__"
                        ]
                    },
                    "SVR": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "SVR"
                            },
                            "__init__"
                        ]
                    },
                    "NuSVR": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "NuSVR"
                            },
                            "__init__"
                        ]
                    },
                    "OneClassSVM": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "OneClassSVM"
                            },
                            "__init__",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "decision_function",
                            "score_samples",
                            "predict"
                        ]
                    },
                    "LinearSVC": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LinearSVC"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    },
                    "LinearSVR": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LinearSVR"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            }
                        ]
                    }
                },
                "functions": ["l1_min_c"]
            },
            "tests": {
                "modules": {
                    "test_base": {
                        "functions": [
                            "test_clone",
                            "test_clone_2",
                            "test_clone_buggy",
                            "test_clone_empty_array",
                            "test_clone_nan",
                            "test_clone_sparse_matrices",
                            "test_clone_estimator_types",
                            "test_repr",
                            "test_str",
                            "test_get_params",
                            "test_is_classifier",
                            "test_set_params",
                            "test_set_params_passes_all_parameters",
                            "test_set_params_updates_valid_params",
                            "test_score_sample_weight",
                            "test_clone_pandas_dataframe",
                            "test_pickle_version_warning_is_not_raised_with_matching_version",
                            "test_pickle_version_warning_is_issued_upon_different_version",
                            "test_pickle_version_warning_is_issued_when_no_version_info_in_pickle",
                            "test_pickle_version_no_warning_is_issued_with_non_sklearn_estimator",
                            "test_pickling_when_getstate_is_overwritten_by_mixin",
                            "test_pickling_when_getstate_is_overwritten_by_mixin_outside_of_sklearn",
                            "test_tag_inheritance",
                            "test_regressormixin_score_multioutput"
                        ],
                        "types": {
                            "MyEstimator": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MyEstimator"
                                    }
                                ]
                            },
                            "K": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "K"
                                    }
                                ]
                            },
                            "T": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "T"
                                    }
                                ]
                            },
                            "NaNTag": {
                                "methods": ["_more_tags"]
                            },
                            "NoNaNTag": {
                                "methods": ["_more_tags"]
                            },
                            "OverrideTag": {
                                "methods": ["_more_tags"]
                            },
                            "DiamondOverwriteTag": {
                                "methods": []
                            },
                            "ModifyInitParams": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "ModifyInitParams"
                                    }
                                ]
                            },
                            "Buggy": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "Buggy"
                                    }
                                ]
                            },
                            "NoEstimator": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "NoEstimator"
                                    },
                                    "__init__",
                                    "fit",
                                    "predict"
                                ]
                            },
                            "VargEstimator": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "VargEstimator"
                                    },
                                    "__init__"
                                ]
                            },
                            "TestDecisionTree": {
                                "methods": ["set_params"]
                            },
                            "DummyEstimator": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "DummyEstimator"
                                    },
                                    "fit",
                                    "transform"
                                ]
                            },
                            "TreeBadVersion": {
                                "methods": ["__getstate__"]
                            },
                            "TreeNoVersion": {
                                "methods": ["__getstate__"]
                            },
                            "DontPickleAttributeMixin": {
                                "methods": [
                                    "__getstate__",
                                    {
                                        "name": "__setstate__",
                                        "updates": [1]
                                    }
                                ]
                            },
                            "MultiInheritanceEstimator": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MultiInheritanceEstimator"
                                    }
                                ]
                            },
                            "SingleInheritanceEstimator": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "SingleInheritanceEstimator"
                                    },
                                    "__getstate__"
                                ]
                            }
                        }
                    },
                    "test_calibration": {
                        "functions": [
                            "test_calibration_multiclass",
                            "test_calibration_prefit",
                            "test_sigmoid_calibration",
                            "test_calibration_curve",
                            "test_calibration_nan_imputer",
                            "test_calibration_prob_sum",
                            "test_calibration_less_classes"
                        ],
                        "types": {
                            "MockTensorClassifier": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "decision_function"
                                ]
                            }
                        }
                    },
                    "test_check_build": {
                        "functions": ["test_raise_build_error"],
                        "types": {}
                    },
                    "test_common": {
                        "functions": [
                            "test_all_estimator_no_base_class",
                            "_tested_estimators",
                            "_generate_checks_per_estimator",
                            "_rename_partial",
                            "_tested_linear_classifiers",
                            "test_root_import_all_completeness",
                            "test_all_tests_are_importable"
                        ],
                        "types": {}
                    },
                    "test_config": {
                        "functions": [
                            "test_config_context",
                            "test_config_context_exception",
                            "test_set_config"
                        ],
                        "types": {}
                    },
                    "test_discriminant_analysis": {
                        "functions": [
                            "test_lda_predict",
                            "test_lda_priors",
                            "test_lda_coefs",
                            "test_lda_transform",
                            "test_lda_explained_variance_ratio",
                            "test_lda_orthogonality",
                            "test_lda_scaling",
                            "test_lda_store_covariance",
                            "test_lda_numeric_consistency_float32_float64",
                            "test_qda",
                            "test_qda_priors",
                            "test_qda_store_covariance",
                            "test_qda_regularization",
                            "test_covariance"
                        ],
                        "types": {}
                    },
                    "test_docstring_parameters": {
                        "functions": [],
                        "types": {}
                    },
                    "test_dummy": {
                        "functions": [
                            "_check_behavior_2d",
                            "_check_behavior_2d_for_constant",
                            "_check_equality_regressor",
                            "test_most_frequent_and_prior_strategy",
                            "test_most_frequent_and_prior_strategy_with_2d_column_y",
                            "test_most_frequent_and_prior_strategy_multioutput",
                            "test_stratified_strategy",
                            "test_stratified_strategy_multioutput",
                            "test_uniform_strategy",
                            "test_uniform_strategy_multioutput",
                            "test_string_labels",
                            "test_classifier_exceptions",
                            "test_mean_strategy_regressor",
                            "test_mean_strategy_multioutput_regressor",
                            "test_regressor_exceptions",
                            "test_median_strategy_regressor",
                            "test_median_strategy_multioutput_regressor",
                            "test_quantile_strategy_regressor",
                            "test_quantile_strategy_multioutput_regressor",
                            "test_quantile_invalid",
                            "test_quantile_strategy_empty_train",
                            "test_constant_strategy_regressor",
                            "test_constant_strategy_multioutput_regressor",
                            "test_y_mean_attribute_regressor",
                            "test_unknown_strategey_regressor",
                            "test_constants_not_specified_regressor",
                            "test_constant_size_multioutput_regressor",
                            "test_constant_strategy",
                            "test_constant_strategy_multioutput",
                            "test_constant_strategy_exceptions",
                            "test_classification_sample_weight",
                            "test_constant_strategy_sparse_target",
                            "test_uniform_strategy_sparse_target_warning",
                            "test_stratified_strategy_sparse_target",
                            "test_most_frequent_and_prior_strategy_sparse_target",
                            "test_dummy_regressor_sample_weight",
                            "test_dummy_regressor_on_3D_array",
                            "test_dummy_classifier_on_3D_array",
                            "test_dummy_regressor_return_std"
                        ],
                        "types": {}
                    },
                    "test_init": {
                        "functions": ["test_import_skl"],
                        "types": {}
                    },
                    "test_isotonic": {
                        "functions": [
                            "test_permutation_invariance",
                            "test_check_increasing_small_number_of_samples",
                            "test_check_increasing_up",
                            "test_check_increasing_up_extreme",
                            "test_check_increasing_down",
                            "test_check_increasing_down_extreme",
                            "test_check_ci_warn",
                            "test_isotonic_regression",
                            "test_isotonic_regression_ties_min",
                            "test_isotonic_regression_ties_max",
                            "test_isotonic_regression_ties_secondary_",
                            "test_isotonic_regression_with_ties_in_differently_sized_groups",
                            "test_isotonic_regression_reversed",
                            "test_isotonic_regression_auto_decreasing",
                            "test_isotonic_regression_auto_increasing",
                            "test_assert_raises_exceptions",
                            "test_isotonic_sample_weight_parameter_default_value",
                            "test_isotonic_min_max_boundaries",
                            "test_isotonic_sample_weight",
                            "test_isotonic_regression_oob_raise",
                            "test_isotonic_regression_oob_clip",
                            "test_isotonic_regression_oob_nan",
                            "test_isotonic_regression_oob_bad",
                            "test_isotonic_regression_oob_bad_after",
                            "test_isotonic_regression_pickle",
                            "test_isotonic_duplicate_min_entry",
                            "test_isotonic_ymin_ymax",
                            "test_isotonic_zero_weight_loop",
                            "test_fast_predict",
                            "test_isotonic_copy_before_fit",
                            "test_isotonic_dtype",
                            "test_make_unique_dtype"
                        ],
                        "types": {}
                    },
                    "test_kernel_approximation": {
                        "functions": [
                            "test_additive_chi2_sampler",
                            "test_skewed_chi2_sampler",
                            "test_rbf_sampler",
                            "test_input_validation",
                            "test_nystroem_approximation",
                            "test_nystroem_default_parameters",
                            "test_nystroem_singular_kernel",
                            "test_nystroem_poly_kernel_params",
                            "test_nystroem_callable"
                        ],
                        "types": {}
                    },
                    "test_kernel_ridge": {
                        "functions": [
                            "test_kernel_ridge",
                            "test_kernel_ridge_csr",
                            "test_kernel_ridge_csc",
                            "test_kernel_ridge_singular_kernel",
                            "test_kernel_ridge_precomputed",
                            "test_kernel_ridge_precomputed_kernel_unchanged",
                            "test_kernel_ridge_sample_weights",
                            "test_kernel_ridge_multi_output"
                        ],
                        "types": {}
                    },
                    "test_metaestimators": {
                        "functions": [],
                        "types": {
                            "DelegatorData": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "DelegatorData"
                                    }
                                ]
                            },
                            "SubEstimator": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "SubEstimator"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "_check_fit"
                                ]
                            }
                        }
                    },
                    "test_multiclass": {
                        "functions": [
                            "test_ovr_exceptions",
                            "test_check_classification_targets",
                            "test_ovr_fit_predict",
                            "test_ovr_partial_fit_exceptions",
                            "test_ovr_ovo_regressor",
                            "test_ovr_fit_predict_sparse",
                            "test_ovr_multiclass",
                            "test_ovr_multilabel",
                            "test_ovr_fit_predict_svc",
                            "test_ovr_multilabel_dataset",
                            "test_ovr_single_label_predict_proba",
                            "test_ovr_multilabel_decision_function",
                            "test_ovr_single_label_decision_function",
                            "test_ovr_pipeline",
                            "test_ovr_coef_",
                            "test_ovr_coef_exceptions",
                            "test_ovo_exceptions",
                            "test_ovo_fit_on_list",
                            "test_ovo_fit_predict",
                            "test_ovo_partial_fit_predict",
                            "test_ovo_decision_function",
                            "test_ovo_string_y",
                            "test_ovo_one_class",
                            "test_ovo_float_y",
                            "test_ecoc_exceptions",
                            "test_ecoc_fit_predict",
                            "test_ecoc_float_y",
                            "test_pairwise_indices",
                            "test_pairwise_attribute"
                        ],
                        "types": {}
                    },
                    "test_multioutput": {
                        "functions": [
                            "test_multi_target_regression",
                            "test_multi_target_regression_one_target",
                            "test_multi_target_sparse_regression",
                            "test_multi_target_sample_weights_api",
                            "test_multi_target_sample_weights",
                            "test_multi_output_classification_partial_fit_parallelism",
                            "test_multi_output_predict_proba",
                            "test_multi_output_classification",
                            "test_multiclass_multioutput_estimator",
                            "test_multiclass_multioutput_estimator_predict_proba",
                            "test_multi_output_classification_sample_weights",
                            "test_multi_output_exceptions",
                            "generate_multilabel_dataset_with_correlations",
                            "test_classifier_chain_fit_and_predict_with_linear_svc"
                        ],
                        "types": {}
                    },
                    "test_naive_bayes": {
                        "functions": [
                            "test_gnb",
                            "test_gnb_prior",
                            "test_gnb_sample_weight",
                            "test_gnb_neg_priors",
                            "test_gnb_priors",
                            "test_gnb_priors_sum_isclose",
                            "test_gnb_wrong_nb_priors",
                            "test_gnb_prior_greater_one",
                            "test_gnb_prior_large_bias",
                            "test_check_update_with_no_data",
                            "test_gnb_pfit_wrong_nb_features",
                            "test_discrete_prior",
                            "check_partial_fit",
                            "test_mnb_prior_unobserved_targets",
                            "test_gnb_partial_fit",
                            "test_discretenb_predict_proba",
                            "check_sample_weight_multiclass",
                            "test_sample_weight_mnb",
                            "test_coef_intercept_shape",
                            "test_check_accuracy_on_digits",
                            "test_feature_log_prob_bnb",
                            "test_bnb",
                            "test_cnb",
                            "test_naive_bayes_scale_invariance",
                            "test_alpha",
                            "test_alpha_vector"
                        ],
                        "types": {}
                    },
                    "test_pipeline": {
                        "functions": [
                            "test_pipeline_init",
                            "test_pipeline_init_tuple",
                            "test_pipeline_fit_params",
                            "test_pipeline_sample_weight_supported",
                            "test_pipeline_sample_weight_unsupported",
                            "test_pipeline_raise_set_params_error",
                            "test_pipeline_methods_pca_svm",
                            "test_pipeline_methods_preprocessing_svm",
                            "test_fit_predict_on_pipeline",
                            "test_fit_predict_on_pipeline_without_fit_predict",
                            "test_fit_predict_with_intermediate_fit_params",
                            "test_predict_with_predict_params",
                            "test_feature_union",
                            "test_make_union",
                            "test_make_union_kwargs",
                            "test_pipeline_transform",
                            "test_pipeline_fit_transform",
                            "test_pipeline_slice",
                            "test_pipeline_index",
                            "test_set_pipeline_steps",
                            "test_pipeline_named_steps",
                            "test_pipeline_ducktyping",
                            "test_make_pipeline",
                            "test_feature_union_weights",
                            "test_feature_union_parallel",
                            "test_feature_union_feature_names",
                            "test_set_feature_union_steps",
                            "test_step_name_validation",
                            "test_pipeline_wrong_memory",
                            "test_pipeline_with_cache_attribute",
                            "test_pipeline_memory",
                            "test_make_pipeline_memory",
                            "test_pipeline_param_error"
                        ],
                        "types": {
                            "NoFit": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "NoFit"
                                    }
                                ]
                            },
                            "NoTrans": {
                                "methods": [
                                    "fit",
                                    "get_params",
                                    {
                                        "name": "set_params",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "NoInvTransf": {
                                "methods": [
                                    "transform",
                                    "fit",
                                    "get_params",
                                    {
                                        "name": "set_params",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "Transf": {
                                "methods": [
                                    "transform",
                                    "inverse_transform",
                                    "fit",
                                    "get_params",
                                    {
                                        "name": "set_params",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "TransfFitParams": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "inverse_transform",
                                    "get_params",
                                    {
                                        "name": "set_params",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "Mult": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "Mult"
                                    },
                                    "fit",
                                    "transform",
                                    "inverse_transform",
                                    "predict",
                                    "score"
                                ]
                            },
                            "FitParamT": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "FitParamT"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    {
                                        "name": "fit_predict",
                                        "updates": [0]
                                    },
                                    "score"
                                ]
                            },
                            "DummyTransf": {
                                "methods": [
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "transform",
                                    "inverse_transform",
                                    "get_params",
                                    {
                                        "name": "set_params",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "DummyEstimatorParams": {
                                "methods": [
                                    "fit",
                                    {
                                        "name": "predict",
                                        "updates": [0]
                                    }
                                ]
                            },
                            "DummyMemory": {
                                "methods": ["cache"]
                            },
                            "WrongDummyMemory": {
                                "methods": []
                            }
                        }
                    },
                    "test_random_projection": {
                        "functions": [
                            "make_sparse_random_data",
                            "densify",
                            "test_invalid_jl_domain",
                            "test_input_size_jl_min_dim",
                            "check_input_size_random_matrix",
                            "check_size_generated",
                            "check_zero_mean_and_unit_norm",
                            "check_input_with_sparse_random_matrix",
                            "test_gaussian_random_matrix",
                            "test_sparse_random_matrix",
                            "test_sparse_random_projection_transformer_invalid_density",
                            "test_random_projection_transformer_invalid_input",
                            "test_try_to_transform_before_fit",
                            "test_too_many_samples_to_find_a_safe_embedding",
                            "test_random_projection_embedding_quality",
                            "test_SparseRandomProjection_output_representation",
                            "test_correct_RandomProjection_dimensions_embedding",
                            "test_warning_n_components_greater_than_n_features",
                            "test_works_with_sparse_data"
                        ],
                        "types": {}
                    },
                    "test_site_joblib": {
                        "functions": ["test_old_pickle"],
                        "types": {}
                    }
                },
                "types": {},
                "functions": []
            },
            "tree": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_export": {
                                "functions": [
                                    "test_graphviz_toy",
                                    "test_graphviz_errors",
                                    "test_friedman_mse_in_graphviz",
                                    "test_precision",
                                    "test_export_text_errors",
                                    "test_export_text",
                                    "test_plot_tree_entropy",
                                    "test_plot_tree_gini"
                                ],
                                "types": {}
                            },
                            "test_reingold_tilford": {
                                "functions": [],
                                "types": {}
                            },
                            "test_tree": {
                                "functions": [
                                    "assert_tree_equal",
                                    "test_classification_toy",
                                    "test_weighted_classification_toy",
                                    "test_regression_toy",
                                    "test_xor",
                                    "test_iris",
                                    "test_boston",
                                    "test_probability",
                                    "test_arrayrepr",
                                    "test_pure_set",
                                    "test_numerical_stability",
                                    "test_importances",
                                    "test_importances_raises",
                                    "test_importances_gini_equal_mse",
                                    "test_max_features",
                                    "test_error",
                                    "test_min_samples_split",
                                    "test_min_samples_leaf",
                                    "check_min_weight_fraction_leaf",
                                    "check_min_weight_fraction_leaf_with_min_samples_leaf",
                                    "test_min_impurity_split",
                                    "test_min_impurity_decrease",
                                    "test_multioutput",
                                    "test_classes_shape",
                                    "test_unbalanced_iris",
                                    "test_memory_layout",
                                    "test_sample_weight",
                                    "test_sample_weight_invalid",
                                    "check_class_weights",
                                    "check_class_weight_errors",
                                    "test_max_leaf_nodes",
                                    "test_max_leaf_nodes_max_depth",
                                    "test_arrays_persist",
                                    "test_only_constant_features",
                                    "test_behaviour_constant_feature_after_splits",
                                    "test_with_only_one_non_constant_features",
                                    "test_big_input",
                                    "test_realloc",
                                    "test_huge_allocations",
                                    "check_sparse_input",
                                    "check_sparse_parameters",
                                    "check_sparse_criterion",
                                    "check_explicit_sparse_zeros",
                                    "_check_min_weight_leaf_split_level",
                                    "check_min_weight_leaf_split_level",
                                    "check_public_apply",
                                    "check_public_apply_sparse",
                                    "check_presort_sparse",
                                    "test_presort_sparse",
                                    "test_decision_path_hardcoded",
                                    "check_decision_path",
                                    "check_no_sparse_y_support",
                                    "test_mae",
                                    "test_criterion_copy",
                                    "test_empty_leaf_infinite_threshold",
                                    "test_decision_tree_memmap"
                                ],
                                "types": {}
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "export": {
                        "functions": [
                            "_color_brew",
                            "plot_tree",
                            "export_graphviz",
                            "_compute_depth",
                            "export_text"
                        ],
                        "types": {
                            "Sentinel": {
                                "methods": ["__repr__"]
                            },
                            "_BaseTreeExporter": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_BaseTreeExporter"
                                    },
                                    "get_color",
                                    "get_fill_color",
                                    "node_to_str"
                                ]
                            },
                            "_DOTTreeExporter": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_DOTTreeExporter"
                                    },
                                    "export",
                                    "tail",
                                    "head",
                                    "recurse",
                                    "get_color",
                                    "get_fill_color",
                                    "node_to_str"
                                ]
                            },
                            "_MPLTreeExporter": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_MPLTreeExporter"
                                    },
                                    "_make_tree",
                                    "export",
                                    "recurse",
                                    "get_color",
                                    "get_fill_color",
                                    "node_to_str"
                                ]
                            }
                        }
                    },
                    "setup": {
                        "functions": ["configuration"],
                        "types": {}
                    },
                    "tree": {
                        "functions": [],
                        "types": {
                            "BaseDecisionTree": {
                                "methods": [
                                    "get_depth",
                                    "get_n_leaves",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "_validate_X_predict",
                                    "predict",
                                    "apply",
                                    "decision_path"
                                ]
                            },
                            "DecisionTreeClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "DecisionTreeClassifier"
                                    },
                                    "__init__",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict_proba",
                                    "predict_log_proba",
                                    "get_depth",
                                    "get_n_leaves",
                                    "predict",
                                    "apply",
                                    "decision_path"
                                ]
                            },
                            "DecisionTreeRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "DecisionTreeRegressor"
                                    },
                                    "__init__",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "get_depth",
                                    "get_n_leaves",
                                    "predict",
                                    "apply",
                                    "decision_path"
                                ]
                            },
                            "ExtraTreeClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "ExtraTreeClassifier"
                                    },
                                    "__init__",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict_proba",
                                    "predict_log_proba",
                                    "get_depth",
                                    "get_n_leaves",
                                    "predict",
                                    "apply",
                                    "decision_path"
                                ]
                            },
                            "ExtraTreeRegressor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [],
                                        "returns": "ExtraTreeRegressor"
                                    },
                                    "__init__",
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "get_depth",
                                    "get_n_leaves",
                                    "predict",
                                    "apply",
                                    "decision_path"
                                ]
                            }
                        }
                    }
                },
                "types": {
                    "DecisionTreeClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "DecisionTreeClassifier"
                            },
                            "__init__",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict_proba",
                            "predict_log_proba",
                            "get_depth",
                            "get_n_leaves",
                            "predict",
                            "apply",
                            "decision_path"
                        ]
                    },
                    "DecisionTreeRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "DecisionTreeRegressor"
                            },
                            "__init__",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "get_depth",
                            "get_n_leaves",
                            "predict",
                            "apply",
                            "decision_path"
                        ]
                    },
                    "ExtraTreeClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "ExtraTreeClassifier"
                            },
                            "__init__",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict_proba",
                            "predict_log_proba",
                            "get_depth",
                            "get_n_leaves",
                            "predict",
                            "apply",
                            "decision_path"
                        ]
                    },
                    "ExtraTreeRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "ExtraTreeRegressor"
                            },
                            "__init__",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "get_depth",
                            "get_n_leaves",
                            "predict",
                            "apply",
                            "decision_path"
                        ]
                    }
                },
                "functions": ["export_graphviz", "plot_tree", "export_text"]
            },
            "utils": {
                "modules": {
                    "tests": {
                        "modules": {
                            "test_class_weight": {
                                "functions": [
                                    "test_compute_class_weight",
                                    "test_compute_class_weight_not_present",
                                    "test_compute_class_weight_dict",
                                    "test_compute_class_weight_balanced_negative",
                                    "test_compute_class_weight_balanced_unordered",
                                    "test_compute_class_weight_default",
                                    "test_compute_sample_weight",
                                    "test_compute_sample_weight_with_subsample",
                                    "test_compute_sample_weight_errors",
                                    "test_compute_sample_weight_more_than_32"
                                ],
                                "types": {}
                            },
                            "test_cython_blas": {
                                "functions": ["_no_op"],
                                "types": {}
                            },
                            "test_deprecation": {
                                "functions": [
                                    "test_deprecated",
                                    "test_is_deprecated",
                                    "test_pickle"
                                ],
                                "types": {
                                    "MockClass1": {
                                        "methods": []
                                    },
                                    "MockClass2": {
                                        "methods": []
                                    },
                                    "MockClass3": {
                                        "methods": []
                                    },
                                    "MockClass4": {
                                        "methods": []
                                    }
                                }
                            },
                            "test_estimator_checks": {
                                "functions": [
                                    "test_check_fit_score_takes_y_works_on_deprecated_fit",
                                    "test_check_estimator",
                                    "test_check_outlier_corruption",
                                    "test_check_estimator_transformer_no_mixin",
                                    "test_check_estimator_clones",
                                    "test_check_estimators_unfitted",
                                    "test_check_no_attributes_set_in_init",
                                    "test_check_estimator_pairwise",
                                    "run_tests_without_pytest",
                                    "test_check_class_weight_balanced_linear_classifier"
                                ],
                                "types": {
                                    "CorrectNotFittedError": {
                                        "methods": []
                                    },
                                    "BaseBadClassifier": {
                                        "methods": ["fit", "predict"]
                                    },
                                    "ChangesDict": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "ChangesDict"
                                            },
                                            "fit",
                                            {
                                                "name": "predict",
                                                "updates": [0]
                                            }
                                        ]
                                    },
                                    "SetsWrongAttribute": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "SetsWrongAttribute"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            }
                                        ]
                                    },
                                    "ChangesWrongAttribute": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "ChangesWrongAttribute"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            }
                                        ]
                                    },
                                    "ChangesUnderscoreAttribute": {
                                        "methods": [
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            }
                                        ]
                                    },
                                    "RaisesErrorInSetParams": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "RaisesErrorInSetParams"
                                            },
                                            {
                                                "name": "set_params",
                                                "updates": [0]
                                            },
                                            "fit"
                                        ]
                                    },
                                    "ModifiesValueInsteadOfRaisingError": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "ModifiesValueInsteadOfRaisingError"
                                            },
                                            {
                                                "name": "set_params",
                                                "updates": [0]
                                            },
                                            "fit"
                                        ]
                                    },
                                    "ModifiesAnotherValue": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "ModifiesAnotherValue"
                                            },
                                            {
                                                "name": "set_params",
                                                "updates": [0]
                                            },
                                            "fit"
                                        ]
                                    },
                                    "NoCheckinPredict": {
                                        "methods": ["fit", "predict"]
                                    },
                                    "NoSparseClassifier": {
                                        "methods": ["fit", "predict"]
                                    },
                                    "CorrectNotFittedErrorClassifier": {
                                        "methods": [
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "predict"
                                        ]
                                    },
                                    "NoSampleWeightPandasSeriesType": {
                                        "methods": ["fit", "predict"]
                                    },
                                    "BadBalancedWeightsClassifier": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "BadBalancedWeightsClassifier"
                                            },
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            "predict"
                                        ]
                                    },
                                    "BadTransformerWithoutMixin": {
                                        "methods": ["fit", "transform"]
                                    },
                                    "NotInvariantPredict": {
                                        "methods": ["fit", "predict"]
                                    },
                                    "LargeSparseNotSupportedClassifier": {
                                        "methods": ["fit"]
                                    },
                                    "SparseTransformer": {
                                        "methods": [
                                            {
                                                "name": "fit",
                                                "updates": [0]
                                            },
                                            {
                                                "name": "fit_transform",
                                                "updates": [0]
                                            },
                                            "transform"
                                        ]
                                    },
                                    "TestEstimatorWithDeprecatedFitMethod": {
                                        "methods": []
                                    },
                                    "NonConformantEstimatorPrivateSet": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "NonConformantEstimatorPrivateSet"
                                            }
                                        ]
                                    },
                                    "NonConformantEstimatorNoParamSet": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [],
                                                "returns": "NonConformantEstimatorNoParamSet"
                                            },
                                            "__init__"
                                        ]
                                    }
                                }
                            },
                            "test_extmath": {
                                "functions": [
                                    "test_density",
                                    "test_uniform_weights",
                                    "test_random_weights",
                                    "check_randomized_svd_low_rank",
                                    "test_randomized_svd_low_rank_with_noise",
                                    "test_randomized_svd_infinite_rank",
                                    "test_randomized_svd_transpose_consistency",
                                    "test_randomized_svd_power_iteration_normalizer",
                                    "test_randomized_svd_sparse_warnings",
                                    "test_svd_flip",
                                    "test_randomized_svd_sign_flip",
                                    "test_randomized_svd_sign_flip_with_transpose",
                                    "test_cartesian",
                                    "test_logistic_sigmoid",
                                    "test_incremental_variance_update_formulas",
                                    "test_incremental_mean_and_variance_ignore_nan",
                                    "test_incremental_variance_ddof",
                                    "test_vector_sign_flip",
                                    "test_softmax",
                                    "test_stable_cumsum"
                                ],
                                "types": {}
                            },
                            "test_fast_dict": {
                                "functions": [
                                    "test_int_float_dict",
                                    "test_int_float_dict_argmin"
                                ],
                                "types": {}
                            },
                            "test_fixes": {
                                "functions": ["test_masked_array_obj_dtype_pickleable"],
                                "types": {}
                            },
                            "test_linear_assignment": {
                                "functions": [],
                                "types": {}
                            },
                            "test_metaestimators": {
                                "functions": [
                                    "test_delegated_docstring",
                                    "test_if_delegate_has_method"
                                ],
                                "types": {
                                    "Prefix": {
                                        "methods": ["func"]
                                    },
                                    "MockMetaEstimator": {
                                        "methods": []
                                    },
                                    "MetaEst": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MetaEst"
                                            }
                                        ]
                                    },
                                    "MetaEstTestTuple": {
                                        "methods": []
                                    },
                                    "MetaEstTestList": {
                                        "methods": []
                                    },
                                    "HasPredict": {
                                        "methods": ["predict"]
                                    },
                                    "HasNoPredict": {
                                        "methods": []
                                    }
                                }
                            },
                            "test_multiclass": {
                                "functions": [
                                    "test_unique_labels",
                                    "test_unique_labels_non_specific",
                                    "test_unique_labels_mixed_types",
                                    "test_is_multilabel",
                                    "test_check_classification_targets",
                                    "test_type_of_target",
                                    "test_class_distribution",
                                    "test_safe_split_with_precomputed_kernel",
                                    "test_ovr_decision_function"
                                ],
                                "types": {
                                    "NotAnArray": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "NotAnArray"
                                            },
                                            "__array__"
                                        ]
                                    }
                                }
                            },
                            "test_murmurhash": {
                                "functions": [
                                    "test_mmhash3_int",
                                    "test_mmhash3_int_array",
                                    "test_mmhash3_bytes",
                                    "test_mmhash3_unicode",
                                    "test_no_collision_on_byte_range",
                                    "test_uniform_distribution"
                                ],
                                "types": {}
                            },
                            "test_optimize": {
                                "functions": ["test_newton_cg"],
                                "types": {}
                            },
                            "test_pprint": {
                                "functions": [
                                    "test_basic",
                                    "test_changed_only",
                                    "test_pipeline",
                                    "test_deeply_nested",
                                    "test_gridsearch",
                                    "test_gridsearch_pipeline",
                                    "test_n_max_elements_to_show",
                                    "test_bruteforce_ellipsis",
                                    "test_builtin_prettyprinter"
                                ],
                                "types": {
                                    "LogisticRegression": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "LogisticRegression"
                                            },
                                            { "name": "fit", "updates": [0] },
                                            "score",
                                            "predict",
                                            "predict_proba",
                                            "predict_log_proba"
                                        ]
                                    },
                                    "StandardScaler": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "StandardScaler"
                                            },
                                            "transform"
                                        ]
                                    },
                                    "RFE": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "RFE"
                                            }
                                        ]
                                    },
                                    "GridSearchCV": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "GridSearchCV"
                                            }
                                        ]
                                    },
                                    "CountVectorizer": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "CountVectorizer"
                                            }
                                        ]
                                    },
                                    "Pipeline": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "Pipeline"
                                            }
                                        ]
                                    },
                                    "SVC": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "SVC"
                                            }
                                        ]
                                    },
                                    "PCA": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "PCA"
                                            }
                                        ]
                                    },
                                    "NMF": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "NMF"
                                            }
                                        ]
                                    },
                                    "SimpleImputer": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "SimpleImputer"
                                            }
                                        ]
                                    }
                                }
                            },
                            "test_random": {
                                "functions": [
                                    "test_invalid_sample_without_replacement_algorithm",
                                    "test_sample_without_replacement_algorithms",
                                    "check_edge_case_of_sample_int",
                                    "check_sample_int",
                                    "check_sample_int_distribution",
                                    "test_random_choice_csc",
                                    "test_random_choice_csc_errors",
                                    "test_our_rand_r"
                                ],
                                "types": {}
                            },
                            "test_seq_dataset": {
                                "functions": [
                                    "assert_csr_equal_values",
                                    "make_dense_dataset_32",
                                    "make_dense_dataset_64",
                                    "make_sparse_dataset_32",
                                    "make_sparse_dataset_64",
                                    "test_buffer_dtype_mismatch_error"
                                ],
                                "types": {}
                            },
                            "test_shortest_path": {
                                "functions": [
                                    {
                                        "name": "floyd_warshall_slow",
                                        "updates": [0]
                                    },
                                    "generate_graph",
                                    "test_floyd_warshall",
                                    "test_dijkstra",
                                    "test_shortest_path",
                                    "test_dijkstra_bug_fix"
                                ],
                                "types": {}
                            },
                            "test_show_versions": {
                                "functions": [
                                    "test_get_sys_info",
                                    "test_get_deps_info",
                                    "test_show_versions_with_blas"
                                ],
                                "types": {}
                            },
                            "test_sparsefuncs": {
                                "functions": [
                                    "test_mean_variance_axis0",
                                    "test_mean_variance_axis1",
                                    "test_incr_mean_variance_axis",
                                    "test_mean_variance_illegal_axis",
                                    "test_densify_rows",
                                    "test_inplace_column_scale",
                                    "test_inplace_row_scale",
                                    "test_inplace_swap_row",
                                    "test_inplace_swap_column",
                                    "test_min_max_axis_errors",
                                    "test_count_nonzero",
                                    "test_csc_row_median",
                                    "test_inplace_normalize"
                                ],
                                "types": {}
                            },
                            "test_testing": {
                                "functions": [
                                    "test_assert_less",
                                    "test_assert_greater",
                                    "test_assert_less_equal",
                                    "test_assert_greater_equal",
                                    "test_set_random_state",
                                    "test_assert_allclose_dense_sparse",
                                    "test_assert_raises_msg",
                                    "test_assert_raise_message",
                                    "test_ignore_warning",
                                    "f_ok",
                                    "f_bad_sections",
                                    "f_bad_order",
                                    "f_missing",
                                    "f_check_param_definition",
                                    "test_check_docstring_parameters",
                                    "check_memmap",
                                    "test_tempmemmap",
                                    "test_create_memmap_backed_data"
                                ],
                                "types": {
                                    "TestWarns": {
                                        "methods": ["test_warn", "test_warn_wrong_warning"]
                                    },
                                    "Klass": {
                                        "methods": ["f_missing", "f_bad_sections"]
                                    },
                                    "MockEst": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [],
                                                "returns": "MockEst"
                                            },
                                            "__init__",
                                            "fit",
                                            "predict",
                                            "predict_proba",
                                            "score"
                                        ]
                                    },
                                    "MockMetaEstimator": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "MockMetaEstimator"
                                            }
                                        ]
                                    },
                                    "RegistrationCounter": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "RegistrationCounter"
                                            },
                                            {
                                                "name": "__call__",
                                                "updates": [0]
                                            }
                                        ]
                                    }
                                }
                            },
                            "test_utils": {
                                "functions": [
                                    "test_make_rng",
                                    "test_deprecated",
                                    "test_resample",
                                    "test_resample_stratified",
                                    "test_resample_stratified_replace",
                                    "test_resample_stratify_2dy",
                                    "test_resample_stratify_sparse_error",
                                    "test_safe_mask",
                                    "test_column_or_1d",
                                    "test_safe_indexing",
                                    "test_safe_indexing_pandas",
                                    "test_safe_indexing_mock_pandas",
                                    "test_shuffle_on_ndim_equals_three",
                                    "test_shuffle_dont_convert_to_array",
                                    "test_gen_even_slices",
                                    "dummy_func",
                                    "test_deprecation_joblib_api"
                                ],
                                "types": {
                                    "Ham": {
                                        "methods": []
                                    }
                                }
                            },
                            "test_validation": {
                                "functions": [
                                    "test_as_float_array",
                                    "test_np_matrix",
                                    "test_memmap",
                                    "test_ordering",
                                    "test_check_array_force_all_finite_object",
                                    "test_check_array_pandas_dtype_object_conversion",
                                    "test_check_array_on_mock_dataframe",
                                    "test_check_array_dtype_stability",
                                    "test_check_array_dtype_warning",
                                    "test_check_array_warn_on_dtype_deprecation",
                                    "test_check_array_accept_sparse_type_exception",
                                    "test_check_array_accept_sparse_no_exception",
                                    "test_check_array_accept_large_sparse_no_exception",
                                    "test_check_array_accept_large_sparse_raise_exception",
                                    "test_check_array_min_samples_and_features_messages",
                                    "test_check_array_complex_data_error",
                                    "test_has_fit_parameter",
                                    "test_check_symmetric",
                                    "test_check_is_fitted",
                                    "test_check_consistent_length",
                                    "test_check_dataframe_fit_attribute",
                                    "test_suppress_validation",
                                    "test_check_array_series",
                                    "test_check_dataframe_warns_on_dtype",
                                    "test_check_X_y_informative_error",
                                    "test_retrieve_samples_from_non_standard_shape"
                                ],
                                "types": {
                                    "TestClassWithDeprecatedFitMethod": {
                                        "methods": []
                                    },
                                    "DummyMemory": {
                                        "methods": ["cache"]
                                    },
                                    "WrongDummyMemory": {
                                        "methods": []
                                    },
                                    "TestNonNumericShape": {
                                        "methods": [
                                            {
                                                "name": "__init__",
                                                "updates": [0],
                                                "returns": "TestNonNumericShape"
                                            },
                                            "__len__"
                                        ]
                                    }
                                }
                            }
                        },
                        "types": {},
                        "functions": []
                    },
                    "class_weight": {
                        "functions": ["compute_class_weight", "compute_sample_weight"],
                        "types": {}
                    },
                    "deprecation": {
                        "functions": ["_is_deprecated"],
                        "types": {
                            "deprecated": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "deprecated"
                                    },
                                    {
                                        "name": "__call__",
                                        "updates": [1]
                                    },
                                    {
                                        "name": "_decorate_class",
                                        "updates": [1]
                                    },
                                    "_decorate_fun",
                                    "_decorate_property",
                                    "_update_doc"
                                ]
                            }
                        }
                    },
                    "estimator_checks": {
                        "functions": [
                            "_safe_tags",
                            "_yield_checks",
                            "_yield_classifier_checks",
                            "_yield_regressor_checks",
                            "_yield_transformer_checks",
                            "_yield_clustering_checks",
                            "_yield_outliers_checks",
                            "_yield_all_checks",
                            "check_estimator",
                            "_boston_subset",
                            {
                                "name": "set_checking_parameters",
                                "updates": [0]
                            },
                            "_is_pairwise",
                            "_is_pairwise_metric",
                            "pairwise_estimator_convert_X",
                            "_generate_sparse_matrix",
                            "check_estimator_sparse_data",
                            "check_complex_data",
                            "is_public_parameter",
                            "_apply_on_subsets",
                            "_check_transformer",
                            "check_outlier_corruption",
                            "check_outliers_train",
                            "choose_check_classifiers_labels",
                            "check_classifiers_classes",
                            "check_no_attributes_set_in_init",
                            "check_parameters_default_constructible",
                            "multioutput_estimator_convert_y_2d",
                            "check_outliers_fit_predict",
                            "check_fit_idempotent"
                        ],
                        "types": {
                            "NotAnArray": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "NotAnArray"
                                    },
                                    "__array__"
                                ]
                            }
                        }
                    },
                    "extmath": {
                        "functions": [
                            "squared_norm",
                            "row_norms",
                            "fast_logdet",
                            "density",
                            "safe_sparse_dot",
                            "randomized_range_finder",
                            "randomized_svd",
                            "weighted_mode",
                            {
                                "name": "cartesian",
                                "updates": [1]
                            },
                            "svd_flip",
                            "log_logistic",
                            "softmax",
                            "safe_min",
                            "make_nonnegative",
                            "_safe_accumulator_op",
                            "_incremental_mean_and_var",
                            "_deterministic_vector_sign_flip",
                            "stable_cumsum"
                        ],
                        "types": {}
                    },
                    "fixes": {
                        "functions": [
                            "_parse_version",
                            "parallel_helper",
                            "_astype_copy_false",
                            "_joblib_parallel_args"
                        ],
                        "types": {
                            "MaskedArray": {
                                "methods": ["__getstate__"]
                            }
                        }
                    },
                    "graph": {
                        "functions": ["single_source_shortest_path_length"],
                        "types": {}
                    },
                    "linear_assignment_": {
                        "functions": [
                            "linear_assignment",
                            "_hungarian",
                            {
                                "name": "_step1",
                                "updates": [0]
                            },
                            "_step3",
                            {
                                "name": "_step4",
                                "updates": [0]
                            },
                            "_step5",
                            "_step6"
                        ],
                        "types": {
                            "_HungarianState": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_HungarianState"
                                    },
                                    "_clear_covers"
                                ]
                            }
                        }
                    },
                    "metaestimators": {
                        "functions": ["if_delegate_has_method", "_safe_split"],
                        "types": {
                            "_BaseComposition": {
                                "methods": [
                                    "_get_params",
                                    "_set_params",
                                    "_replace_estimator",
                                    "_validate_names"
                                ]
                            },
                            "_IffHasAttrDescriptor": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_IffHasAttrDescriptor"
                                    },
                                    "__get__"
                                ]
                            }
                        }
                    },
                    "mocking": {
                        "functions": [],
                        "types": {
                            "ArraySlicingWrapper": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "ArraySlicingWrapper"
                                    },
                                    "__getitem__"
                                ]
                            },
                            "MockDataFrame": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "MockDataFrame"
                                    },
                                    "__len__",
                                    "__array__",
                                    "__eq__",
                                    "__ne__"
                                ]
                            },
                            "CheckingClassifier": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "CheckingClassifier"
                                    },
                                    {
                                        "name": "fit",
                                        "updates": [0]
                                    },
                                    "predict",
                                    "score",
                                    "_more_tags"
                                ]
                            }
                        }
                    },
                    "multiclass": {
                        "functions": [
                            "_unique_multiclass",
                            "_unique_indicator",
                            "unique_labels",
                            "_is_integral_float",
                            "is_multilabel",
                            "check_classification_targets",
                            "type_of_target",
                            {
                                "name": "_check_partial_fit_first_call",
                                "updates": [0]
                            },
                            "class_distribution",
                            "_ovr_decision_function"
                        ],
                        "types": {}
                    },
                    "optimize": {
                        "functions": ["_line_search_wolfe12", "_cg", "newton_cg"],
                        "types": {
                            "_LineSearchError": {
                                "methods": []
                            }
                        }
                    },
                    "random": {
                        "functions": [
                            {
                                "name": "random_choice_csc",
                                "updates": [1]
                            }
                        ],
                        "types": {}
                    },
                    "setup": {
                        "functions": ["configuration"],
                        "types": {}
                    },
                    "sparsefuncs": {
                        "functions": [
                            "_raise_typeerror",
                            "_raise_error_wrong_axis",
                            {
                                "name": "inplace_csr_column_scale",
                                "updates": [0]
                            },
                            {
                                "name": "inplace_csr_row_scale",
                                "updates": [0]
                            },
                            "mean_variance_axis",
                            "incr_mean_variance_axis",
                            "inplace_column_scale",
                            "inplace_row_scale",
                            "inplace_swap_row_csc",
                            {
                                "name": "inplace_swap_row_csr",
                                "updates": [0]
                            },
                            "inplace_swap_row",
                            "inplace_swap_column",
                            "_minor_reduce",
                            "_min_or_max_axis",
                            "_sparse_min_or_max",
                            "_sparse_min_max",
                            "_sparse_nan_min_max",
                            "min_max_axis",
                            "count_nonzero",
                            "_get_median",
                            "_get_elem_at_rank",
                            "csc_median_axis_0"
                        ],
                        "types": {}
                    },
                    "stats": {
                        "functions": ["_weighted_percentile"],
                        "types": {}
                    },
                    "testing": {
                        "functions": [
                            "assert_warns",
                            "assert_warns_message",
                            "assert_warns_div0",
                            "assert_no_warnings",
                            "ignore_warnings",
                            "assert_raise_message",
                            "assert_allclose_dense_sparse",
                            "install_mldata_mock",
                            "uninstall_mldata_mock",
                            "all_estimators",
                            "set_random_state",
                            "clean_warning_registry",
                            "check_skip_network",
                            "_delete_folder",
                            "create_memmap_backed_data",
                            "_get_args",
                            "_get_func_name",
                            "check_docstring_parameters",
                            "assert_run_python_script"
                        ],
                        "types": {
                            "_IgnoreWarnings": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "_IgnoreWarnings"
                                    },
                                    "__call__",
                                    "__repr__",
                                    {
                                        "name": "__enter__",
                                        "updates": [0]
                                    },
                                    "__exit__"
                                ]
                            },
                            "mock_mldata_urlopen": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "mock_mldata_urlopen"
                                    },
                                    "__call__"
                                ]
                            },
                            "TempMemmap": {
                                "methods": [
                                    {
                                        "name": "__init__",
                                        "updates": [0],
                                        "returns": "TempMemmap"
                                    },
                                    {
                                        "name": "__enter__",
                                        "updates": [0]
                                    },
                                    "__exit__"
                                ]
                            }
                        }
                    },
                    "validation": {
                        "functions": [
                            "_assert_all_finite",
                            "assert_all_finite",
                            "as_float_array",
                            "_is_arraylike",
                            "_num_samples",
                            "check_memory",
                            "check_consistent_length",
                            "indexable",
                            "_ensure_sparse_format",
                            "_ensure_no_complex_data",
                            "check_array",
                            "_check_large_sparse",
                            "check_X_y",
                            "column_or_1d",
                            "check_random_state",
                            "has_fit_parameter",
                            "check_symmetric",
                            "check_is_fitted",
                            "check_non_negative",
                            "check_scalar"
                        ],
                        "types": {}
                    }
                },
                "types": {
                    "deprecated": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "deprecated"
                            },
                            {
                                "name": "__call__",
                                "updates": [1]
                            },
                            {
                                "name": "_decorate_class",
                                "updates": [1]
                            },
                            "_decorate_fun",
                            "_decorate_property",
                            "_update_doc"
                        ]
                    }
                },
                "functions": [
                    "compute_class_weight",
                    "compute_sample_weight",
                    "as_float_array",
                    "assert_all_finite",
                    "check_random_state",
                    "column_or_1d",
                    "check_array",
                    "check_consistent_length",
                    "check_X_y",
                    "indexable",
                    "check_symmetric",
                    "check_scalar"
                ]
            },
            "base": {
                "functions": [
                    "clone",
                    "_pprint",
                    "_update_if_consistent",
                    "is_classifier",
                    "is_regressor",
                    "is_outlier_detector"
                ],
                "types": {
                    "BaseEstimator": {
                        "methods": [
                            "get_params",
                            "set_params",
                            "__repr__",
                            "__getstate__",
                            "__setstate__",
                            "_get_tags"
                        ]
                    },
                    "ClassifierMixin": {
                        "methods": ["score"]
                    },
                    "RegressorMixin": {
                        "methods": ["score"]
                    },
                    "ClusterMixin": {
                        "methods": ["fit_predict"]
                    },
                    "BiclusterMixin": {
                        "methods": ["get_indices", "get_shape", "get_submatrix"]
                    },
                    "TransformerMixin": {
                        "methods": ["fit_transform"]
                    },
                    "DensityMixin": {
                        "methods": ["score"]
                    },
                    "OutlierMixin": {
                        "methods": ["fit_predict"]
                    },
                    "MetaEstimatorMixin": {
                        "methods": []
                    },
                    "MultiOutputMixin": {
                        "methods": ["_more_tags"]
                    },
                    "_UnstableArchMixin": {
                        "methods": ["_more_tags"]
                    }
                }
            },
            "calibration": {
                "functions": ["_sigmoid_calibration", "calibration_curve"],
                "types": {
                    "CalibratedClassifierCV": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "CalibratedClassifierCV"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict_proba",
                            "predict"
                        ]
                    },
                    "_CalibratedClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "_CalibratedClassifier"
                            },
                            "_preproc",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict_proba"
                        ]
                    },
                    "_SigmoidCalibration": {
                        "methods": [
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict"
                        ]
                    }
                }
            },
            "conftest": {
                "functions": [],
                "types": {}
            },
            "discriminant_analysis": {
                "functions": ["_cov", "_class_means", "_class_cov"],
                "types": {
                    "LinearDiscriminantAnalysis": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "LinearDiscriminantAnalysis"
                            },
                            {
                                "name": "_solve_lsqr",
                                "updates": [0]
                            },
                            {
                                "name": "_solve_eigen",
                                "updates": [0]
                            },
                            {
                                "name": "_solve_svd",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform",
                            "predict_proba",
                            "predict_log_proba"
                        ]
                    },
                    "QuadraticDiscriminantAnalysis": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "QuadraticDiscriminantAnalysis"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "_decision_function",
                            "decision_function",
                            "predict",
                            "predict_proba",
                            "predict_log_proba"
                        ]
                    }
                }
            },
            "dummy": {
                "functions": [],
                "types": {
                    "DummyClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "DummyClassifier"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            "predict_proba",
                            "predict_log_proba",
                            "_more_tags",
                            "score"
                        ]
                    },
                    "DummyRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "DummyRegressor"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            "_more_tags",
                            "score"
                        ]
                    }
                }
            },
            "exceptions": {
                "functions": [],
                "types": {
                    "NotFittedError": {
                        "methods": []
                    },
                    "ChangedBehaviorWarning": {
                        "methods": []
                    },
                    "ConvergenceWarning": {
                        "methods": []
                    },
                    "DataConversionWarning": {
                        "methods": []
                    },
                    "DataDimensionalityWarning": {
                        "methods": []
                    },
                    "EfficiencyWarning": {
                        "methods": []
                    },
                    "FitFailedWarning": {
                        "methods": []
                    },
                    "NonBLASDotWarning": {
                        "methods": []
                    },
                    "SkipTestWarning": {
                        "methods": []
                    },
                    "UndefinedMetricWarning": {
                        "methods": []
                    }
                }
            },
            "isotonic": {
                "functions": ["check_increasing", "isotonic_regression"],
                "types": {
                    "IsotonicRegression": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "IsotonicRegression"
                            },
                            "_check_fit_data",
                            {
                                "name": "_build_f",
                                "updates": [0]
                            },
                            {
                                "name": "_build_y",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform",
                            "predict",
                            "__getstate__",
                            {
                                "name": "__setstate__",
                                "updates": [0]
                            },
                            "_more_tags"
                        ]
                    }
                }
            },
            "kernel_approximation": {
                "functions": [],
                "types": {
                    "RBFSampler": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "RBFSampler"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform"
                        ]
                    },
                    "SkewedChi2Sampler": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "SkewedChi2Sampler"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform"
                        ]
                    },
                    "AdditiveChi2Sampler": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "AdditiveChi2Sampler"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform",
                            "_transform_dense",
                            "_transform_sparse",
                            "_more_tags"
                        ]
                    },
                    "Nystroem": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "Nystroem"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform",
                            "_get_kernel_params"
                        ]
                    }
                }
            },
            "kernel_ridge": {
                "functions": [],
                "types": {
                    "KernelRidge": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "KernelRidge"
                            },
                            "_get_kernel",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict"
                        ]
                    }
                }
            },
            "multiclass": {
                "functions": [
                    "_fit_binary",
                    "_partial_fit_binary",
                    "_predict_binary",
                    "_check_estimator",
                    "_fit_ovo_binary",
                    "_partial_fit_ovo_binary"
                ],
                "types": {
                    "_ConstantPredictor": {
                        "methods": [
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            "decision_function",
                            "predict_proba"
                        ]
                    },
                    "OneVsRestClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "OneVsRestClassifier"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict"
                        ]
                    },
                    "OneVsOneClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "OneVsOneClassifier"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            "decision_function"
                        ]
                    },
                    "OutputCodeClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "OutputCodeClassifier"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict"
                        ]
                    }
                }
            },
            "multioutput": {
                "functions": ["_fit_estimator", "_partial_fit_estimator"],
                "types": {
                    "MultiOutputEstimator": {
                        "methods": [
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            "_more_tags"
                        ]
                    },
                    "MultiOutputRegressor": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "MultiOutputRegressor"
                            },
                            "__init__",
                            "score",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict"
                        ]
                    },
                    "MultiOutputClassifier": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "MultiOutputClassifier"
                            },
                            "__init__",
                            "predict_proba",
                            "score",
                            "_more_tags",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict"
                        ]
                    },
                    "_BaseChain": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "_BaseChain"
                            },
                            "predict"
                        ]
                    },
                    "ClassifierChain": {
                        "methods": [
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "_more_tags",
                            "predict"
                        ]
                    },
                    "RegressorChain": {
                        "methods": ["fit", "_more_tags", "predict"]
                    }
                }
            },
            "naive_bayes": {
                "functions": [],
                "types": {
                    "BaseNB": {
                        "methods": ["predict", "predict_log_proba", "predict_proba"]
                    },
                    "GaussianNB": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "GaussianNB"
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            {
                                "name": "_partial_fit",
                                "updates": [0]
                            },
                            "_joint_log_likelihood",
                            "predict",
                            "predict_log_proba",
                            "predict_proba"
                        ]
                    },
                    "BaseDiscreteNB": {
                        "methods": [
                            {
                                "name": "_update_class_log_prior",
                                "updates": [0]
                            },
                            "_check_alpha",
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "_get_coef",
                            "_get_intercept",
                            "_more_tags",
                            "predict",
                            "predict_log_proba",
                            "predict_proba"
                        ]
                    },
                    "MultinomialNB": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "MultinomialNB"
                            },
                            {
                                "name": "_count",
                                "updates": [0]
                            },
                            {
                                "name": "_update_feature_log_prob",
                                "updates": [0]
                            },
                            "_joint_log_likelihood",
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            "predict_log_proba",
                            "predict_proba"
                        ]
                    },
                    "ComplementNB": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "ComplementNB"
                            },
                            {
                                "name": "_count",
                                "updates": [0]
                            },
                            {
                                "name": "_update_feature_log_prob",
                                "updates": [0]
                            },
                            "_joint_log_likelihood",
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            "predict_log_proba",
                            "predict_proba"
                        ]
                    },
                    "BernoulliNB": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "BernoulliNB"
                            },
                            {
                                "name": "_count",
                                "updates": [0]
                            },
                            {
                                "name": "_update_feature_log_prob",
                                "updates": [0]
                            },
                            "_joint_log_likelihood",
                            {
                                "name": "partial_fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "predict",
                            "predict_log_proba",
                            "predict_proba"
                        ]
                    }
                }
            },
            "pipeline": {
                "functions": [
                    "_name_estimators",
                    "make_pipeline",
                    "_transform_one",
                    "_fit_transform_one",
                    "_fit_one",
                    "make_union"
                ],
                "types": {
                    "Pipeline": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "Pipeline"
                            },
                            "get_params",
                            "set_params",
                            "_validate_steps",
                            "_iter",
                            "__len__",
                            "__getitem__",
                            "_log_message",
                            {
                                "name": "_fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            "_transform",
                            "_inverse_transform"
                        ]
                    },
                    "FeatureUnion": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "FeatureUnion"
                            },
                            "get_params",
                            "set_params",
                            "_validate_transformers",
                            "_iter",
                            "get_feature_names",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            {
                                "name": "fit_transform",
                                "updates": [0]
                            },
                            "_log_message",
                            {
                                "name": "_parallel_func",
                                "updates": [0]
                            },
                            "transform",
                            "_update_transformer_list"
                        ]
                    }
                }
            },
            "random_projection": {
                "functions": [
                    "johnson_lindenstrauss_min_dim",
                    "_check_density",
                    "_check_input_size",
                    "gaussian_random_matrix",
                    "sparse_random_matrix"
                ],
                "types": {
                    "BaseRandomProjection": {
                        "methods": [
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform"
                        ]
                    },
                    "GaussianRandomProjection": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [],
                                "returns": "GaussianRandomProjection"
                            },
                            "__init__",
                            "_make_random_matrix",
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform"
                        ]
                    },
                    "SparseRandomProjection": {
                        "methods": [
                            {
                                "name": "__init__",
                                "updates": [0],
                                "returns": "SparseRandomProjection"
                            },
                            {
                                "name": "_make_random_matrix",
                                "updates": [0]
                            },
                            {
                                "name": "fit",
                                "updates": [0]
                            },
                            "transform"
                        ]
                    }
                }
            },
            "setup": {
                "functions": ["configuration"],
                "types": {}
            }
        },
        "types": {},
        "functions": []
    }
}
