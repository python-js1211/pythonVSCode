# -----------------------------------------------------------------------------------------------------------------------------
# Overview:
# -----------------------------------------------------------------------------------------------------------------------------
# Steps to be executed as part of the UI tests.
# 1. Show all env vars                        - Logging (display environment variables).
# 2. Use Node                                 - Specify and use node version.
# 3. Setup Python ? for extension             - Version of Python to be used for testing in Extension.
# 4. Setup CI_PYTHON_PATH for extension       - Export Env variable that'll be used by a seprate step.
#                                               Note: This env variable is NOT used by any Code (used purely in the Azdo step further below).
# 5. Use Python 2.7                           - Ensure minimum version of Python (2.7) is available on CI for Python Extension.
# 6. Use Python 3.7                           - Ensure latest version of Python (3.7) is available on CI for Python Extension.
# 7. npm ci                                   - Install npm packages for some JS scripts used in testing (NOT for extension).
# 8. Show Dependency Versions                 - Logging.
# 9. Start xvfb                               - Start in-memory display server (for launching VSC).
# 10. Restore VSIX                            - VSIX has been built in another Job, download that from artifacts.
# 11. Copy VSIX                               - Copy the VSIX into root directory (test suite expects it to be in root - default setup).
# 12. Compile                                 - Npm compile
# 13. Run Tests                               - Launch the UI tests in Nodejs
# 14. Copy Reports
# 15. Copy Screenshots
# 16. Copy Extension Logs
# 17. Copy VSC Logs
# 18. Upload Reports                          - Upload as artifacts to Azure Devops
# 19. Test Results                            - Upload test results to Azure Devops
# -----------------------------------------------------------------------------------------------------------------------------
# Variables:
# -----------------------------------------------------------------------------------------------------------------------------
# 1. VSCodeChannel
#   Mandatory.
#   VS Code channel to be tested against. `stable` or `insider`.
# 2. Tags
#   Mandatory.
#   Contain the `--tags=....` arguments to be passed into behave to exclude certain tags.
#   Multiple tags can be passed as `@smoke and not @ignore1 and @another and not @andMore`
#   More information on --tags argument for behave can be found here:
#       * https://behave.readthedocs.io/en/latest/tutorial.html#controlling-things-with-tags
#       * https://behave.readthedocs.io/en/latest/tag_expressions.html
# 3. PythonVersion
#   Python version to be used.
# 4. VMImageName
#   VM Image to be used (standard Azure Devops variable).

steps:
    # Some tests need to have both 2.7 & 3.7 available.
    - task: UsePythonVersion@0
      displayName: 'Use Python 2.7'
      inputs:
          versionSpec: 2.7

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.7'
      inputs:
          versionSpec: 3.7

    # Setup python environment in current path for extension to use.
    - template: initialization.yml
      parameters:
        PythonVersion: $(PythonVersion)
        workingDirectory: $(Build.SourcesDirectory)/uitests
        compile: 'true'

    - task: DownloadBuildArtifacts@0
      inputs:
          buildType: "current"
          artifactName: "VSIX"
          downloadPath: "$(Build.SourcesDirectory)"
      displayName: "Restore VSIX"
      condition: succeeded()

    - task: CopyFiles@2
      inputs:
          sourceFolder: "$(Build.SourcesDirectory)/VSIX"
          targetFolder: $(Build.SourcesDirectory)/uitests
      displayName: "Copy VSIX"
      condition: succeeded()

    - bash: |
          cd ./bootstrap/extension
          npm run build
      workingDirectory: $(Build.SourcesDirectory)/uitests
      displayName: "Build Bootstrap Extension"
      condition: succeeded()

    - bash: node ./out/index.js download --channel=$(VSCodeChannel)
      workingDirectory: $(Build.SourcesDirectory)/uitests
      env:
          VSCODE_CHANNEL: $(VSCodeChannel)
      displayName: 'Download VS Code $(VSCodeChannel)'
      condition: succeeded()

    - bash: node ./out/index.js install --channel=$(VSCodeChannel)
      workingDirectory: $(Build.SourcesDirectory)/uitests
      env:
          VSCODE_CHANNEL: $(VSCodeChannel)
      displayName: 'Install Extension(s)'
      condition: succeeded()

    # Setup python environment in current path for extension.
    - task: UsePythonVersion@0
      displayName: 'Setup Python $(PythonVersion) for extension'
      inputs:
          versionSpec: $(PythonVersion)

    # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
    # We need to take ownership if we want to update conda or install packages globally
    - bash: sudo chown -R $USER $CONDA
      displayName: Take ownership of conda installation
      condition: and(succeeded(), eq(variables['agent.os'], 'Darwin'))

    - script: |
          export CI_PYTHON_PATH=`which python`
          echo '##vso[task.setvariable variable=CI_PYTHON_PATH]'$CI_PYTHON_PATH
      displayName: 'Setup CI_PYTHON_PATH for extension'
      condition: and(succeeded(), not(eq(variables['agent.os'], 'Windows_NT')))

    - powershell: |
          $CI_PYTHON_PATH = (get-command  python).path
          Write-Host "##vso[task.setvariable variable=CI_PYTHON_PATH]$CI_PYTHON_PATH"
          Write-Host $CI_PYTHON_PATH
      displayName: 'Setup CI_PYTHON_PATH for extension'
      condition: and(succeeded(), eq(variables['agent.os'], 'Windows_NT'))

    # Conda
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: Add conda to PATH
      condition: and(succeeded(), not(eq(variables['agent.os'], 'Windows_NT')))

    - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
      displayName: Add conda to PATH
      condition: and(succeeded(), eq(variables['agent.os'], 'Windows_NT'))

    # Ensure reports folder exists.
    - bash: mkdir -p './.vscode test/reports'
      workingDirectory: $(Build.SourcesDirectory)/uitests
      displayName: 'Create Reports folder'
      condition: succeeded()

    # Skip @skip tagged tests
    # Always dump to a text file (easier than scrolling and downloading the logs seprately).
    # This way all logs are part of the artificat for each test.
    # Passing CI_PYTHON_PATH on windows sucks, as `\` needs to be escaped. Just use env variable.
    # node ./out/index.js test --verbose=true --channel=$(VSCodeChannel) --pythonPath=$(CI_PYTHON_PATH) -- --tags='$(Tags) and not @skip' --exit | tee './.vscode test/reports/log.log'
    # Don't use `npm run test` (we need the exit code to propagage all the way up).
    - bash: node ./out/index.js test --verbose=$(VERBOSE) --channel=$(VSCodeChannel) -- --tags='$(Tags) and not @skip'
      workingDirectory: $(Build.SourcesDirectory)/uitests
      env:
          DISPLAY: :10
          AgentJobName: $(Agent.JobName)
          VSCODE_CHANNEL: $(VSCodeChannel)
          CI_PYTHON_PATH: $(CI_PYTHON_PATH)
          PYTHON_VERSION: $(PythonVersion)
          VERBOSE: $(system.debug)
      displayName: 'Run Tests'
      condition: succeeded()

    - task: CopyFiles@2
      inputs:
          sourceFolder: $(Build.SourcesDirectory)/uitests
          contents: '.vscode test/reports/**'
          targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: 'Copy Reports'
      condition: always()

    - task: CopyFiles@2
      inputs:
          sourceFolder: $(Build.SourcesDirectory)/uitests
          contents: '.vscode test/screenshots/**'
          targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: 'Copy Screenshots'
      condition: always()

    - task: CopyFiles@2
      inputs:
          sourceFolder: $(Build.SourcesDirectory)/uitests
          contents: '.vscode test/logs/**'
          targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: 'Copy Extension Logs'
      condition: always()

    - task: CopyFiles@2
      inputs:
          sourceFolder: $(Build.SourcesDirectory)/uitests
          contents: '.vscode test/user/logs/**'
          targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: 'Copy VSC Logs'
      condition: always()

    - task: PublishBuildArtifacts@1
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: $(Agent.JobName)
      displayName: 'Upload Reports'
      condition: always()

    - task: PublishTestResults@2
      displayName: 'TestResults'
      inputs:
          testRunTitle: $(Agent.JobName)
          testRunner: JUnit
          testResultsFiles: '$(Build.SourcesDirectory)/uitests/.vscode test/reports/*.xml'
      condition: always()
