name: 'Build VSIX'
description: "Build the extension's VSIX"

inputs:
  node_version:
    description: 'Version of Node to install'
    required: true
  vsix_name:
    description: 'Name to give the final VSIX'
    required: true
  artifact_name:
    description: 'Name to give the artifact containing the VSIX'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Install Node
      uses: actions/setup-node@v2
      with:
        node-version: ${{ inputs.node_version }}

    - uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-build-vsix-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-build-vsix-

    # Jedi LS depends on dataclasses which is not in the stdlib in Python 3.6.
    - name: Use Python 3.6 for JediLSP
      uses: actions/setup-python@v2
      with:
        python-version: 3.6

    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-build-vsix-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-build-vsix-

    - name: Upgrade Pip
      run: python -m pip install -U pip
      shell: bash

    # For faster/better builds of sdists.
    - name: Install build pre-requisite
      run: python -m pip install wheel
      shell: bash

    - name: Install python dependencies
      run: python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
      shell: bash

    - name: Install debugpy
      run: |
        python -m pip --disable-pip-version-check install -r build/debugger-install-requirements.txt
        python ./pythonFiles/install_debugpy.py
      shell: bash

    - name: Install Jedi LSP
      run: |
        python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/jedilsp --no-cache-dir --implementation py --platform any --abi none --no-deps --only-binary :all: --upgrade -r jedils_requirements.txt
      shell: bash

    - name: Run npm ci
      run: npm ci --prefer-offline
      shell: bash

    # Use the GITHUB_RUN_ID environment variable to update the build number.
    # GITHUB_RUN_ID is a unique number for each run within a repository.
    # This number does not change if you re-run the workflow run.
    - name: Update extension build number
      run: npm run updateBuildNumber -- --buildNumber $GITHUB_RUN_ID
      shell: bash

    - name: Update optional extension dependencies
      run: npm run addExtensionPackDependencies
      shell: bash

    - name: Build VSIX
      run: npm run package
      shell: bash

    - name: Rename VSIX
      # Move to a temp name in case the specified name happens to match the default name.
      run: mv ms-python-insiders.vsix ms-python-temp.vsix && mv ms-python-temp.vsix ${{ inputs.vsix_name }}
      shell: bash

    - name: Upload VSIX
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ inputs.vsix_name }}
        if-no-files-found: error
        retention-days: 7
