[
    {
        "payload": {
            "type": "loc_init",
            "payload": "{}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_settings",
            "payload": "{\"allowImportFromNotebook\":true,\"jupyterLaunchTimeout\":20000,\"jupyterLaunchRetries\":3,\"enabled\":true,\"jupyterServerURI\":\"local\",\"notebookFileRoot\":\"${fileDirname}\",\"changeDirOnImportExport\":false,\"useDefaultConfigForJupyter\":true,\"jupyterInterruptTimeout\":10000,\"searchForJupyter\":true,\"showCellInputCode\":true,\"collapseCellInputCodeByDefault\":true,\"allowInput\":true,\"maxOutputSize\":400,\"errorBackgroundColor\":\"#FFFFFF\",\"sendSelectionToInteractiveWindow\":false,\"codeRegularExpression\":\"^(#\\\\s*%%|#\\\\s*\\\\<codecell\\\\>|#\\\\s*In\\\\[\\\\d*?\\\\]|#\\\\s*In\\\\[ \\\\])\",\"markdownRegularExpression\":\"^(#\\\\s*%%\\\\s*\\\\[markdown\\\\]|#\\\\s*\\\\<markdowncell\\\\>)\",\"variableExplorerExclude\":\"module;function;builtin_function_or_method\",\"liveShareConnectionTimeout\":100,\"enablePlotViewer\":true,\"stopOnFirstLineWhileDebugging\":true,\"stopOnError\":true,\"addGotoCodeLenses\":true,\"enableCellCodeLens\":true,\"runStartupCommands\":\"\",\"debugJustMyCode\":true,\"variableQueries\":[],\"jupyterCommandLineArguments\":[],\"disableJupyterAutoStart\":true,\"extraSettings\":{\"editor\":{\"cursor\":\"line\",\"cursorBlink\":\"blink\",\"autoClosingBrackets\":\"languageDefined\",\"autoClosingQuotes\":\"languageDefined\",\"autoSurround\":\"languageDefined\",\"autoIndent\":false,\"fontLigatures\":false,\"scrollBeyondLastLine\":true,\"verticalScrollbarSize\":14,\"horizontalScrollbarSize\":10,\"fontSize\":14,\"fontFamily\":\"Consolas, 'Courier New', monospace\"},\"theme\":\"Default Light+\"},\"intellisenseOptions\":{\"quickSuggestions\":{\"other\":true,\"comments\":false,\"strings\":false},\"acceptSuggestionOnEnter\":\"on\",\"quickSuggestionsDelay\":10,\"suggestOnTriggerCharacters\":true,\"tabCompletion\":\"on\",\"suggestLocalityBonus\":true,\"suggestSelection\":\"recentlyUsed\",\"wordBasedSuggestions\":true,\"parameterHintsEnabled\":true}}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "loc_init",
            "payload": "{}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "load_all_cells",
            "payload": {
                "cells": [
                    {
                        "id": "NotebookImport#0",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {
                                "collapsed": true
                            },
                            "outputs": [],
                            "source": [
                                "a=1\n",
                                "a"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "b=2\n",
                                "b"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "c=3\n",
                                "c"
                            ]
                        }
                    }
                ]
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_settings",
            "payload": "{\"allowImportFromNotebook\":true,\"jupyterLaunchTimeout\":20000,\"jupyterLaunchRetries\":3,\"enabled\":true,\"jupyterServerURI\":\"local\",\"notebookFileRoot\":\"${fileDirname}\",\"changeDirOnImportExport\":false,\"useDefaultConfigForJupyter\":true,\"jupyterInterruptTimeout\":10000,\"searchForJupyter\":true,\"showCellInputCode\":true,\"collapseCellInputCodeByDefault\":true,\"allowInput\":true,\"maxOutputSize\":400,\"errorBackgroundColor\":\"#FFFFFF\",\"sendSelectionToInteractiveWindow\":false,\"codeRegularExpression\":\"^(#\\\\s*%%|#\\\\s*\\\\<codecell\\\\>|#\\\\s*In\\\\[\\\\d*?\\\\]|#\\\\s*In\\\\[ \\\\])\",\"markdownRegularExpression\":\"^(#\\\\s*%%\\\\s*\\\\[markdown\\\\]|#\\\\s*\\\\<markdowncell\\\\>)\",\"variableExplorerExclude\":\"module;function;builtin_function_or_method\",\"liveShareConnectionTimeout\":100,\"enablePlotViewer\":true,\"stopOnFirstLineWhileDebugging\":true,\"stopOnError\":true,\"addGotoCodeLenses\":true,\"enableCellCodeLens\":true,\"runStartupCommands\":\"\",\"debugJustMyCode\":true,\"variableQueries\":[],\"jupyterCommandLineArguments\":[],\"disableJupyterAutoStart\":true,\"extraSettings\":{\"editor\":{\"cursor\":\"line\",\"cursorBlink\":\"blink\",\"autoClosingBrackets\":\"languageDefined\",\"autoClosingQuotes\":\"languageDefined\",\"autoSurround\":\"languageDefined\",\"autoIndent\":false,\"fontLigatures\":false,\"scrollBeyondLastLine\":true,\"verticalScrollbarSize\":14,\"horizontalScrollbarSize\":10,\"fontSize\":14,\"fontFamily\":\"Consolas, 'Courier New', monospace\"},\"theme\":\"Default Light+\"},\"intellisenseOptions\":{\"quickSuggestions\":{\"other\":true,\"comments\":false,\"strings\":false},\"acceptSuggestionOnEnter\":\"on\",\"quickSuggestionsDelay\":10,\"suggestOnTriggerCharacters\":true,\"tabCompletion\":\"on\",\"suggestLocalityBonus\":true,\"suggestSelection\":\"recentlyUsed\",\"wordBasedSuggestions\":true,\"parameterHintsEnabled\":true}}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "IPyWidgets_registerCommTarget",
            "payload": "jupyter.widget"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "started"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "loc_init",
            "payload": "{}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "load_all_cells",
            "payload": {
                "cells": [
                    {
                        "id": "NotebookImport#0",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {
                                "collapsed": true
                            },
                            "outputs": [],
                            "source": [
                                "a=1\n",
                                "a"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "b=2\n",
                                "b"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "c=3\n",
                                "c"
                            ]
                        }
                    }
                ]
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "update_settings",
            "payload": "{\"allowImportFromNotebook\":true,\"jupyterLaunchTimeout\":20000,\"jupyterLaunchRetries\":3,\"enabled\":true,\"jupyterServerURI\":\"local\",\"notebookFileRoot\":\"${fileDirname}\",\"changeDirOnImportExport\":false,\"useDefaultConfigForJupyter\":true,\"jupyterInterruptTimeout\":10000,\"searchForJupyter\":true,\"showCellInputCode\":true,\"collapseCellInputCodeByDefault\":true,\"allowInput\":true,\"maxOutputSize\":400,\"errorBackgroundColor\":\"#FFFFFF\",\"sendSelectionToInteractiveWindow\":false,\"codeRegularExpression\":\"^(#\\\\s*%%|#\\\\s*\\\\<codecell\\\\>|#\\\\s*In\\\\[\\\\d*?\\\\]|#\\\\s*In\\\\[ \\\\])\",\"markdownRegularExpression\":\"^(#\\\\s*%%\\\\s*\\\\[markdown\\\\]|#\\\\s*\\\\<markdowncell\\\\>)\",\"variableExplorerExclude\":\"module;function;builtin_function_or_method\",\"liveShareConnectionTimeout\":100,\"enablePlotViewer\":true,\"stopOnFirstLineWhileDebugging\":true,\"stopOnError\":true,\"addGotoCodeLenses\":true,\"enableCellCodeLens\":true,\"runStartupCommands\":\"\",\"debugJustMyCode\":true,\"variableQueries\":[],\"jupyterCommandLineArguments\":[],\"disableJupyterAutoStart\":true,\"extraSettings\":{\"editor\":{\"cursor\":\"line\",\"cursorBlink\":\"blink\",\"autoClosingBrackets\":\"languageDefined\",\"autoClosingQuotes\":\"languageDefined\",\"autoSurround\":\"languageDefined\",\"autoIndent\":false,\"fontLigatures\":false,\"scrollBeyondLastLine\":true,\"verticalScrollbarSize\":14,\"horizontalScrollbarSize\":10,\"fontSize\":14,\"fontFamily\":\"Consolas, 'Courier New', monospace\"},\"theme\":\"Default Light+\"},\"intellisenseOptions\":{\"quickSuggestions\":{\"other\":true,\"comments\":false,\"strings\":false},\"acceptSuggestionOnEnter\":\"on\",\"quickSuggestionsDelay\":10,\"suggestOnTriggerCharacters\":true,\"tabCompletion\":\"on\",\"suggestLocalityBonus\":true,\"suggestSelection\":\"recentlyUsed\",\"wordBasedSuggestions\":true,\"parameterHintsEnabled\":true}}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "load_onigasm_assembly_request"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "load_tmlanguage_request"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "load_onigasm_assembly_response",
            "payload": "<BLAH>"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "load_tmlanguage_response",
            "payload": "{\n\t\"information_for_contributors\": [\n\t\t\"This file has been converted from https://github.com/MagicStack/MagicPython/blob/master/grammars/MagicPython.tmLanguage\",\n\t\t\"If you want to provide a fix or improvement, please create a pull request against the original repository.\",\n\t\t\"Once accepted there, we are happy to receive an update request.\"\n\t],\n\t\"version\": \"https://github.com/MagicStack/MagicPython/commit/8ff35b3e5fcde471fae62a57ea1ae1c7cd34c9fc\",\n\t\"name\": \"MagicPython\",\n\t\"scopeName\": \"source.python\",\n\t\"patterns\": [\n\t\t{\n\t\t\t\"include\": \"#statement\"\n\t\t},\n\t\t{\n\t\t\t\"include\": \"#expression\"\n\t\t}\n\t],\n\t\"repository\": {\n\t\t\"impossible\": {\n\t\t\t\"comment\": \"This is a special rule that should be used where no match is desired. It is not a good idea to match something like '1{0}' because in some cases that can result in infinite loops in token generation. So the rule instead matches and impossible expression to allow a match to fail and move to the next token.\",\n\t\t\t\"match\": \"$.^\"\n\t\t},\n\t\t\"statement\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#import\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#class-declaration\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#function-declaration\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#statement-keyword\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#assignment-operator\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#decorator\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#docstring-statement\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#semicolon\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"semicolon\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"invalid.deprecated.semicolon.python\",\n\t\t\t\t\t\"match\": \"\\\\;$\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"comments\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"comment.line.number-sign.python\",\n\t\t\t\t\t\"contentName\": \"meta.typehint.comment.python\",\n\t\t\t\t\t\"begin\": \"(?x)\\n  (?:\\n    \\\\# \\\\s* (type:)\\n    \\\\s*+ (?# we want `\\\\s*+` which is possessive quantifier since\\n             we do not actually want to backtrack when matching\\n             whitespace here)\\n    (?! $ | \\\\#)\\n  )\\n\",\n\t\t\t\t\t\"end\": \"(?:$|(?=\\\\#))\",\n\t\t\t\t\t\"beginCaptures\": {\n\t\t\t\t\t\t\"0\": {\n\t\t\t\t\t\t\t\"name\": \"meta.typehint.comment.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"comment.typehint.directive.notation.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"comment.typehint.ignore.notation.python\",\n\t\t\t\t\t\t\t\"match\": \"(?x)\\n  \\\\G ignore\\n  (?= \\\\s* (?: $ | \\\\#))\\n\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"comment.typehint.type.notation.python\",\n\t\t\t\t\t\t\t\"match\": \"(?x)\\n  (?<!\\\\.)\\\\b(\\n    bool | bytes | float | int | object | str\\n    | List | Dict | Iterable | Sequence | Set\\n    | FrozenSet | Callable | Union | Tuple\\n    | Any | None\\n  )\\\\b\\n\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"comment.typehint.punctuation.notation.python\",\n\t\t\t\t\t\t\t\"match\": \"([\\\\[\\\\]\\\\(\\\\),\\\\.\\\\=\\\\*]|(->))\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"comment.typehint.variable.notation.python\",\n\t\t\t\t\t\t\t\"match\": \"([[:alpha:]_]\\\\w*)\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-base\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"docstring-statement\": {\n\t\t\t\"begin\": \"^(?=\\\\s*[rR]?(\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\"|\\\\'|\\\\\\\"))\",\n\t\t\t\"comment\": \"the string either terminates correctly or by the beginning of a new line (this is for single line docstrings that aren't terminated) AND it's not followed by another docstring\",\n\t\t\t\"end\": \"((?<=\\\\1)|^)(?!\\\\s*[rR]?(\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\"|\\\\'|\\\\\\\"))\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#docstring\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"docstring\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"string.quoted.docstring.multi.python\",\n\t\t\t\t\t\"begin\": \"(\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\")\",\n\t\t\t\t\t\"end\": \"(\\\\1)\",\n\t\t\t\t\t\"beginCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"endCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#docstring-prompt\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#codetags\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#docstring-guts-unicode\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"string.quoted.docstring.raw.multi.python\",\n\t\t\t\t\t\"begin\": \"([rR])(\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\")\",\n\t\t\t\t\t\"end\": \"(\\\\2)\",\n\t\t\t\t\t\"beginCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"endCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#string-consume-escape\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#docstring-prompt\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#codetags\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"string.quoted.docstring.single.python\",\n\t\t\t\t\t\"begin\": \"(\\\\'|\\\\\\\")\",\n\t\t\t\t\t\"end\": \"(\\\\1)|(\\\\n)\",\n\t\t\t\t\t\"beginCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"endCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#codetags\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#docstring-guts-unicode\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"string.quoted.docstring.raw.single.python\",\n\t\t\t\t\t\"begin\": \"([rR])(\\\\'|\\\\\\\")\",\n\t\t\t\t\t\"end\": \"(\\\\2)|(\\\\n)\",\n\t\t\t\t\t\"beginCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"endCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#string-consume-escape\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#codetags\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"docstring-guts-unicode\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#escape-sequence-unicode\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#escape-sequence\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-line-continuation\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"docstring-prompt\": {\n\t\t\t\"match\": \"(?x)\\n  (?:\\n    (?:^|\\\\G) \\\\s* (?# '\\\\G' is necessary for ST)\\n    ((?:>>>|\\\\.\\\\.\\\\.) \\\\s) (?=\\\\s*\\\\S)\\n  )\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.control.flow.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"statement-keyword\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.function.python\",\n\t\t\t\t\t\"match\": \"\\\\b((async\\\\s+)?\\\\s*def)\\\\b\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"keyword.control.flow.python\",\n\t\t\t\t\t\"comment\": \"if `as` is eventually followed by `:` or line continuation\\nit's probably control flow like:\\n    with foo as bar, \\\\\\n         Foo as Bar:\\n      try:\\n        do_stuff()\\n      except Exception as e:\\n        pass\\n\",\n\t\t\t\t\t\"match\": \"\\\\b(?<!\\\\.)as\\\\b(?=.*[:\\\\\\\\])\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"keyword.control.import.python\",\n\t\t\t\t\t\"comment\": \"other legal use of `as` is in an import\",\n\t\t\t\t\t\"match\": \"\\\\b(?<!\\\\.)as\\\\b\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"keyword.control.flow.python\",\n\t\t\t\t\t\"match\": \"(?x)\\n  \\\\b(?<!\\\\.)(\\n    async | continue | del | assert | break | finally | for\\n    | from | elif | else | if | except | pass | raise\\n    | return | try | while | with\\n  )\\\\b\\n\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.modifier.declaration.python\",\n\t\t\t\t\t\"match\": \"(?x)\\n  \\\\b(?<!\\\\.)(\\n    global | nonlocal\\n  )\\\\b\\n\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.class.python\",\n\t\t\t\t\t\"match\": \"\\\\b(?<!\\\\.)(class)\\\\b\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"expression-bare\": {\n\t\t\t\"comment\": \"valid Python expressions w/o comments and line continuation\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#backticks\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#illegal-anno\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#literal\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#lambda\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#illegal-operator\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#operator\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#curly-braces\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#item-access\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#list\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#round-braces\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#function-call\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#builtin-functions\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#builtin-types\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#builtin-exceptions\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#magic-names\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#special-names\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#illegal-names\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#special-variables\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#ellipsis\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#punctuation\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#line-continuation\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"expression-base\": {\n\t\t\t\"comment\": \"valid Python expressions with comments and line continuation\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#expression-bare\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#line-continuation\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"expression\": {\n\t\t\t\"comment\": \"All valid Python expressions\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#expression-base\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#member-access\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"comment\": \"Tokenize identifiers to help linters\",\n\t\t\t\t\t\"match\": \"(?x) \\\\b ([[:alpha:]_]\\\\w*) \\\\b\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"member-access\": {\n\t\t\t\"begin\": \"(\\\\.)\\\\s*(?!\\\\.)\",\n\t\t\t\"end\": \"(?x)\\n  # stop when you've just read non-whitespace followed by non-word\\n  # i.e. when finished reading an identifier or function call\\n  (?<=\\\\S)(?=\\\\W) |\\n  # stop when seeing the start of something that's not a word,\\n  # i.e. when seeing a non-identifier\\n  (^|(?<=\\\\s))(?=[^\\\\\\\\\\\\w\\\\s]) |\\n  $\\n\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.separator.period.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#function-call\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#member-access-base\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"member-access-base\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#magic-names\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#illegal-names\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#illegal-object-name\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#special-names\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#line-continuation\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#item-access\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"special-names\": {\n\t\t\t\"name\": \"constant.other.caps.python\",\n\t\t\t\"match\": \"(?x)\\n  \\\\b\\n    # we want to see \\\"enough\\\", meaning 2 or more upper-case\\n    # letters in the beginning of the constant\\n    #\\n    # for more details refer to:\\n    #   https://github.com/MagicStack/MagicPython/issues/42\\n    (\\n      _* [[:upper:]] [_\\\\d]* [[:upper:]]\\n    )\\n    [[:upper:]\\\\d]* (_\\\\w*)?\\n  \\\\b\\n\"\n\t\t},\n\t\t\"curly-braces\": {\n\t\t\t\"begin\": \"\\\\{\",\n\t\t\t\"end\": \"\\\\}\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.dict.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.dict.end.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"punctuation.separator.dict.python\",\n\t\t\t\t\t\"match\": \":\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"list\": {\n\t\t\t\"begin\": \"\\\\[\",\n\t\t\t\"end\": \"\\\\]\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.list.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.list.end.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"round-braces\": {\n\t\t\t\"begin\": \"\\\\(\",\n\t\t\t\"end\": \"\\\\)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.end.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"line-continuation\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"(\\\\\\\\)\\\\s*(\\\\S.*$\\\\n?)\",\n\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.separator.continuation.line.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"invalid.illegal.line.continuation.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"begin\": \"(\\\\\\\\)\\\\s*$\\\\n?\",\n\t\t\t\t\t\"end\": \"(?x)\\n  (?=^\\\\s*$)\\n  |\\n  (?! (\\\\s* [rR]? (\\\\'\\\\'\\\\'|\\\\\\\"\\\\\\\"\\\\\\\"|\\\\'|\\\\\\\"))\\n      |\\n      (\\\\G $)  (?# '\\\\G' is necessary for ST)\\n  )\\n\",\n\t\t\t\t\t\"beginCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.separator.continuation.line.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#regexp\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"assignment-operator\": {\n\t\t\t\"name\": \"keyword.operator.assignment.python\",\n\t\t\t\"match\": \"(?x)\\n     <<= | >>= | //= | \\\\*\\\\*=\\n    | \\\\+= | -= | /= | @=\\n    | \\\\*= | %= | ~= | \\\\^= | &= | \\\\|=\\n    | =(?!=)\\n\"\n\t\t},\n\t\t\"operator\": {\n\t\t\t\"match\": \"(?x)\\n    \\\\b(?<!\\\\.)\\n      (?:\\n        (and | or | not | in | is)                         (?# 1)\\n        |\\n        (for | if | else | await | (?:yield(?:\\\\s+from)?))  (?# 2)\\n      )\\n    (?!\\\\s*:)\\\\b\\n\\n    | (<< | >> | & | \\\\| | \\\\^ | ~)                          (?# 3)\\n\\n    | (\\\\*\\\\* | \\\\* | \\\\+ | - | % | // | / | @)                (?# 4)\\n\\n    | (!= | == | >= | <= | < | >)                          (?# 5)\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.logical.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"keyword.control.flow.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"keyword.operator.bitwise.python\"\n\t\t\t\t},\n\t\t\t\t\"4\": {\n\t\t\t\t\t\"name\": \"keyword.operator.arithmetic.python\"\n\t\t\t\t},\n\t\t\t\t\"5\": {\n\t\t\t\t\t\"name\": \"keyword.operator.comparison.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"punctuation\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"punctuation.separator.colon.python\",\n\t\t\t\t\t\"match\": \":\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"punctuation.separator.element.python\",\n\t\t\t\t\t\"match\": \",\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"literal\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"constant.language.python\",\n\t\t\t\t\t\"match\": \"\\\\b(True|False|None|NotImplemented|Ellipsis)\\\\b\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#number\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"number\": {\n\t\t\t\"name\": \"constant.numeric.python\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#number-float\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#number-dec\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#number-hex\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#number-oct\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#number-bin\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#number-long\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"invalid.illegal.name.python\",\n\t\t\t\t\t\"match\": \"\\\\b[0-9]+\\\\w+\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"number-float\": {\n\t\t\t\"name\": \"constant.numeric.float.python\",\n\t\t\t\"match\": \"(?x)\\n  (?<! \\\\w)(?:\\n    (?:\\n      \\\\.[0-9](?: _?[0-9] )*\\n      |\\n      [0-9](?: _?[0-9] )* \\\\. [0-9](?: _?[0-9] )*\\n      |\\n      [0-9](?: _?[0-9] )* \\\\.\\n    ) (?: [eE][+-]?[0-9](?: _?[0-9] )* )?\\n    |\\n    [0-9](?: _?[0-9] )* (?: [eE][+-]?[0-9](?: _?[0-9] )* )\\n  )([jJ])?\\\\b\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"storage.type.imaginary.number.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"number-dec\": {\n\t\t\t\"name\": \"constant.numeric.dec.python\",\n\t\t\t\"match\": \"(?x)\\n  (?<![\\\\w\\\\.])(?:\\n      [1-9](?: _?[0-9] )*\\n      |\\n      0+\\n      |\\n      [0-9](?: _?[0-9] )* ([jJ])\\n      |\\n      0 ([0-9]+)(?![eE\\\\.])\\n  )\\\\b\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"storage.type.imaginary.number.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.dec.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.dec.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"number-hex\": {\n\t\t\t\"name\": \"constant.numeric.hex.python\",\n\t\t\t\"match\": \"(?x)\\n  (?<![\\\\w\\\\.])\\n    (0[xX]) (_?[0-9a-fA-F])+\\n  \\\\b\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"storage.type.number.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"number-oct\": {\n\t\t\t\"name\": \"constant.numeric.oct.python\",\n\t\t\t\"match\": \"(?x)\\n  (?<![\\\\w\\\\.])\\n    (0[oO]) (_?[0-7])+\\n  \\\\b\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"storage.type.number.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"number-bin\": {\n\t\t\t\"name\": \"constant.numeric.bin.python\",\n\t\t\t\"match\": \"(?x)\\n  (?<![\\\\w\\\\.])\\n    (0[bB]) (_?[01])+\\n  \\\\b\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"storage.type.number.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"number-long\": {\n\t\t\t\"name\": \"constant.numeric.bin.python\",\n\t\t\t\"comment\": \"this is to support python2 syntax for long ints\",\n\t\t\t\"match\": \"(?x)\\n  (?<![\\\\w\\\\.])\\n    ([1-9][0-9]* | 0) ([lL])\\n  \\\\b\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"storage.type.number.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"regexp\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-single-three-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-double-three-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-single-one-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-double-one-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fregexp-single-three-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fregexp-double-three-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fregexp-single-one-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fregexp-double-one-line\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-quoted-multi-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-quoted-single-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-bin-quoted-multi-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-bin-quoted-single-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-raw-quoted-multi-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-raw-quoted-single-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-raw-bin-quoted-multi-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-raw-bin-quoted-single-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-fnorm-quoted-multi-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-fnorm-quoted-single-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-normf-quoted-multi-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-normf-quoted-single-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-raw-quoted-multi-line\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-raw-quoted-single-line\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-unicode-guts\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#escape-sequence-unicode\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-entity\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-brace-formatting\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-consume-escape\": {\n\t\t\t\"match\": \"\\\\\\\\['\\\"\\\\n\\\\\\\\]\"\n\t\t},\n\t\t\"string-raw-guts\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-consume-escape\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-formatting\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-brace-formatting\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-raw-bin-guts\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-consume-escape\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-formatting\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-entity\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#escape-sequence\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-line-continuation\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-formatting\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-guts\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#escape-sequence-unicode\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#escape-sequence\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-line-continuation\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-formatting\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-raw-guts\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-consume-escape\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-formatting\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-illegal-single-brace\": {\n\t\t\t\"comment\": \"it is illegal to have a multiline brace inside a single-line string\",\n\t\t\t\"begin\": \"(\\\\{)(?=[^\\\\n}]*$\\\\n?)\",\n\t\t\t\"end\": \"(\\\\})|(?=\\\\n)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"constant.character.format.placeholder.other.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"constant.character.format.placeholder.other.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-terminator-single\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#f-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-illegal-multi-brace\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#impossible\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"f-expression\": {\n\t\t\t\"comment\": \"All valid Python expressions, except comments and line cont\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#expression-bare\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#member-access\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"comment\": \"Tokenize identifiers to help linters\",\n\t\t\t\t\t\"match\": \"(?x) \\\\b ([[:alpha:]_]\\\\w*) \\\\b\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"escape-sequence-unicode\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"constant.character.escape.python\",\n\t\t\t\t\t\"match\": \"(?x)\\n  \\\\\\\\ (\\n        u[0-9A-Fa-f]{4}\\n        | U[0-9A-Fa-f]{8}\\n        | N\\\\{[\\\\w\\\\s]+?\\\\}\\n     )\\n\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"escape-sequence\": {\n\t\t\t\"name\": \"constant.character.escape.python\",\n\t\t\t\"match\": \"(?x)\\n  \\\\\\\\ (\\n        x[0-9A-Fa-f]{2}\\n        | [0-7]{1,3}\\n        | [\\\\\\\\\\\"'abfnrtv]\\n     )\\n\"\n\t\t},\n\t\t\"string-line-continuation\": {\n\t\t\t\"name\": \"constant.language.python\",\n\t\t\t\"match\": \"\\\\\\\\$\"\n\t\t},\n\t\t\"string-formatting\": {\n\t\t\t\"name\": \"meta.format.percent.python\",\n\t\t\t\"match\": \"(?x)\\n  (\\n    % (\\\\([\\\\w\\\\s]*\\\\))?\\n      [-+#0 ]*\\n      (\\\\d+|\\\\*)? (\\\\.(\\\\d+|\\\\*))?\\n      ([hlL])?\\n      [diouxXeEfFgGcrsab%]\\n  )\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"constant.character.format.placeholder.other.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"string-brace-formatting\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"meta.format.brace.python\",\n\t\t\t\t\t\"match\": \"(?x)\\n  (\\n    {{ | }}\\n    | (?:\\n      {\\n        \\\\w* (\\\\.[[:alpha:]_]\\\\w* | \\\\[[^\\\\]'\\\"]+\\\\])*\\n        (![rsa])?\\n        ( : \\\\w? [<>=^]? [-+ ]? \\\\#?\\n          \\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )?\\n      })\\n  )\\n\",\n\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"constant.character.format.placeholder.other.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"3\": {\n\t\t\t\t\t\t\t\"name\": \"storage.type.format.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"4\": {\n\t\t\t\t\t\t\t\"name\": \"storage.type.format.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"meta.format.brace.python\",\n\t\t\t\t\t\"match\": \"(?x)\\n  (\\n    {\\n      \\\\w* (\\\\.[[:alpha:]_]\\\\w* | \\\\[[^\\\\]'\\\"]+\\\\])*\\n      (![rsa])?\\n      (:)\\n        [^'\\\"{}\\\\n]* (?:\\n          \\\\{ [^'\\\"}\\\\n]*? \\\\} [^'\\\"{}\\\\n]*\\n        )*\\n    }\\n  )\\n\",\n\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"constant.character.format.placeholder.other.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"3\": {\n\t\t\t\t\t\t\t\"name\": \"storage.type.format.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"4\": {\n\t\t\t\t\t\t\t\"name\": \"storage.type.format.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-formatting\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-formatting-braces\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-formatting-singe-brace\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-formatting-singe-brace\": {\n\t\t\t\"name\": \"invalid.illegal.brace.python\",\n\t\t\t\"match\": \"(}(?!}))\"\n\t\t},\n\t\t\"import\": {\n\t\t\t\"comment\": \"Import statements used to correctly mark `from`, `import`, and `as`\\n\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"begin\": \"\\\\b(?<!\\\\.)(from)\\\\b(?=.+import)\",\n\t\t\t\t\t\"end\": \"$|(?=import)\",\n\t\t\t\t\t\"beginCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"keyword.control.import.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"punctuation.separator.period.python\",\n\t\t\t\t\t\t\t\"match\": \"\\\\.+\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#expression\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"begin\": \"\\\\b(?<!\\\\.)(import)\\\\b\",\n\t\t\t\t\t\"end\": \"$\",\n\t\t\t\t\t\"beginCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"keyword.control.import.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"keyword.control.import.python\",\n\t\t\t\t\t\t\t\"match\": \"\\\\b(?<!\\\\.)as\\\\b\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#expression\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"class-declaration\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"meta.class.python\",\n\t\t\t\t\t\"begin\": \"(?x)\\n  \\\\s*(class)\\\\s+\\n    (?=\\n      [[:alpha:]_]\\\\w* \\\\s* (:|\\\\()\\n    )\\n\",\n\t\t\t\t\t\"end\": \"(:)\",\n\t\t\t\t\t\"beginCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"storage.type.class.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"endCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.section.class.begin.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#class-name\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#class-inheritance\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"class-name\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#illegal-object-name\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#builtin-possible-callables\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"entity.name.type.class.python\",\n\t\t\t\t\t\"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"class-inheritance\": {\n\t\t\t\"name\": \"meta.class.inheritance.python\",\n\t\t\t\"begin\": \"(\\\\()\",\n\t\t\t\"end\": \"(\\\\))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.inheritance.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.inheritance.end.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"keyword.operator.unpacking.arguments.python\",\n\t\t\t\t\t\"match\": \"(\\\\*\\\\*|\\\\*)\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"punctuation.separator.inheritance.python\",\n\t\t\t\t\t\"match\": \",\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"keyword.operator.assignment.python\",\n\t\t\t\t\t\"match\": \"=(?!=)\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"support.type.metaclass.python\",\n\t\t\t\t\t\"match\": \"\\\\bmetaclass\\\\b\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#illegal-names\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#class-kwarg\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#call-wrapper-inheritance\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#expression-base\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#member-access-class\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#inheritance-identifier\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"class-kwarg\": {\n\t\t\t\"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\s*(=)(?!=)\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"entity.other.inherited-class.python variable.parameter.class.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"keyword.operator.assignment.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"inheritance-identifier\": {\n\t\t\t\"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"entity.other.inherited-class.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"member-access-class\": {\n\t\t\t\"begin\": \"(\\\\.)\\\\s*(?!\\\\.)\",\n\t\t\t\"end\": \"(?<=\\\\S)(?=\\\\W)|$\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.separator.period.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#call-wrapper-inheritance\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#member-access-base\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#inheritance-identifier\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"lambda\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"((?<=\\\\.)lambda|lambda(?=\\\\s*[\\\\.=]))\",\n\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"keyword.control.flow.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"\\\\b(lambda)\\\\s*?(?=[,\\\\n]|$)\",\n\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"storage.type.function.lambda.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"meta.lambda-function.python\",\n\t\t\t\t\t\"begin\": \"(?x)\\n  \\\\b (lambda) \\\\b\\n\",\n\t\t\t\t\t\"end\": \"(:)|(\\\\n)\",\n\t\t\t\t\t\"beginCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"storage.type.function.lambda.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"endCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.section.function.lambda.begin.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"contentName\": \"meta.function.lambda.parameters.python\",\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"keyword.operator.unpacking.parameter.python\",\n\t\t\t\t\t\t\t\"match\": \"(\\\\*\\\\*|\\\\*)\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#lambda-nested-incomplete\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#illegal-names\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"match\": \"([[:alpha:]_]\\\\w*)\\\\s*(?:(,)|(?=:|$))\",\n\t\t\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\t\t\"name\": \"variable.parameter.function.language.python\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\t\t\"name\": \"punctuation.separator.parameters.python\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#comments\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#backticks\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#illegal-anno\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#lambda-parameter-with-default\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#line-continuation\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#illegal-operator\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"lambda-incomplete\": {\n\t\t\t\"name\": \"storage.type.function.lambda.python\",\n\t\t\t\"match\": \"\\\\blambda(?=\\\\s*[,)])\"\n\t\t},\n\t\t\"lambda-nested-incomplete\": {\n\t\t\t\"name\": \"storage.type.function.lambda.python\",\n\t\t\t\"match\": \"\\\\blambda(?=\\\\s*[:,)])\"\n\t\t},\n\t\t\"lambda-parameter-with-default\": {\n\t\t\t\"begin\": \"(?x)\\n  \\\\b\\n  ([[:alpha:]_]\\\\w*) \\\\s* (=)\\n\",\n\t\t\t\"end\": \"(,)|(?=:|$)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"variable.parameter.function.language.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"keyword.operator.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.separator.parameters.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"function-declaration\": {\n\t\t\t\"name\": \"meta.function.python\",\n\t\t\t\"begin\": \"(?x)\\n  \\\\s*\\n  (?:\\\\b(async) \\\\s+)? \\\\b(def)\\\\s+\\n    (?=\\n      [[:alpha:]_][[:word:]]* \\\\s* \\\\(\\n    )\\n\",\n\t\t\t\"end\": \"(:|(?=[#'\\\"\\\\n]))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"storage.type.function.async.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"storage.type.function.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.section.function.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#function-def-name\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#parameters\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#line-continuation\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#return-annotation\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"function-def-name\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#illegal-object-name\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#builtin-possible-callables\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"entity.name.function.python\",\n\t\t\t\t\t\"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"parameters\": {\n\t\t\t\"name\": \"meta.function.parameters.python\",\n\t\t\t\"begin\": \"(\\\\()\",\n\t\t\t\"end\": \"(\\\\))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.parameters.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.parameters.end.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"keyword.operator.unpacking.parameter.python\",\n\t\t\t\t\t\"match\": \"(\\\\*\\\\*|\\\\*)\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#lambda-incomplete\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#illegal-names\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#illegal-object-name\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#parameter-special\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"(?x)\\n  ([[:alpha:]_]\\\\w*)\\n    \\\\s* (?: (,) | (?=[)#\\\\n=]))\\n\",\n\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"variable.parameter.function.language.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.separator.parameters.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#loose-default\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#annotated-parameter\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"parameter-special\": {\n\t\t\t\"match\": \"(?x)\\n  \\\\b ((self)|(cls)) \\\\b \\\\s*(?:(,)|(?=\\\\)))\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"variable.parameter.function.language.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"variable.parameter.function.language.special.self.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"variable.parameter.function.language.special.cls.python\"\n\t\t\t\t},\n\t\t\t\t\"4\": {\n\t\t\t\t\t\"name\": \"punctuation.separator.parameters.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"loose-default\": {\n\t\t\t\"begin\": \"(=)\",\n\t\t\t\"end\": \"(,)|(?=\\\\))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.separator.parameters.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"annotated-parameter\": {\n\t\t\t\"begin\": \"(?x)\\n  \\\\b\\n  ([[:alpha:]_]\\\\w*) \\\\s* (:)\\n\",\n\t\t\t\"end\": \"(,)|(?=\\\\))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"variable.parameter.function.language.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"punctuation.separator.annotation.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.separator.parameters.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"keyword.operator.assignment.python\",\n\t\t\t\t\t\"match\": \"=(?!=)\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"return-annotation\": {\n\t\t\t\"begin\": \"(->)\",\n\t\t\t\"end\": \"(?=:)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.separator.annotation.result.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"item-access\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"meta.item-access.python\",\n\t\t\t\t\t\"begin\": \"(?x)\\n  \\\\b(?=\\n    [[:alpha:]_]\\\\w* \\\\s* \\\\[\\n  )\\n\",\n\t\t\t\t\t\"end\": \"(\\\\])\",\n\t\t\t\t\t\"endCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.definition.arguments.end.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#item-name\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#item-index\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#expression\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"item-name\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#special-variables\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#builtin-functions\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#special-names\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"item-index\": {\n\t\t\t\"begin\": \"(\\\\[)\",\n\t\t\t\"end\": \"(?=\\\\])\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.arguments.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"contentName\": \"meta.item-access.arguments.python\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"punctuation.separator.slice.python\",\n\t\t\t\t\t\"match\": \":\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"decorator\": {\n\t\t\t\"name\": \"meta.function.decorator.python\",\n\t\t\t\"begin\": \"(?x)\\n  ^\\\\s*\\n  ((@)) \\\\s* (?=[[:alpha:]_]\\\\w*)\\n\",\n\t\t\t\"end\": \"(?x)\\n  ( \\\\) )\\n    # trailing whitespace and comments are legal\\n    (?: (.*?) (?=\\\\s*(?:\\\\#|$)) )\\n  | (?=\\\\n|\\\\#)\\n\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"entity.name.function.decorator.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.decorator.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.arguments.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.decorator.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#decorator-name\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#function-arguments\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"decorator-name\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#builtin-callables\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#illegal-object-name\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"entity.name.function.decorator.python\",\n\t\t\t\t\t\"match\": \"(?x)\\n  ([[:alpha:]_]\\\\w*) | (\\\\.)\\n\",\n\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.separator.period.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#line-continuation\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"invalid.illegal.decorator.python\",\n\t\t\t\t\t\"match\": \"(?x)\\n  \\\\s* ([^([:alpha:]\\\\s_\\\\.#\\\\\\\\] .*?) (?=\\\\#|$)\\n\",\n\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"invalid.illegal.decorator.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"call-wrapper-inheritance\": {\n\t\t\t\"comment\": \"same as a function call, but in inheritance context\",\n\t\t\t\"name\": \"meta.function-call.python\",\n\t\t\t\"begin\": \"(?x)\\n  \\\\b(?=\\n    ([[:alpha:]_]\\\\w*) \\\\s* (\\\\()\\n  )\\n\",\n\t\t\t\"end\": \"(\\\\))\",\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.arguments.end.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#inheritance-name\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#function-arguments\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"inheritance-name\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#lambda-incomplete\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#builtin-possible-callables\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#inheritance-identifier\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"function-call\": {\n\t\t\t\"name\": \"meta.function-call.python\",\n\t\t\t\"begin\": \"(?x)\\n  \\\\b(?=\\n    ([[:alpha:]_]\\\\w*) \\\\s* (\\\\()\\n  )\\n\",\n\t\t\t\"end\": \"(\\\\))\",\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.arguments.end.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#special-variables\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#function-name\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#function-arguments\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"function-name\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#builtin-possible-callables\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"comment\": \"Some color schemas support meta.function-call.generic scope\",\n\t\t\t\t\t\"name\": \"meta.function-call.generic.python\",\n\t\t\t\t\t\"match\": \"(?x)\\n  \\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"function-arguments\": {\n\t\t\t\"begin\": \"(\\\\()\",\n\t\t\t\"end\": \"(?=\\\\))(?!\\\\)\\\\s*\\\\()\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.arguments.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"contentName\": \"meta.function-call.arguments.python\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"punctuation.separator.arguments.python\",\n\t\t\t\t\t\"match\": \"(,)\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"(?x)\\n  (?:(?<=[,(])|^) \\\\s* (\\\\*{1,2})\\n\",\n\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"keyword.operator.unpacking.arguments.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#lambda-incomplete\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#illegal-names\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"\\\\b([[:alpha:]_]\\\\w*)\\\\s*(=)(?!=)\",\n\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"variable.parameter.function-call.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"keyword.operator.assignment.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"keyword.operator.assignment.python\",\n\t\t\t\t\t\"match\": \"=(?!=)\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"\\\\s*(\\\\))\\\\s*(\\\\()\",\n\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.definition.arguments.end.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.definition.arguments.begin.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"builtin-callables\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#illegal-names\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#illegal-object-name\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#builtin-exceptions\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#builtin-functions\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#builtin-types\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"builtin-possible-callables\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#builtin-callables\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#magic-names\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"builtin-exceptions\": {\n\t\t\t\"name\": \"support.type.exception.python\",\n\t\t\t\"match\": \"(?x) (?<!\\\\.) \\\\b(\\n  (\\n    Arithmetic | Assertion | Attribute | Buffer | BlockingIO\\n    | BrokenPipe | ChildProcess\\n    | (Connection (Aborted | Refused | Reset)?)\\n    | EOF | Environment | FileExists | FileNotFound\\n    | FloatingPoint | IO | Import | Indentation | Index | Interrupted\\n    | IsADirectory | NotADirectory | Permission | ProcessLookup\\n    | Timeout\\n    | Key | Lookup | Memory | Name | NotImplemented | OS | Overflow\\n    | Reference | Runtime | Recursion | Syntax | System\\n    | Tab | Type | UnboundLocal | Unicode(Encode|Decode|Translate)?\\n    | Value | Windows | ZeroDivision | ModuleNotFound\\n  ) Error\\n|\\n  ((Pending)?Deprecation | Runtime | Syntax | User | Future | Import\\n    | Unicode | Bytes | Resource\\n  )? Warning\\n|\\n  SystemExit | Stop(Async)?Iteration\\n  | KeyboardInterrupt\\n  | GeneratorExit | (Base)?Exception\\n)\\\\b\\n\"\n\t\t},\n\t\t\"builtin-functions\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"support.function.builtin.python\",\n\t\t\t\t\t\"match\": \"(?x)\\n  (?<!\\\\.) \\\\b(\\n    __import__ | abs | all | any | ascii | bin | breakpoint | callable\\n    | chr | compile | copyright | credits | delattr | dir | divmod\\n    | enumerate | eval | exec | exit | filter | format | getattr\\n    | globals | hasattr | hash | help | hex | id | input\\n    | isinstance | issubclass | iter | len | license | locals | map\\n    | max | memoryview | min | next | oct | open | ord | pow | print\\n    | quit | range | reload | repr | reversed | round\\n    | setattr | sorted | sum | vars | zip\\n  )\\\\b\\n\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"variable.legacy.builtin.python\",\n\t\t\t\t\t\"match\": \"(?x)\\n  (?<!\\\\.) \\\\b(\\n    file | reduce | intern | raw_input | unicode | cmp | basestring\\n    | execfile | long | xrange\\n  )\\\\b\\n\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"builtin-types\": {\n\t\t\t\"name\": \"support.type.python\",\n\t\t\t\"match\": \"(?x)\\n  (?<!\\\\.) \\\\b(\\n    bool | bytearray | bytes | classmethod | complex | dict\\n    | float | frozenset | int | list | object | property\\n    | set | slice | staticmethod | str | tuple | type\\n\\n    (?# Although 'super' is not a type, it's related to types,\\n        and is special enough to be highlighted differently from\\n        other built-ins)\\n    | super\\n  )\\\\b\\n\"\n\t\t},\n\t\t\"magic-function-names\": {\n\t\t\t\"comment\": \"these methods have magic interpretation by python and are generally called\\nindirectly through syntactic constructs\\n\",\n\t\t\t\"match\": \"(?x)\\n  \\\\b(\\n    __(?:\\n      abs | add | aenter | aexit | aiter | and | anext | await\\n      | bool | call | ceil | cmp | coerce | complex | contains\\n      | copy | deepcopy | del | delattr | delete | delitem\\n      | delslice | dir | div | divmod | enter | eq | exit | float\\n      | floor | floordiv | format | ge | get | getattr\\n      | getattribute | getinitargs | getitem | getnewargs\\n      | getslice | getstate | gt | hash | hex | iadd | iand | idiv\\n      | ifloordiv | ilshift | imod | imul | index | init\\n      | instancecheck | int | invert | ior | ipow | irshift | isub\\n      | iter | itruediv | ixor | le | len | long | lshift | lt\\n      | missing | mod | mul | ne | neg | new | next | nonzero | oct | or\\n      | pos | pow | radd | rand | rdiv | rdivmod | reduce\\n      | reduce_ex | repr | reversed | rfloordiv | rlshift | rmod\\n      | rmul | ror | round | rpow | rrshift | rshift | rsub\\n      | rtruediv | rxor | set | setattr | setitem | setslice\\n      | setstate | sizeof | str | sub | subclasscheck | truediv\\n      | trunc | unicode | xor | matmul | rmatmul | imatmul\\n      | init_subclass | set_name | fspath | bytes | prepare\\n    )__\\n  )\\\\b\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.function.magic.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"magic-variable-names\": {\n\t\t\t\"comment\": \"magic variables which a class/module may have.\",\n\t\t\t\"match\": \"(?x)\\n  \\\\b(\\n    __(?:\\n      all | bases | builtins | class | class_getitem | code | debug\\n      | defaults | dict | doc | file | func | kwdefaults | members\\n      | metaclass | methods | module | mro | mro_entries | name\\n      | qualname | post_init | self | signature | slots | subclasses\\n      | version | weakref | wrapped | annotations | classcell\\n      | spec | path | package | future | traceback\\n    )__\\n  )\\\\b\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.variable.magic.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"magic-names\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#magic-function-names\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#magic-variable-names\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"illegal-names\": {\n\t\t\t\"match\": \"(?x)\\n  \\\\b(?:\\n    (\\n      and | assert | async | await | break | class | continue | def\\n      | del | elif | else | except | finally | for | from | global\\n      | if | in | is | (?<=\\\\.)lambda | lambda(?=\\\\s*[\\\\.=])\\n      | nonlocal | not | or | pass | raise | return | try | while | with\\n      | yield\\n    ) | (\\n      as | import\\n    )\\n  )\\\\b\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.control.flow.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"keyword.control.import.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"special-variables\": {\n\t\t\t\"match\": \"(?x)\\n  \\\\b (?<!\\\\.) (?:\\n    (self) | (cls)\\n  )\\\\b\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"variable.language.special.self.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"variable.language.special.cls.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ellipsis\": {\n\t\t\t\"name\": \"constant.other.ellipsis.python\",\n\t\t\t\"match\": \"\\\\.\\\\.\\\\.\"\n\t\t},\n\t\t\"backticks\": {\n\t\t\t\"name\": \"invalid.deprecated.backtick.python\",\n\t\t\t\"begin\": \"\\\\`\",\n\t\t\t\"end\": \"(?:\\\\`|(?<!\\\\\\\\)(\\\\n))\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"illegal-operator\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"invalid.illegal.operator.python\",\n\t\t\t\t\t\"match\": \"&&|\\\\|\\\\||--|\\\\+\\\\+\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"invalid.illegal.operator.python\",\n\t\t\t\t\t\"match\": \"[?$]\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"invalid.illegal.operator.python\",\n\t\t\t\t\t\"comment\": \"We don't want `!` to flash when we're typing `!=`\",\n\t\t\t\t\t\"match\": \"!\\\\b\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"illegal-object-name\": {\n\t\t\t\"comment\": \"It's illegal to name class or function \\\"True\\\"\",\n\t\t\t\"name\": \"keyword.illegal.name.python\",\n\t\t\t\"match\": \"\\\\b(True|False|None)\\\\b\"\n\t\t},\n\t\t\"illegal-anno\": {\n\t\t\t\"name\": \"invalid.illegal.annotation.python\",\n\t\t\t\"match\": \"->\"\n\t\t},\n\t\t\"regexp-base-expression\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-quantifier\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-base-common\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fregexp-base-expression\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fregexp-quantifier\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-formatting-braces\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"\\\\{.*?\\\\}\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-base-common\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-formatting-braces\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"comment\": \"empty braces are illegal\",\n\t\t\t\t\t\"match\": \"({)(\\\\s*?)(})\",\n\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"constant.character.format.placeholder.other.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"invalid.illegal.brace.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"3\": {\n\t\t\t\t\t\t\t\"name\": \"constant.character.format.placeholder.other.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"constant.character.escape.python\",\n\t\t\t\t\t\"match\": \"({{|}})\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"regexp-base-common\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"support.other.match.any.regexp\",\n\t\t\t\t\t\"match\": \"\\\\.\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"support.other.match.begin.regexp\",\n\t\t\t\t\t\"match\": \"\\\\^\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"support.other.match.end.regexp\",\n\t\t\t\t\t\"match\": \"\\\\$\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"keyword.operator.quantifier.regexp\",\n\t\t\t\t\t\"match\": \"[+*?]\\\\??\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"keyword.operator.disjunction.regexp\",\n\t\t\t\t\t\"match\": \"\\\\|\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-escape-sequence\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"regexp-quantifier\": {\n\t\t\t\"name\": \"keyword.operator.quantifier.regexp\",\n\t\t\t\"match\": \"(?x)\\n  \\\\{(\\n    \\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n  )\\\\}\\n\"\n\t\t},\n\t\t\"fregexp-quantifier\": {\n\t\t\t\"name\": \"keyword.operator.quantifier.regexp\",\n\t\t\t\"match\": \"(?x)\\n  \\\\{\\\\{(\\n    \\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n  )\\\\}\\\\}\\n\"\n\t\t},\n\t\t\"regexp-backreference-number\": {\n\t\t\t\"name\": \"meta.backreference.regexp\",\n\t\t\t\"match\": \"(\\\\\\\\[1-9]\\\\d?)\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"entity.name.tag.backreference.regexp\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"regexp-backreference\": {\n\t\t\t\"name\": \"meta.backreference.named.regexp\",\n\t\t\t\"match\": \"(?x)\\n  (\\\\()  (\\\\?P= \\\\w+(?:\\\\s+[[:alnum:]]+)?)  (\\\\))\\n\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.begin.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"entity.name.tag.named.backreference.regexp\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.end.regexp\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"regexp-flags\": {\n\t\t\t\"name\": \"storage.modifier.flag.regexp\",\n\t\t\t\"match\": \"\\\\(\\\\?[aiLmsux]+\\\\)\"\n\t\t},\n\t\t\"regexp-escape-special\": {\n\t\t\t\"name\": \"support.other.escape.special.regexp\",\n\t\t\t\"match\": \"\\\\\\\\([AbBdDsSwWZ])\"\n\t\t},\n\t\t\"regexp-escape-character\": {\n\t\t\t\"name\": \"constant.character.escape.regexp\",\n\t\t\t\"match\": \"(?x)\\n  \\\\\\\\ (\\n        x[0-9A-Fa-f]{2}\\n        | 0[0-7]{1,2}\\n        | [0-7]{3}\\n     )\\n\"\n\t\t},\n\t\t\"regexp-escape-unicode\": {\n\t\t\t\"name\": \"constant.character.unicode.regexp\",\n\t\t\t\"match\": \"(?x)\\n  \\\\\\\\ (\\n        u[0-9A-Fa-f]{4}\\n        | U[0-9A-Fa-f]{8}\\n     )\\n\"\n\t\t},\n\t\t\"regexp-escape-catchall\": {\n\t\t\t\"name\": \"constant.character.escape.regexp\",\n\t\t\t\"match\": \"\\\\\\\\(.|\\\\n)\"\n\t\t},\n\t\t\"regexp-escape-sequence\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-escape-special\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-escape-character\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-escape-unicode\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-backreference-number\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-escape-catchall\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"regexp-charecter-set-escapes\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"constant.character.escape.regexp\",\n\t\t\t\t\t\"match\": \"\\\\\\\\[abfnrtv\\\\\\\\]\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-escape-special\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"constant.character.escape.regexp\",\n\t\t\t\t\t\"match\": \"\\\\\\\\([0-7]{1,3})\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-escape-character\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-escape-unicode\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-escape-catchall\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"codetags\": {\n\t\t\t\"match\": \"(?:\\\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\\\b)\",\n\t\t\t\"captures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.codetag.notation.python\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"comments-base\": {\n\t\t\t\"name\": \"comment.line.number-sign.python\",\n\t\t\t\"begin\": \"(\\\\#)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.comment.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"end\": \"($)\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#codetags\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"comments-string-single-three\": {\n\t\t\t\"name\": \"comment.line.number-sign.python\",\n\t\t\t\"begin\": \"(\\\\#)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.comment.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"end\": \"($|(?='''))\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#codetags\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"comments-string-double-three\": {\n\t\t\t\"name\": \"comment.line.number-sign.python\",\n\t\t\t\"begin\": \"(\\\\#)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.comment.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"end\": \"($|(?=\\\"\\\"\\\"))\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#codetags\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-regexp-expression\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-base-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-character-set\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-comments\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-flags\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-named-group\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-backreference\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-lookahead\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-lookahead-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-lookbehind\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-lookbehind-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-conditional\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-parentheses-non-capturing\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-parentheses\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-regexp-character-set\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"(?x)\\n  \\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"meta.character.set.regexp\",\n\t\t\t\t\t\"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\n\t\t\t\t\t\"end\": \"(\\\\]|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\t\t\"beginCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"keyword.operator.negation.regexp\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"3\": {\n\t\t\t\t\t\t\t\"name\": \"constant.character.set.regexp\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"endCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#regexp-charecter-set-escapes\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"constant.character.set.regexp\",\n\t\t\t\t\t\t\t\"match\": \"[^\\\\n]\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-regexp-named-group\": {\n\t\t\t\"name\": \"meta.named.regexp\",\n\t\t\t\"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"entity.name.tag.named.group.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-regexp-comments\": {\n\t\t\t\"name\": \"comment.regexp\",\n\t\t\t\"begin\": \"\\\\(\\\\?#\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"punctuation.comment.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.comment.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#codetags\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-regexp-lookahead\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-regexp-lookahead-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-regexp-lookbehind\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-regexp-lookbehind-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-regexp-conditional\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-regexp-parentheses-non-capturing\": {\n\t\t\t\"begin\": \"\\\\(\\\\?:\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-regexp-parentheses\": {\n\t\t\t\"begin\": \"\\\\(\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-regexp-expression\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-base-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-character-set\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-comments\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-flags\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-named-group\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-backreference\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-lookahead\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-lookahead-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-lookbehind\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-lookbehind-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-conditional\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-parentheses-non-capturing\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-parentheses\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-regexp-character-set\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"(?x)\\n  \\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"meta.character.set.regexp\",\n\t\t\t\t\t\"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\n\t\t\t\t\t\"end\": \"(\\\\]|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\t\t\"beginCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"keyword.operator.negation.regexp\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"3\": {\n\t\t\t\t\t\t\t\"name\": \"constant.character.set.regexp\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"endCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#regexp-charecter-set-escapes\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"constant.character.set.regexp\",\n\t\t\t\t\t\t\t\"match\": \"[^\\\\n]\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-regexp-named-group\": {\n\t\t\t\"name\": \"meta.named.regexp\",\n\t\t\t\"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"entity.name.tag.named.group.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-regexp-comments\": {\n\t\t\t\"name\": \"comment.regexp\",\n\t\t\t\"begin\": \"\\\\(\\\\?#\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"punctuation.comment.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.comment.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#codetags\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-regexp-lookahead\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-regexp-lookahead-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-regexp-lookbehind\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-regexp-lookbehind-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-regexp-conditional\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-regexp-parentheses-non-capturing\": {\n\t\t\t\"begin\": \"\\\\(\\\\?:\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-regexp-parentheses\": {\n\t\t\t\"begin\": \"\\\\(\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-regexp-expression\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-base-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-character-set\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-comments\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-flags\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-named-group\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-backreference\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-lookahead\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-lookahead-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-lookbehind\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-lookbehind-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-conditional\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-parentheses-non-capturing\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-parentheses\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-regexp-character-set\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"(?x)\\n  \\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"meta.character.set.regexp\",\n\t\t\t\t\t\"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\n\t\t\t\t\t\"end\": \"(\\\\]|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\t\t\"beginCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"keyword.operator.negation.regexp\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"3\": {\n\t\t\t\t\t\t\t\"name\": \"constant.character.set.regexp\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"endCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#regexp-charecter-set-escapes\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"constant.character.set.regexp\",\n\t\t\t\t\t\t\t\"match\": \"[^\\\\n]\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-regexp-named-group\": {\n\t\t\t\"name\": \"meta.named.regexp\",\n\t\t\t\"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"entity.name.tag.named.group.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-regexp-comments\": {\n\t\t\t\"name\": \"comment.regexp\",\n\t\t\t\"begin\": \"\\\\(\\\\?#\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"punctuation.comment.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.comment.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#codetags\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-regexp-lookahead\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-regexp-lookahead-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-regexp-lookbehind\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-regexp-lookbehind-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-regexp-conditional\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-regexp-parentheses-non-capturing\": {\n\t\t\t\"begin\": \"\\\\(\\\\?:\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-regexp-parentheses\": {\n\t\t\t\"begin\": \"\\\\(\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-regexp-expression\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-base-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-character-set\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-comments\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-flags\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-named-group\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-backreference\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-lookahead\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-lookahead-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-lookbehind\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-lookbehind-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-conditional\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-parentheses-non-capturing\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-parentheses\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-regexp-character-set\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"(?x)\\n  \\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"meta.character.set.regexp\",\n\t\t\t\t\t\"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\n\t\t\t\t\t\"end\": \"(\\\\]|(?=\\\"\\\"\\\"))\",\n\t\t\t\t\t\"beginCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"keyword.operator.negation.regexp\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"3\": {\n\t\t\t\t\t\t\t\"name\": \"constant.character.set.regexp\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"endCaptures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"patterns\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"include\": \"#regexp-charecter-set-escapes\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"constant.character.set.regexp\",\n\t\t\t\t\t\t\t\"match\": \"[^\\\\n]\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-regexp-named-group\": {\n\t\t\t\"name\": \"meta.named.regexp\",\n\t\t\t\"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"entity.name.tag.named.group.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-regexp-comments\": {\n\t\t\t\"name\": \"comment.regexp\",\n\t\t\t\"begin\": \"\\\\(\\\\?#\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"punctuation.comment.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.comment.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#codetags\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-regexp-lookahead\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-regexp-lookahead-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-regexp-lookbehind\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-regexp-lookbehind-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-regexp-conditional\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-regexp-parentheses-non-capturing\": {\n\t\t\t\"begin\": \"\\\\(\\\\?:\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-regexp-parentheses\": {\n\t\t\t\"begin\": \"\\\\(\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"regexp-single-one-line\": {\n\t\t\t\"name\": \"string.regexp.quoted.single.python\",\n\t\t\t\"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\\')\",\n\t\t\t\"end\": \"(\\\\')|(?<!\\\\\\\\)(\\\\n)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.deprecated.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"4\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"5\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"regexp-single-three-line\": {\n\t\t\t\"name\": \"string.regexp.quoted.multi.python\",\n\t\t\t\"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\\'\\\\'\\\\')\",\n\t\t\t\"end\": \"(\\\\'\\\\'\\\\')\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.deprecated.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"4\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"5\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"regexp-double-one-line\": {\n\t\t\t\"name\": \"string.regexp.quoted.single.python\",\n\t\t\t\"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\")\",\n\t\t\t\"end\": \"(\\\")|(?<!\\\\\\\\)(\\\\n)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.deprecated.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"4\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"5\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"regexp-double-three-line\": {\n\t\t\t\"name\": \"string.regexp.quoted.multi.python\",\n\t\t\t\"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\"\\\"\\\")\",\n\t\t\t\"end\": \"(\\\"\\\"\\\")\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.deprecated.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"4\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"5\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-fregexp-expression\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fregexp-base-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-character-set\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-comments\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-flags\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-regexp-named-group\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-backreference\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-lookahead\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-lookahead-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-lookbehind\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-lookbehind-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-conditional\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-parentheses-non-capturing\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-parentheses\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-fregexp-named-group\": {\n\t\t\t\"name\": \"meta.named.regexp\",\n\t\t\t\"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"entity.name.tag.named.group.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-fregexp-lookahead\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-fregexp-lookahead-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-fregexp-lookbehind\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-fregexp-lookbehind-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-fregexp-conditional\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-fregexp-parentheses-non-capturing\": {\n\t\t\t\"begin\": \"\\\\(\\\\?:\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-one-fregexp-parentheses\": {\n\t\t\t\"begin\": \"\\\\(\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-fregexp-expression\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fregexp-base-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-character-set\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-comments\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-flags\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-regexp-named-group\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-backreference\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-lookahead\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-lookahead-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-lookbehind\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-lookbehind-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-conditional\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-parentheses-non-capturing\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-parentheses\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-fregexp-named-group\": {\n\t\t\t\"name\": \"meta.named.regexp\",\n\t\t\t\"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"entity.name.tag.named.group.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-fregexp-lookahead\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-fregexp-lookahead-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-fregexp-lookbehind\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-fregexp-lookbehind-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-fregexp-conditional\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-fregexp-parentheses-non-capturing\": {\n\t\t\t\"begin\": \"\\\\(\\\\?:\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"single-three-fregexp-parentheses\": {\n\t\t\t\"begin\": \"\\\\(\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-single-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-fregexp-expression\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fregexp-base-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-character-set\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-comments\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-flags\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-regexp-named-group\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-backreference\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-lookahead\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-lookahead-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-lookbehind\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-lookbehind-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-conditional\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-parentheses-non-capturing\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-parentheses\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-fregexp-named-group\": {\n\t\t\t\"name\": \"meta.named.regexp\",\n\t\t\t\"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"entity.name.tag.named.group.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-fregexp-lookahead\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-fregexp-lookahead-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-fregexp-lookbehind\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-fregexp-lookbehind-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-fregexp-conditional\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-fregexp-parentheses-non-capturing\": {\n\t\t\t\"begin\": \"\\\\(\\\\?:\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-one-fregexp-parentheses\": {\n\t\t\t\"begin\": \"\\\\(\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"))|((?=(?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-fregexp-expression\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fregexp-base-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-character-set\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-comments\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-flags\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-regexp-named-group\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#regexp-backreference\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-lookahead\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-lookahead-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-lookbehind\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-lookbehind-negative\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-conditional\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-parentheses-non-capturing\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-parentheses\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-fregexp-named-group\": {\n\t\t\t\"name\": \"meta.named.regexp\",\n\t\t\t\"begin\": \"(?x)\\n  (\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"entity.name.tag.named.group.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-fregexp-lookahead\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-fregexp-lookahead-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-fregexp-lookbehind\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<=\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-fregexp-lookbehind-negative\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?<!\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-fregexp-conditional\": {\n\t\t\t\"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.regexp\"\n\t\t\t\t},\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-fregexp-parentheses-non-capturing\": {\n\t\t\t\"begin\": \"\\\\(\\\\?:\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"double-three-fregexp-parentheses\": {\n\t\t\t\"begin\": \"\\\\(\",\n\t\t\t\"end\": \"(\\\\)|(?=\\\"\\\"\\\"))\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"0\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-expression\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#comments-string-double-three\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fregexp-single-one-line\": {\n\t\t\t\"name\": \"string.interpolated.python string.regexp.quoted.single.python\",\n\t\t\t\"begin\": \"\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\\\\')\",\n\t\t\t\"end\": \"(\\\\')|(?<!\\\\\\\\)(\\\\n)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.deprecated.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"4\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"5\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fregexp-single-three-line\": {\n\t\t\t\"name\": \"string.interpolated.python string.regexp.quoted.multi.python\",\n\t\t\t\"begin\": \"\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\\\\'\\\\'\\\\')\",\n\t\t\t\"end\": \"(\\\\'\\\\'\\\\')\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.deprecated.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"4\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"5\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#single-three-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fregexp-double-one-line\": {\n\t\t\t\"name\": \"string.interpolated.python string.regexp.quoted.single.python\",\n\t\t\t\"begin\": \"\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\\\")\",\n\t\t\t\"end\": \"(\\\")|(?<!\\\\\\\\)(\\\\n)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.deprecated.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"4\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"5\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-one-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fregexp-double-three-line\": {\n\t\t\t\"name\": \"string.interpolated.python string.regexp.quoted.multi.python\",\n\t\t\t\"begin\": \"\\\\b(([uU]r)|([fF]r)|(r[fF]?))(\\\"\\\"\\\")\",\n\t\t\t\"end\": \"(\\\"\\\"\\\")\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.deprecated.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"4\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"5\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#double-three-fregexp-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-raw-quoted-single-line\": {\n\t\t\t\"name\": \"string.quoted.raw.single.python\",\n\t\t\t\"begin\": \"\\\\b(([uU]R)|(R))((['\\\"]))\",\n\t\t\t\"end\": \"(\\\\4)|((?<!\\\\\\\\)\\\\n)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.deprecated.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"4\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-single-bad-brace1-formatting-raw\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-single-bad-brace2-formatting-raw\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-raw-guts\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-bin-quoted-single-line\": {\n\t\t\t\"name\": \"string.quoted.binary.single.python\",\n\t\t\t\"begin\": \"(\\\\b[bB])((['\\\"]))\",\n\t\t\t\"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-entity\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-raw-bin-quoted-single-line\": {\n\t\t\t\"name\": \"string.quoted.raw.binary.single.python\",\n\t\t\t\"begin\": \"(\\\\b(?:R[bB]|[bB]R))((['\\\"]))\",\n\t\t\t\"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-raw-bin-guts\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-quoted-single-line\": {\n\t\t\t\"name\": \"string.quoted.single.python\",\n\t\t\t\"begin\": \"(?:\\\\b([rR])(?=[uU]))?([uU])?((['\\\"]))\",\n\t\t\t\"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-single-bad-brace1-formatting-unicode\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-single-bad-brace2-formatting-unicode\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-unicode-guts\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-single-bad-brace1-formatting-unicode\": {\n\t\t\t\"comment\": \"template using {% ... %}\",\n\t\t\t\"begin\": \"(?x)\\n    (?= \\\\{%\\n          ( .*? (?!(['\\\"])|((?<!\\\\\\\\)\\\\n)) )\\n        %\\\\}\\n    )\\n\",\n\t\t\t\"end\": \"(?=(['\\\"])|((?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#escape-sequence-unicode\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#escape-sequence\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-line-continuation\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-single-bad-brace1-formatting-raw\": {\n\t\t\t\"comment\": \"template using {% ... %}\",\n\t\t\t\"begin\": \"(?x)\\n    (?= \\\\{%\\n          ( .*? (?!(['\\\"])|((?<!\\\\\\\\)\\\\n)) )\\n        %\\\\}\\n    )\\n\",\n\t\t\t\"end\": \"(?=(['\\\"])|((?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-consume-escape\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-single-bad-brace2-formatting-unicode\": {\n\t\t\t\"comment\": \"odd format or format-like syntax\",\n\t\t\t\"begin\": \"(?x)\\n    (?!\\\\{\\\\{)\\n    (?= \\\\{ (\\n              \\\\w*? (?!(['\\\"])|((?<!\\\\\\\\)\\\\n)) [^!:\\\\.\\\\[}\\\\w]\\n           )\\n        .*?(?!(['\\\"])|((?<!\\\\\\\\)\\\\n))\\n        \\\\}\\n    )\\n\",\n\t\t\t\"end\": \"(?=(['\\\"])|((?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#escape-sequence-unicode\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-entity\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-single-bad-brace2-formatting-raw\": {\n\t\t\t\"comment\": \"odd format or format-like syntax\",\n\t\t\t\"begin\": \"(?x)\\n    (?!\\\\{\\\\{)\\n    (?= \\\\{ (\\n              \\\\w*? (?!(['\\\"])|((?<!\\\\\\\\)\\\\n)) [^!:\\\\.\\\\[}\\\\w]\\n           )\\n        .*?(?!(['\\\"])|((?<!\\\\\\\\)\\\\n))\\n        \\\\}\\n    )\\n\",\n\t\t\t\"end\": \"(?=(['\\\"])|((?<!\\\\\\\\)\\\\n))\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-consume-escape\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-formatting\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-raw-quoted-multi-line\": {\n\t\t\t\"name\": \"string.quoted.raw.multi.python\",\n\t\t\t\"begin\": \"\\\\b(([uU]R)|(R))('''|\\\"\\\"\\\")\",\n\t\t\t\"end\": \"(\\\\4)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.deprecated.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"4\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-multi-bad-brace1-formatting-raw\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-multi-bad-brace2-formatting-raw\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-raw-guts\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-bin-quoted-multi-line\": {\n\t\t\t\"name\": \"string.quoted.binary.multi.python\",\n\t\t\t\"begin\": \"(\\\\b[bB])('''|\\\"\\\"\\\")\",\n\t\t\t\"end\": \"(\\\\2)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-entity\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-raw-bin-quoted-multi-line\": {\n\t\t\t\"name\": \"string.quoted.raw.binary.multi.python\",\n\t\t\t\"begin\": \"(\\\\b(?:R[bB]|[bB]R))('''|\\\"\\\"\\\")\",\n\t\t\t\"end\": \"(\\\\2)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-raw-bin-guts\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-quoted-multi-line\": {\n\t\t\t\"name\": \"string.quoted.multi.python\",\n\t\t\t\"begin\": \"(?:\\\\b([rR])(?=[uU]))?([uU])?('''|\\\"\\\"\\\")\",\n\t\t\t\"end\": \"(\\\\3)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-multi-bad-brace1-formatting-unicode\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-multi-bad-brace2-formatting-unicode\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-unicode-guts\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-multi-bad-brace1-formatting-unicode\": {\n\t\t\t\"comment\": \"template using {% ... %}\",\n\t\t\t\"begin\": \"(?x)\\n    (?= \\\\{%\\n          ( .*? (?!'''|\\\"\\\"\\\") )\\n        %\\\\}\\n    )\\n\",\n\t\t\t\"end\": \"(?='''|\\\"\\\"\\\")\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#escape-sequence-unicode\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#escape-sequence\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-line-continuation\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-multi-bad-brace1-formatting-raw\": {\n\t\t\t\"comment\": \"template using {% ... %}\",\n\t\t\t\"begin\": \"(?x)\\n    (?= \\\\{%\\n          ( .*? (?!'''|\\\"\\\"\\\") )\\n        %\\\\}\\n    )\\n\",\n\t\t\t\"end\": \"(?='''|\\\"\\\"\\\")\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-consume-escape\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-multi-bad-brace2-formatting-unicode\": {\n\t\t\t\"comment\": \"odd format or format-like syntax\",\n\t\t\t\"begin\": \"(?x)\\n    (?!\\\\{\\\\{)\\n    (?= \\\\{ (\\n              \\\\w*? (?!'''|\\\"\\\"\\\") [^!:\\\\.\\\\[}\\\\w]\\n           )\\n        .*?(?!'''|\\\"\\\"\\\")\\n        \\\\}\\n    )\\n\",\n\t\t\t\"end\": \"(?='''|\\\"\\\"\\\")\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#escape-sequence-unicode\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-entity\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"string-multi-bad-brace2-formatting-raw\": {\n\t\t\t\"comment\": \"odd format or format-like syntax\",\n\t\t\t\"begin\": \"(?x)\\n    (?!\\\\{\\\\{)\\n    (?= \\\\{ (\\n              \\\\w*? (?!'''|\\\"\\\"\\\") [^!:\\\\.\\\\[}\\\\w]\\n           )\\n        .*?(?!'''|\\\"\\\"\\\")\\n        \\\\}\\n    )\\n\",\n\t\t\t\"end\": \"(?='''|\\\"\\\"\\\")\",\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-consume-escape\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#string-formatting\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-fnorm-quoted-single-line\": {\n\t\t\t\"name\": \"meta.fstring.python\",\n\t\t\t\"begin\": \"(\\\\b[fF])([bBuU])?((['\\\"]))\",\n\t\t\t\"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"string.interpolated.python string.quoted.single.python storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python string.interpolated.python string.quoted.single.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.single.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-guts\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-illegal-single-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-single-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-single-core\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-normf-quoted-single-line\": {\n\t\t\t\"name\": \"meta.fstring.python\",\n\t\t\t\"begin\": \"(\\\\b[bBuU])([fF])((['\\\"]))\",\n\t\t\t\"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"string.interpolated.python string.quoted.single.python storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python string.quoted.single.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.single.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-guts\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-illegal-single-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-single-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-single-core\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-raw-quoted-single-line\": {\n\t\t\t\"name\": \"meta.fstring.python\",\n\t\t\t\"begin\": \"(\\\\b(?:[R][fF]|[fF][R]))((['\\\"]))\",\n\t\t\t\"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"string.interpolated.python string.quoted.raw.single.python storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python string.quoted.raw.single.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.raw.single.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-raw-guts\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-illegal-single-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-single-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-raw-single-core\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-single-core\": {\n\t\t\t\"name\": \"string.interpolated.python string.quoted.single.python\",\n\t\t\t\"match\": \"(?x)\\n  (.+?)\\n    (\\n      (?# .* and .*? in multi-line match need special handling of\\n        newlines otherwise SublimeText and Atom will match slightly\\n        differently.\\n\\n        The guard for newlines has to be separate from the\\n        lookahead because of special $ matching rule.)\\n      ($\\\\n?)\\n      |\\n      (?=[\\\\\\\\\\\\}\\\\{]|(['\\\"])|((?<!\\\\\\\\)\\\\n))\\n    )\\n  (?# due to how multiline regexps are matched we need a special case\\n    for matching a newline character)\\n  | \\\\n\\n\"\n\t\t},\n\t\t\"fstring-raw-single-core\": {\n\t\t\t\"name\": \"string.interpolated.python string.quoted.raw.single.python\",\n\t\t\t\"match\": \"(?x)\\n  (.+?)\\n    (\\n      (?# .* and .*? in multi-line match need special handling of\\n        newlines otherwise SublimeText and Atom will match slightly\\n        differently.\\n\\n        The guard for newlines has to be separate from the\\n        lookahead because of special $ matching rule.)\\n      ($\\\\n?)\\n      |\\n      (?=[\\\\\\\\\\\\}\\\\{]|(['\\\"])|((?<!\\\\\\\\)\\\\n))\\n    )\\n  (?# due to how multiline regexps are matched we need a special case\\n    for matching a newline character)\\n  | \\\\n\\n\"\n\t\t},\n\t\t\"fstring-single-brace\": {\n\t\t\t\"comment\": \"value interpolation using { ... }\",\n\t\t\t\"begin\": \"(\\\\{)\",\n\t\t\t\"end\": \"(?x)\\n  (\\\\})|(?=\\\\n)\\n\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"constant.character.format.placeholder.other.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"constant.character.format.placeholder.other.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-terminator-single\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#f-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-terminator-single\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"(![rsa])(?=})\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"(?x)\\n  (![rsa])?\\n    ( : \\\\w? [<>=^]? [-+ ]? \\\\#?\\n      \\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )(?=})\\n\",\n\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"storage.type.format.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"storage.type.format.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-terminator-single-tail\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-terminator-single-tail\": {\n\t\t\t\"begin\": \"(![rsa])?(:)(?=.*?{)\",\n\t\t\t\"end\": \"(?=})|(?=\\\\n)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"storage.type.format.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"storage.type.format.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-illegal-single-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-single-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"([bcdeEfFgGnosxX%])(?=})\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"(\\\\.\\\\d+)\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"(,)\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"(\\\\d+)\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"(\\\\#)\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"([-+ ])\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"([<>=^])\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"(\\\\w)\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-fnorm-quoted-multi-line\": {\n\t\t\t\"name\": \"meta.fstring.python\",\n\t\t\t\"begin\": \"(\\\\b[fF])([bBuU])?('''|\\\"\\\"\\\")\",\n\t\t\t\"end\": \"(\\\\3)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"string.interpolated.python string.quoted.multi.python storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python string.interpolated.python string.quoted.multi.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.multi.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-guts\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-illegal-multi-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-multi-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-multi-core\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-normf-quoted-multi-line\": {\n\t\t\t\"name\": \"meta.fstring.python\",\n\t\t\t\"begin\": \"(\\\\b[bBuU])([fF])('''|\\\"\\\"\\\")\",\n\t\t\t\"end\": \"(\\\\3)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.prefix.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"string.interpolated.python string.quoted.multi.python storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"3\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python string.quoted.multi.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.multi.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-guts\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-illegal-multi-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-multi-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-multi-core\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-raw-quoted-multi-line\": {\n\t\t\t\"name\": \"meta.fstring.python\",\n\t\t\t\"begin\": \"(\\\\b(?:[R][fF]|[fF][R]))('''|\\\"\\\"\\\")\",\n\t\t\t\"end\": \"(\\\\2)\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"string.interpolated.python string.quoted.raw.multi.python storage.type.string.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.begin.python string.quoted.raw.multi.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.raw.multi.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"invalid.illegal.newline.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-raw-guts\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-illegal-multi-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-multi-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-raw-multi-core\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-multi-core\": {\n\t\t\t\"name\": \"string.interpolated.python string.quoted.multi.python\",\n\t\t\t\"match\": \"(?x)\\n  (.+?)\\n    (\\n      (?# .* and .*? in multi-line match need special handling of\\n        newlines otherwise SublimeText and Atom will match slightly\\n        differently.\\n\\n        The guard for newlines has to be separate from the\\n        lookahead because of special $ matching rule.)\\n      ($\\\\n?)\\n      |\\n      (?=[\\\\\\\\\\\\}\\\\{]|'''|\\\"\\\"\\\")\\n    )\\n  (?# due to how multiline regexps are matched we need a special case\\n    for matching a newline character)\\n  | \\\\n\\n\"\n\t\t},\n\t\t\"fstring-raw-multi-core\": {\n\t\t\t\"name\": \"string.interpolated.python string.quoted.raw.multi.python\",\n\t\t\t\"match\": \"(?x)\\n  (.+?)\\n    (\\n      (?# .* and .*? in multi-line match need special handling of\\n        newlines otherwise SublimeText and Atom will match slightly\\n        differently.\\n\\n        The guard for newlines has to be separate from the\\n        lookahead because of special $ matching rule.)\\n      ($\\\\n?)\\n      |\\n      (?=[\\\\\\\\\\\\}\\\\{]|'''|\\\"\\\"\\\")\\n    )\\n  (?# due to how multiline regexps are matched we need a special case\\n    for matching a newline character)\\n  | \\\\n\\n\"\n\t\t},\n\t\t\"fstring-multi-brace\": {\n\t\t\t\"comment\": \"value interpolation using { ... }\",\n\t\t\t\"begin\": \"(\\\\{)\",\n\t\t\t\"end\": \"(?x)\\n  (\\\\})\\n\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"constant.character.format.placeholder.other.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"endCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"constant.character.format.placeholder.other.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-terminator-multi\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#f-expression\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-terminator-multi\": {\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"(![rsa])(?=})\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"match\": \"(?x)\\n  (![rsa])?\\n    ( : \\\\w? [<>=^]? [-+ ]? \\\\#?\\n      \\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )(?=})\\n\",\n\t\t\t\t\t\"captures\": {\n\t\t\t\t\t\t\"1\": {\n\t\t\t\t\t\t\t\"name\": \"storage.type.format.python\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"2\": {\n\t\t\t\t\t\t\t\"name\": \"storage.type.format.python\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-terminator-multi-tail\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"fstring-terminator-multi-tail\": {\n\t\t\t\"begin\": \"(![rsa])?(:)(?=.*?{)\",\n\t\t\t\"end\": \"(?=})\",\n\t\t\t\"beginCaptures\": {\n\t\t\t\t\"1\": {\n\t\t\t\t\t\"name\": \"storage.type.format.python\"\n\t\t\t\t},\n\t\t\t\t\"2\": {\n\t\t\t\t\t\"name\": \"storage.type.format.python\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"patterns\": [\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-illegal-multi-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"include\": \"#fstring-multi-brace\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"([bcdeEfFgGnosxX%])(?=})\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"(\\\\.\\\\d+)\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"(,)\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"(\\\\d+)\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"(\\\\#)\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"([-+ ])\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"([<>=^])\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"storage.type.format.python\",\n\t\t\t\t\t\"match\": \"(\\\\w)\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n}"
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "send_info",
            "payload": {
                "cellCount": 3,
                "undoCount": 0,
                "redoCount": 0
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.editor_loaded",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_css_response",
            "payload": {
                "css": "\n:root {\n    --code-comment-color: #008000;\n    --code-numeric-color: #09885a;\n    --code-string-color: #a31515;\n    --code-variable-color: #001080;\n    --code-type-color: #267f99;\n    --code-font-family: Consolas, 'Courier New', monospace;\n    --code-font-size: 14px;\n}\n\n\n    :root {\n        --override-widget-background: #f3f3f3;\n        --override-foreground: #000000;\n        --override-background: #FFFFFF;\n        --override-selection-background: #add6ff;\n        --override-watermark-color: rgba(66, 66, 66, 0.75);\n        --override-tabs-background: #f3f3f3;\n        --override-progress-background: #0066bf;\n        --override-badge-background: #c4c4c4;\n        --override-lineHighlightBorder: #eeeeee;\n        --override-peek-background: #f2f8fc;\n    }\n\n",
                "theme": "Default Light+"
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_request",
            "payload": {
                "isDark": false
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "get_monaco_theme_response",
            "payload": {
                "theme": {
                    "base": "vs",
                    "inherit": true,
                    "rules": [
                        {
                            "token": "punctuation.definition.comment",
                            "foreground": "#008000"
                        },
                        {
                            "token": "punctuation.definition.string",
                            "foreground": "#a31515"
                        }
                    ],
                    "colors": {}
                }
            }
        },
        "type": "forUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_loc_init",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "settings_updated"
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_settings",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_loc_init",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "rendered_execution",
            "payload": {
                "ids": [
                    "NotebookImport#0",
                    "NotebookImport#1",
                    "NotebookImport#2"
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_load_all_cells",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_settings",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_loc_init",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_load_all_cells",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_update_settings",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "load_all_cells_complete",
            "payload": {
                "cells": [
                    {
                        "id": "NotebookImport#0",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 1,
                            "metadata": {
                                "collapsed": true
                            },
                            "outputs": [],
                            "source": [
                                "a=1\n",
                                "a"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#1",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 2,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "b=2\n",
                                "b"
                            ]
                        }
                    },
                    {
                        "id": "NotebookImport#2",
                        "file": "2DB9B899-6519-4E1B-88B0-FA728A274115",
                        "line": 0,
                        "state": 2,
                        "data": {
                            "cell_type": "code",
                            "execution_count": 3,
                            "metadata": {},
                            "outputs": [],
                            "source": [
                                "c=3\n",
                                "c"
                            ]
                        }
                    }
                ]
            }
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.loaded_all_cells",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_load_onigasm_assembly_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_load_tmlanguage_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_action.code_created",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_monaco_ready",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_css_response",
            "payload": {}
        },
        "type": "fromUI"
    },
    {
        "payload": {
            "type": "DISPATCHED_ACTION_get_monaco_theme_response",
            "payload": {}
        },
        "type": "fromUI"
    }
]