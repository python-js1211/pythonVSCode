steps:
    - bash: |
          printenv
      displayName: "Show all env vars"
      condition: eq(variables['system.debug'], 'true')

    - task: NodeTool@0
      displayName: "Use Node $(NodeVersion)"
      inputs:
          versionSpec: $(NodeVersion)

    - task: UsePythonVersion@0
      displayName: "Use Python $(PythonVersion)"
      inputs:
          versionSpec: $(PythonVersion)

    - task: Npm@1
      displayName: "Use NPM $(NpmVersion)"
      inputs:
          command: custom
          verbose: true
          customCommand: "install -g npm@$(NpmVersion)"

    - task: Npm@1
      displayName: "npm ci"
      inputs:
          command: custom
          verbose: true
          customCommand: ci

    - bash: |
          echo AVAILABLE DEPENDENCY VERSIONS
          echo Node Version = `node -v`
          echo NPM Version = `npm -v`
          echo Python Version = `python --version`
          echo Gulp Version = `gulp --version`
      condition: and(succeeded(), eq(variables['system.debug'], 'true'))
      displayName: Show Dependency Versions

    - task: Gulp@0
      displayName: "Compile and check for errors"
      inputs:
          targets: "prePublishNonBundle"
      condition: and(succeeded(), eq(variables['Build'], 'false'))

    - bash: npx tslint ./src/**/*.ts{,x}
      displayName: "code hygiene"
      condition: and(succeeded(), eq(variables['Build'], 'false'))

    - bash: |
          python -m pip install -U pip
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
      failOnStderr: true
      displayName: "pip install requirements"
      condition: and(succeeded(), eq(variables['Build'], 'true'))

    - bash: |
          npm install -g vsce
          npm run clean
          npm run updateBuildNumber -- --buildNumber $BUILD_BUILDID
          npm run package
      displayName: "Build VSIX"
      condition: and(succeeded(), eq(variables['Build'], 'true'))

    - task: CopyFiles@2
      inputs:
          contents: "*.vsix"
          targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: "Copy VSIX"
      condition: and(succeeded(), eq(variables['Build'], 'true'))

    - task: PublishBuildArtifacts@1
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: VSIX
      displayName: "Publish VSIX to Arifacts"
      condition: and(succeeded(), eq(variables['Build'], 'true'))
