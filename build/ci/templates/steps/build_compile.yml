# -----------------------------------------------------------------------------------------------------------------------------
# Overview:
# -----------------------------------------------------------------------------------------------------------------------------
# Set of steps used to compile and build the extension
#
# -----------------------------------------------------------------------------------------------------------------------------
# Variables
# -----------------------------------------------------------------------------------------------------------------------------
# 1. build
#   Mandatory
#   Possible values, `true` or `false`.
#   If `true`, means we need to build the VSIX, else just compile.

steps:
    - template: initialization.yml
      parameters:
        PythonVersion: $(PythonVersion)
        workingDirectory: $(Build.SourcesDirectory)
        compile: 'false'

    - task: Gulp@0
      displayName: "Compile and check for errors"
      inputs:
          targets: "prePublishNonBundle"
      condition: and(succeeded(), eq(variables['build'], 'false'))

    - bash: npx tslint --project tsconfig.json
      displayName: "code hygiene"
      condition: and(succeeded(), eq(variables['build'], 'false'))

    - bash: |
          python -m pip install -U pip
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/old_ptvsd --no-cache-dir --implementation py --no-deps --upgrade 'ptvsd==4.3.2'
      failOnStderr: true
      displayName: "pip install requirements"
      condition: and(succeeded(), eq(variables['build'], 'true'))

    - task: PythonScript@0
      displayName: "Install PTVSD wheels"
      inputs:
          scriptSource: "filePath"
          scriptPath: "./pythonFiles/install_ptvsd.py"
          arguments: "--ci"
          failOnStderr: true
      condition: and(succeeded(), eq(variables['build'], 'true'))

    - bash: npm run clean
      displayName: "Clean"
      condition: and(succeeded(), eq(variables['build'], 'true'))

    - bash: |
          npm run updateBuildNumber -- --buildNumber $BUILD_BUILDID
      displayName: "Update dev Version of Extension"
      condition: and(succeeded(), eq(variables['build'], 'true'), eq(variables['Build.SourceBranchName'], 'master'))

    - bash: |
          npm run updateBuildNumber -- --buildNumber $BUILD_BUILDID --updateChangelog
      displayName: "Update release Version of Extension"
      condition: and(succeeded(), eq(variables['build'], 'true'), eq(variables['Build.SourceBranchName'], 'release'))

    - bash: |
          npm run package
      displayName: "Build VSIX"
      condition: and(succeeded(), eq(variables['build'], 'true'))

    - task: CopyFiles@2
      inputs:
          contents: "*.vsix"
          targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: "Copy VSIX"
      condition: and(succeeded(), eq(variables['build'], 'true'))

    - task: PublishBuildArtifacts@1
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: VSIX
      displayName: "Publish VSIX to Artifacts"
      condition: and(succeeded(), eq(variables['build'], 'true'))
