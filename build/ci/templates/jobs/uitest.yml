# -----------------------------------------------------------------------------------------------------------------------------
# Overview:
# -----------------------------------------------------------------------------------------------------------------------------
# This template builds a dynamic list of Jobs for UI Tests.
# Basically, given a set of environments (OS, Python Version, VSC Version), we generate a
#   list of jobs for each permutation.
# I.e. we generate permutations of Jobs for each of the following:
# - OS: Windows, Linux, Mac
# - Python Version: 2.7, 3.5, 3.6, 3.7
# - VSC Version: Stable, Insiders
# Using this approach, we can add tests for PipEnv, PyEnv, Conda, etc and ensure we test in all possible combinations.
# When using this template we can also, ignore testing against specific permutations by
#   excluding OS, Python Version or VSC Version using the parameters ignorePythonVersions, ignoreOperatingSystems & vscodeChannels
#
# -----------------------------------------------------------------------------------------------------------------------------
# Parameters
# -----------------------------------------------------------------------------------------------------------------------------
# 1. jobs
#   Mandatory.
#   Contains a list of all tests that needs to be run.
#
#   Sample:
#   ```
#   - template: templates/uitest_jobs.yml
#   parameters:
#     jobs:
#     - test: "Smoke"
#       tags: "@smoke"
#     - test: "Test"
#       tags: "@test"
#     - test: "Terminal"
#       tags: "@terminal"
#   ```
#   Based on this sample, we're running 3 tests with the names `Smoke`, `Test`, and `Terminal`.
#   The tags inside each test contains the arguments that needs to be passd into behave.
#   I.e. we're only testing BDD tests that contain the tag `@smoke`, `@test` & `@terminal` (as separate jobs).
#   Please pass in just the `tags` arguments.
#   Multiple tag values can be passed in as follows:
#       tags: "@debug and @remote"
#   More information on --tags argument for behave can be found here:
#       * https://behave.readthedocs.io/en/latest/tutorial.html#controlling-things-with-tags
#       * https://behave.readthedocs.io/en/latest/tag_expressions.html
# 2. ignorePythonVersions
#   Comma delimited list of Python versions not to be tested against.
#   E.g. = 3.7,3.6
#   Possible values 3.7, 3.6, 3.5, 2.7
#   Any OS provided in this string will not be tested against.
#
#   Sample:
#   ```
#   parameters:
#   vscodeChannels: ['stable']
#   jobs:
#   - test: "Smoke"
#     tags: "@smoke"
#     ignorePythonVersions: "3.6,3.5"
#   ```
#   Based on this sample, we're running 1 test with the name `Smoke`.
#   We're only test BDD tests that contain the tag `@smoke`.
#   And we're ignoring Python Versions 3.6 and 3.5.
# 3. ignoreOperatingSystems
#   Comma delimited list of OS not to be tested against.
#   E.g. = win, linux
#   Possible values = mac, win linux
# 4. vscodeChannels
#   Comma delimited list of VSC Versions.
#   Defaults include = `stable`,`insider`
#   If changed to `stable`, then only `stable` is tested.
#
#   Sample:
#   ```
#   parameters:
#   vscodeChannels: ['stable']
#   jobs:
#   - test: "Smoke"
#     tags: "@smoke"
#     ignorePythonVersions: "3.6,3.5"
#   ```
#   Based on this sample, we're running 1 test with the name `Smoke`.
#   We're only testing against the `stable` version of VSC.
# 5. pythonVersions
#   Do not pass (these are internal variables).
#   Defines the versions of Pythons versions we run tests against.
#   We use this to build a list of python versions as a list instead of having to hardcode them.
#   This way we just use a simple for loop and run jobs for each OS and each Python version.
#   Note: The display name MUST not contain spaces, hyphens and periods or other similar funky characters.
#   Use [A-Za-z_], else Azure starts playing up (recommended by Azure Devops via support).

parameters:
  jobs: []
  ignorePythonVersions: ""
  ignoreOperatingSystems: ""
  vscodeChannels: ['stable', 'insider']
  pythonVersions: [
      # All scenarios tagged with `@noNeedToTestInAllPython`, will run in the latest version of Python.
      # When using other versions of Python, ignore `@noNeedToTestInAllPython`.
      {
          "version": "3.7.4",
          "displayName": "37",
          "excludeTags": "not @python3.6 and not @python3.5 and not @python2"
      },
      {
          "version": "3.6",
          "displayName": "36",
          "excludeTags": "not @python3.7 and not @python3.5 and not @python2 and not @noNeedToTestInAllPython"
      },
      {
          "version": "3.5",
          "displayName": "35",
          "excludeTags": "not @python3.7 and not @python3.6 and not @python2 and not @noNeedToTestInAllPython"
      },
      {
          "version": "2.7",
          "displayName": "27",
          "excludeTags": "not @python3.7 and not @python3.6 and not @python3.5 and not @python3 and not @noNeedToTestInAllPython"
      }
    ]


jobs:
- job: UITest
  # Remember, some tests can take easily an hour (the `tests` features take just around 1 hour).
  timeoutInMinutes: 90
  # Build our matrix (permutations of VS Code + Tests + Pyhton + OS).
  strategy:
    matrix:
      ${{ each channel in parameters.vscodeChannels }}:
        ${{ each job in parameters.jobs }}:
          ${{ each py in parameters.pythonVersions }}:
            ${{ if not(contains(coalesce(job.ignorePythonVersions, ''), py.version)) }}:
              ${{ if not(contains(coalesce(job.ignoreOperatingSystems, ''), 'mac')) }}:
                ${{ format('Mac{2}{0}{1}', py.displayName, job.test, channel) }}:
                    PythonVersion: ${{ py.version }}
                    VMImageName: "macos-latest"
                    VSCodeChannel: ${{ channel }}
                    Tags: ${{ format('{0} and {1} and not @win and not @linux', job.tags, py.excludeTags) }}

              ${{ if not(contains(coalesce(job.ignoreOperatingSystems, ''), 'win')) }}:
                ${{ format('Win{2}{0}{1}', py.displayName, job.test, channel) }}:
                    PythonVersion: ${{ py.version }}
                    VSCodeChannel: ${{ channel }}
                    VMImageName: "vs2017-win2016"
                    Tags: ${{ format('{0} and {1} and not @mac and not @linux', job.tags, py.excludeTags) }}

              ${{ if not(contains(coalesce(job.ignoreOperatingSystems, ''), 'linux')) }}:
                ${{ format('Linux{2}{0}{1}', py.displayName, job.test, channel) }}:
                    PythonVersion: ${{ py.version }}
                    VSCodeChannel: ${{ channel }}
                    VMImageName: "ubuntu-latest"
                    Tags: ${{ format('{0} and {1} and not @mac and not @win', job.tags, py.excludeTags) }}

  pool:
    vmImage: $(VMImageName)

  steps:
    - template: ../steps/uitest.yml
