parameters:
  PythonVersion: '3.7'
  NodeVersion: '8.11.2'
  NpmVersion: 'latest'
  AzureStorageAccountName: 'vscodepythonci'
  AzureStorageContainerName: 'vscode-python-ci'
  Platform: 'Windows'
  pool:
    name: 'Hosted VS2017'
  EnvironmentExecutableFolder: 'Scripts'
  PYTHON_VIRTUAL_ENVS_LOCATION: './src/tmp/envPaths.json'
  TEST_FILES_SUFFIX: 'testvirtualenvs'
  TestSuiteName: 'testSingleWorkspace'
  DependsOn: 'Prebuild'
  MOCHA_CI_REPORTER_ID: ''
  MOCHA_CI_REPORTFILE: '$(Build.ArtifactStagingDirectory)/reports/junit-report.xml'
  #MOCHA_REPORTER_JUNIT: false

jobs:
- job:
  displayName: ${{ format('VirtualEnvTest {0} Py{1}', parameters.Platform, parameters.PythonVersion) }}
  dependsOn: ${{ parameters.DependsOn }}
  pool: ${{ parameters.pool }}

  variables:
    nodeVersion: ${{ parameters.NodeVersion }}
    npmVersion: ${{ parameters.NpmVersion }}
    pythonVersion: ${{ parameters.PythonVersion }}
    platform: ${{ parameters.Platform }}
    azureStorageAcctName: ${{ parameters.AzureStorageAccountName }}
    azureStorageContainerName: ${{ parameters.AzureStorageContainerName }}
    environmentExecutableFolder: ${{ parameters.EnvironmentExecutableFolder }}
    PYTHON_VIRTUAL_ENVS_LOCATION: ${{ parameters.PYTHON_VIRTUAL_ENVS_LOCATION }}
    TEST_FILES_SUFFIX: ${{ parameters.TEST_FILES_SUFFIX }}
    TestSuiteName: ${{ parameters.TestSuiteName }}
    MOCHA_CI_REPORTER_ID: ${{ parameters.MOCHA_CI_REPORTER_ID }}
    MOCHA_CI_REPORTFILE: ${{ parameters.MOCHA_CI_REPORTFILE }}
    MOCHA_REPORTER_JUNIT: ${{ parameters.MOCHA_REPORTER_JUNIT }}

  steps:
    - bash: |
        printenv

      displayName: 'Show all env vars'
      condition: variables['system.debug']


    - powershell: |
        New-Item -ItemType directory -Path "$(System.ArtifactsDirectory)/bin-artifacts"

        $buildArtifactUri = "https://$(azureStorageAcctName).blob.core.windows.net/$(azureStorageContainerName)/$(Build.BuildNumber)/bin-artifacts.zip"
        Write-Verbose "Downloading from $buildArtifactUri"

        $destination = "$(System.ArtifactsDirectory)/bin-artifacts/bin-artifacts.zip"
        Write-Verbose "Destination file: $destination"

        Invoke-WebRequest -Uri $buildArtifactUri -OutFile $destination -Verbose

      displayName: 'Download bin-artifacts from cloud-storage'


    - task: ExtractFiles@1
      displayName: 'Splat bin-artifacts'
      inputs:
        archiveFilePatterns: '$(System.ArtifactsDirectory)/bin-artifacts/bin-artifacts.zip'

        destinationFolder: '$(Build.SourcesDirectory)'

        cleanDestinationFolder: false


    - task: NodeTool@0
      displayName: 'Use Node $(nodeVersion)'
      inputs:
        versionSpec: '$(nodeVersion)'


    - task: UsePythonVersion@0
      displayName: 'Use Python $(pythonVersion)'
      inputs:
        versionSpec: '$(pythonVersion)'


    - task: CmdLine@1
      displayName: 'pip install pipenv'
      inputs:
        filename: python

        arguments: '-m pip install pipenv'


    - bash: |
       pipenv run python ./build/ci/addEnvPath.py $(PYTHON_VIRTUAL_ENVS_LOCATION) pipenvPath

      displayName: 'Create and save pipenv environment'


    - task: CmdLine@1
      displayName: 'Create venv environment'
      inputs:
        filename: python

        arguments: '-m venv .venv'


    - bash: |
       .venv/$(environmentExecutableFolder)/python ./build/ci/addEnvPath.py $(PYTHON_VIRTUAL_ENVS_LOCATION) venvPath

      displayName: 'Save venv environment executable'


    - task: CmdLine@1
      displayName: 'pip install virtualenv'
      inputs:
        filename: python

        arguments: '-m pip install virtualenv'


    - task: CmdLine@1
      displayName: 'Create virtualenv environment'
      inputs:
        filename: python

        arguments: '-m virtualenv .virtualenv'


    - bash: |
       .virtualenv/$(environmentExecutableFolder)/python ./build/ci/addEnvPath.py $(PYTHON_VIRTUAL_ENVS_LOCATION) virtualEnvPath

      displayName: 'Save virtualenv environment executable'

    - powershell: |
       Write-Host $Env:CONDA
       Write-Host $Env:PYTHON_VIRTUAL_ENVS_LOCATION

       if( '$(platform)' -eq 'Windows' ){
           $condaPythonPath = Join-Path -Path $Env:CONDA -ChildPath python

       } else{
           $condaPythonPath = Join-Path -Path $Env:CONDA -ChildPath $(environmentExecutableFolder) | Join-Path -ChildPath python
           $condaExecPath = Join-Path -Path $Env:CONDA -ChildPath $(environmentExecutableFolder) | Join-Path -ChildPath conda
           & $condaPythonPath ./build/ci/addEnvPath.py $(PYTHON_VIRTUAL_ENVS_LOCATION) condaExecPath $condaExecPath

       }

       & $condaPythonPath ./build/ci/addEnvPath.py $(PYTHON_VIRTUAL_ENVS_LOCATION) condaPath

       Get-Content $Env:PYTHON_VIRTUAL_ENVS_LOCATION

      displayName: 'Save conda environment executable'


    - task: Npm@1
      displayName: 'update npm'
      inputs:
        command: custom

        verbose: true

        customCommand: 'install -g npm@$(NpmVersion)'


    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: custom

        verbose: true

        customCommand: ci


    - script: |
        set -e
        /usr/bin/Xvfb :10 -ac >> /tmp/Xvfb.out 2>&1 &
        disown -ar
      displayName: 'Start xvfb'
      condition: and(succeeded(), eq(variables['Platform'], 'Linux'))


    - bash: |
        npm run $(TestSuiteName)

      displayName: 'run $(TestSuiteName)'
      env:
        DISPLAY: :10

#    - task: PythonScript@0
#      displayName: 'Ensure test results'
#      inputs:
#        scriptSource: inline
#        failOnStderr: true
#        script: |
#          from __future__ import print_function
#
#          import os
#          import sys
#
#
#          test_logfile = os.environ.get('MOCHA_CI_REPORTFILE')
#
#          if not os.path.exists(test_logfile):
#              print('##vso[task.logissue type=error]Cannot find mocha test results file {}. Did the test run actually fail?'.format(test_logfile))
#              print('ERROR: Log file could not be found. Ensure test run did not fail.', file=sys.stderr)
#
#
#    - task: PublishTestResults@2
#      displayName: 'Publish JUnit test results'
#      condition: always()
#      inputs:
#        testResultsFiles: '$(MOCHA_CI_REPORTFILE)'
#        searchFolder: '$(Build.ArtifactStagingDirectory)'
#        testRunTitle: '$(Platform) py$(pythonVersion) TestVirtualEnv'
#        buildPlatform: '$(Platform)-py$(pythonVersion)'
#        buildConfiguration: 'TestVirtualEnv'
