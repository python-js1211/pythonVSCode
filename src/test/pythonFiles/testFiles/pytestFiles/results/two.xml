<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="11" name="pytest" skips="3" tests="33" time="0.210"><testcase classname="test_root.Test_Root_test1" file="test_root.py" line="6" name="test_Root_A" time="0.001688241958618164"><failure message="AssertionError: Not implemented">self = &lt;test_root.Test_Root_test1 testMethod=test_Root_A&gt;

    def test_Root_A(self):
&gt;       self.fail(&quot;Not implemented&quot;)
E       AssertionError: Not implemented

test_root.py:8: AssertionError</failure></testcase><testcase classname="test_root.Test_Root_test1" file="test_root.py" line="9" name="test_Root_B" time="0.0007982254028320312"></testcase><testcase classname="test_root.Test_Root_test1" file="test_root.py" line="12" name="test_Root_c" time="0.0004982948303222656"><skipped message="demonstrating skipping" type="pytest.skip">test_root.py:12: &lt;py._xmlgen.raw object at 0x1024cf048&gt;</skipped></testcase><testcase classname="tests.test_another_pytest" file="tests/test_another_pytest.py" line="12" name="test_username" time="0.0006861686706542969"></testcase><testcase classname="tests.test_another_pytest" file="tests/test_another_pytest.py" line="15" name="test_parametrized_username[one]" time="0.0006616115570068359"></testcase><testcase classname="tests.test_another_pytest" file="tests/test_another_pytest.py" line="15" name="test_parametrized_username[two]" time="0.0005772113800048828"></testcase><testcase classname="tests.test_another_pytest" file="tests/test_another_pytest.py" line="15" name="test_parametrized_username[three]" time="0.0009157657623291016"><failure message="AssertionError: assert &apos;three&apos; in [&apos;one&apos;, &apos;two&apos;, &apos;threes&apos;]">non_parametrized_username = &apos;three&apos;

    def test_parametrized_username(non_parametrized_username):
&gt;       assert non_parametrized_username in [&apos;one&apos;, &apos;two&apos;, &apos;threes&apos;]
E       AssertionError: assert &apos;three&apos; in [&apos;one&apos;, &apos;two&apos;, &apos;threes&apos;]

tests/test_another_pytest.py:17: AssertionError</failure></testcase><testcase classname="tests.test_foreign_nested_tests.TestNestedForeignTests.TestInheritingHere.().TestExtraNestedForeignTests.()" file="tests/external.py" line="2" name="test_super_deep_foreign" time="0.0021979808807373047"><failure message="AssertionError">self = &lt;tests.external.ForeignTests.TestExtraNestedForeignTests object at 0x10fb685c0&gt;

    def test_super_deep_foreign(self):
&gt;       assert False
E       AssertionError

tests/external.py:4: AssertionError</failure></testcase><testcase classname="tests.test_foreign_nested_tests.TestNestedForeignTests.TestInheritingHere.()" file="tests/external.py" line="4" name="test_foreign_test" time="0.0007357597351074219"><failure message="AssertionError">self = &lt;tests.test_foreign_nested_tests.TestNestedForeignTests.TestInheritingHere object at 0x10fb74898&gt;

    def test_foreign_test(self):
&gt;       assert False
E       AssertionError

tests/external.py:6: AssertionError</failure></testcase><testcase classname="tests.test_foreign_nested_tests.TestNestedForeignTests.TestInheritingHere.()" file="tests/test_foreign_nested_tests.py" line="5" name="test_nested_normal" time="0.0006644725799560547"></testcase><testcase classname="tests.test_foreign_nested_tests.TestNestedForeignTests" file="tests/test_foreign_nested_tests.py" line="7" name="test_normal" time="0.0007319450378417969"></testcase><testcase classname="tests.test_pytest.Test_CheckMyApp" file="tests/test_pytest.py" line="6" name="test_simple_check" time="0.0006330013275146484"><skipped message="demonstrating skipping" type="pytest.skip">/Users/donjayamanne/anaconda3/lib/python3.6/site-packages/_pytest/nose.py:23: &lt;py._xmlgen.raw object at 0x1024fb518&gt;</skipped></testcase><testcase classname="tests.test_pytest.Test_CheckMyApp" file="tests/test_pytest.py" line="9" name="test_complex_check" time="0.0006620883941650391"></testcase><testcase classname="tests.test_pytest.Test_CheckMyApp.Test_NestedClassA.()" file="tests/test_pytest.py" line="13" name="test_nested_class_methodB" time="0.0004994869232177734"></testcase><testcase classname="tests.test_pytest.Test_CheckMyApp.Test_NestedClassA.().Test_nested_classB_Of_A.()" file="tests/test_pytest.py" line="16" name="test_d" time="0.0006279945373535156"></testcase><testcase classname="tests.test_pytest.Test_CheckMyApp.Test_NestedClassA.()" file="tests/test_pytest.py" line="18" name="test_nested_class_methodC" time="0.0005779266357421875"></testcase><testcase classname="tests.test_pytest.Test_CheckMyApp" file="tests/test_pytest.py" line="21" name="test_simple_check2" time="0.000728607177734375"></testcase><testcase classname="tests.test_pytest.Test_CheckMyApp" file="tests/test_pytest.py" line="23" name="test_complex_check2" time="0.0005090236663818359"></testcase><testcase classname="tests.test_pytest" file="tests/test_pytest.py" line="35" name="test_username" time="0.0008552074432373047"></testcase><testcase classname="tests.test_pytest" file="tests/test_pytest.py" line="38" name="test_parametrized_username[one]" time="0.0010302066802978516"></testcase><testcase classname="tests.test_pytest" file="tests/test_pytest.py" line="38" name="test_parametrized_username[two]" time="0.0009279251098632812"></testcase><testcase classname="tests.test_pytest" file="tests/test_pytest.py" line="38" name="test_parametrized_username[three]" time="0.001287698745727539"><failure message="AssertionError: assert &apos;three&apos; in [&apos;one&apos;, &apos;two&apos;, &apos;threes&apos;]">non_parametrized_username = &apos;three&apos;

    def test_parametrized_username(non_parametrized_username):
&gt;       assert non_parametrized_username in [&apos;one&apos;, &apos;two&apos;, &apos;threes&apos;]
E       AssertionError: assert &apos;three&apos; in [&apos;one&apos;, &apos;two&apos;, &apos;threes&apos;]

tests/test_pytest.py:40: AssertionError</failure></testcase><testcase classname="tests.test_unittest_one.Test_test1" file="tests/test_unittest_one.py" line="6" name="test_A" time="0.0006275177001953125"><failure message="AssertionError: Not implemented">self = &lt;test_unittest_one.Test_test1 testMethod=test_A&gt;

    def test_A(self):
&gt;       self.fail(&quot;Not implemented&quot;)
E       AssertionError: Not implemented

tests/test_unittest_one.py:8: AssertionError</failure></testcase><testcase classname="tests.test_unittest_one.Test_test1" file="tests/test_unittest_one.py" line="9" name="test_B" time="0.00047135353088378906"></testcase><testcase classname="tests.test_unittest_one.Test_test1" file="tests/test_unittest_one.py" line="12" name="test_c" time="0.0005207061767578125"><skipped message="demonstrating skipping" type="pytest.skip">tests/test_unittest_one.py:12: &lt;py._xmlgen.raw object at 0x102504cc0&gt;</skipped></testcase><testcase classname="tests.test_unittest_two.Test_test2" file="tests/test_unittest_two.py" line="3" name="test_A2" time="0.0006039142608642578"><failure message="AssertionError: Not implemented">self = &lt;test_unittest_two.Test_test2 testMethod=test_A2&gt;

    def test_A2(self):
&gt;       self.fail(&quot;Not implemented&quot;)
E       AssertionError: Not implemented

tests/test_unittest_two.py:5: AssertionError</failure></testcase><testcase classname="tests.test_unittest_two.Test_test2" file="tests/test_unittest_two.py" line="6" name="test_B2" time="0.0007021427154541016"></testcase><testcase classname="tests.test_unittest_two.Test_test2" file="tests/test_unittest_two.py" line="9" name="test_C2" time="0.0008001327514648438"><failure message="AssertionError: 1 != 2 : Not equal">self = &lt;test_unittest_two.Test_test2 testMethod=test_C2&gt;

    def test_C2(self):
&gt;       self.assertEqual(1,2,&apos;Not equal&apos;)
E       AssertionError: 1 != 2 : Not equal

tests/test_unittest_two.py:11: AssertionError</failure></testcase><testcase classname="tests.test_unittest_two.Test_test2" file="tests/test_unittest_two.py" line="12" name="test_D2" time="0.0005772113800048828"><failure message="ArithmeticError">self = &lt;test_unittest_two.Test_test2 testMethod=test_D2&gt;

    def test_D2(self):
&gt;       raise ArithmeticError()
E       ArithmeticError

tests/test_unittest_two.py:14: ArithmeticError</failure></testcase><testcase classname="tests.test_unittest_two.Test_test2a" file="tests/test_unittest_two.py" line="17" name="test_222A2" time="0.0005698204040527344"><failure message="AssertionError: Not implemented">self = &lt;test_unittest_two.Test_test2a testMethod=test_222A2&gt;

    def test_222A2(self):
&gt;       self.fail(&quot;Not implemented&quot;)
E       AssertionError: Not implemented

tests/test_unittest_two.py:19: AssertionError</failure></testcase><testcase classname="tests.test_unittest_two.Test_test2a" file="tests/test_unittest_two.py" line="20" name="test_222B2" time="0.0004627704620361328"></testcase><testcase classname="tests.unittest_three_test.Test_test3" file="tests/unittest_three_test.py" line="4" name="test_A" time="0.0006659030914306641"><failure message="AssertionError: Not implemented">self = &lt;unittest_three_test.Test_test3 testMethod=test_A&gt;

    def test_A(self):
&gt;       self.fail(&quot;Not implemented&quot;)
E       AssertionError: Not implemented

tests/unittest_three_test.py:6: AssertionError</failure></testcase><testcase classname="tests.unittest_three_test.Test_test3" file="tests/unittest_three_test.py" line="7" name="test_B" time="0.0006167888641357422"></testcase></testsuite>
