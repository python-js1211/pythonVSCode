parameters:
  name: 'Prebuild'
  PythonVersion: '3.7'
  NodeVersion: '8.11.2'
  NpmVersion: 'latest'
  pool:
    name: 'Hosted Ubuntu 1604'
  MOCHA_CI_REPORTER_ID: '$(Build.SourcesDirectory)/build/ci/mocha-vsts-reporter.js'
  MOCHA_CI_REPORTFILE: '$(Build.ArtifactStagingDirectory)/reports/junit-report.xml'
  MOCHA_REPORTER_JUNIT: true
  RunHygiene: true
  UploadBinary: false
  AzureStorageAccountName: 'vscodepythonci'
  AzureStorageContainerName: 'vscode-python-ci'

jobs:
- job: ${{ parameters.name }}
  pool: ${{ parameters.pool }}

  variables:
    nodeVersion: ${{ parameters.NodeVersion }}
    npmVersion: ${{ parameters.NpmVersion }}
    pythonVersion: ${{ parameters.PythonVersion }}
    mochaReportFile: ${{ parameters.MOCHA_CI_REPORTFILE }}
    MOCHA_CI_REPORTER_ID: ${{ parameters.MOCHA_CI_REPORTER_ID }}
    MOCHA_CI_REPORTFILE: ${{ parameters.MOCHA_CI_REPORTFILE }}
    MOCHA_REPORTER_JUNIT: ${{ parameters.MOCHA_REPORTER_JUNIT }}
    runHygiene: ${{ parameters.RunHygiene }}
    uploadBinary: ${{ parameters.UploadBinary }}
    azureStorageAcctName: ${{ parameters.AzureStorageAccountName }}
    azureStorageContainerName: ${{ parameters.AzureStorageContainerName }}
    plaform: ${{ parameters.Platform }}

  steps:
    - bash: |
        printenv

      displayName: 'Show all env vars'
      condition: variables['system.debug']


    - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
      displayName: 'Component Detection'

      continueOnError: true
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))


    - task: NodeTool@0
      displayName: 'Use Node $(nodeVersion)'
      inputs:
        versionSpec: '$(nodeVersion)'


    - task: UsePythonVersion@0
      displayName: 'Use Python $(pythonVersion)'
      inputs:
        versionSpec: '$(pythonVersion)'


    - task: Npm@1
      displayName: 'update npm'
      inputs:
        command: custom

        verbose: true

        customCommand: 'install -g npm@$(npmVersion)'


    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: custom

        verbose: true

        customCommand: ci


    - bash: echo AVAILABLE DEPENDENCY VERSIONS

        echo Node Version = `node -v`

        echo NPM Version = `npm -v`

        echo Python Version = `python --version`

      displayName: 'Show build dependency versions'
      name: 'show_bld_deps_vers'
      condition: and(succeeded(), variables['system.debug'])


    - task: Gulp@0
      displayName: 'gulp prePublishNonBundle'
      inputs:
        targets: 'prePublishNonBundle'


    - task: Gulp@0
      displayName: 'gulp code hygiene'
      inputs:
        targets: 'hygiene-modified'
      condition: and(succeeded(), eq(variables['runHygiene'], 'true'))


    - task: Npm@1
      displayName: 'run cover:enable'
      inputs:
        command: custom

        verbose: false

        customCommand: 'run cover:enable'


    - task: Npm@1
      displayName: 'run test:unittests'
      inputs:
        command: custom

        verbose: false

        customCommand: 'run test:unittests:cover'


    - bash: 'bash <(curl -s https://codecov.io/bash) -t $(COV_UUID)'
      displayName: 'publish codecov'
      continueOnError: true
      condition: always()

    - task: PublishTestResults@2
      displayName: 'Publish JUnit test results'
      condition: always()
      inputs:
        testResultsFiles: '$(MOCHA_CI_REPORTFILE)'
        searchFolder: '$(Build.ArtifactStagingDirectory)'
        testRunTitle: 'UnitTests $(Platform)-py$(pythonVersion)'
        buildPlatform: '$(Platform)-Py$(pythonVersion)'
        buildConfiguration: 'Unittests'


    - task: CmdLine@1
      displayName: 'pip upgrade pip'
      inputs:
        filename: python

        arguments: '-m pip install --upgrade "pip<19"'


    - task: CmdLine@1
      displayName: 'pip install test requirements'
      inputs:
        filename: python

        arguments: '-m pip install --upgrade -r ./build/test-requirements.txt'


    - task: CmdLine@1
      displayName: 'pip install python packages'
      inputs:
        filename: python

        arguments: '-m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt'


    - task: ArchiveFiles@2
      displayName: 'Capture Binaries'
      inputs:
        rootFolderOrFile: out

        archiveFile: '$(Build.ArtifactStagingDirectory)/bin-artifacts.zip'


    - task: AzureCLI@1
      displayName: 'Upload bin-artifacts to cloud-store'
      condition: and(succeeded(), eq(variables['uploadBinary'], 'true'))
      inputs:
        azureSubscription: 'dekeeler-ptvsazure-acct-for-dev'
        scriptLocation: inlineScript
        inlineScript: |
          az storage container create --account-name $(azureStorageAcctName) --name $(azureStorageContainerName)

          az storage blob upload --account-name $(azureStorageAcctName) --file "$(Build.ArtifactStagingDirectory)/bin-artifacts.zip" --container-name $(azureStorageContainerName) --name "$(Build.BuildNumber)/bin-artifacts.zip"
