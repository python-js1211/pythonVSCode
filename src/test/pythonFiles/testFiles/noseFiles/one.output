nose.config: INFO: Ignoring files matching ['^\\.', '^_', '^setup\\.py$']
nose.plugins.manager: DEBUG: Configuring plugins
nose.plugins.manager: DEBUG: Plugins enabled: [<nose.plugins.capture.Capture object at 0x108249f98>, <nose.plugins.logcapture.LogCapture object at 0x108139390>, <nose.plugins.deprecated.Deprecated object at 0x108307e80>, <nose.plugins.skip.Skip object at 0x108354908>, <nose.plugins.collect.CollectOnly object at 0x108423198>]
nose.core: DEBUG: configured Config(addPaths=True, args=(), configSection='nosetests', debug=None, debugLog=None, env={}, exclude=None, files=[], firstPackageWins=False, getTestCaseNamesCompat=False, ignoreFiles=[re.compile('^\\.'), re.compile('^_'), re.compile('^setup\\.py$')], ignoreFilesDefaultStrings=['^\\.', '^_', '^setup\\.py$'], include=None, includeExe=False, logStream=<_io.TextIOWrapper name='<stderr>' mode='w' encoding='UTF-8'>, loggingConfig=None, options=<Values at 0x108423c88: {'version': False, 'showPlugins': False, 'verbosity': 4, 'files': None, 'where': None, 'py3where': None, 'testMatch': '(?:^|[\\b_\\./-])[Tt]est', 'testNames': None, 'debug': None, 'debugLog': None, 'loggingConfig': None, 'ignoreFiles': [], 'exclude': [], 'include': [], 'stopOnError': False, 'addPaths': True, 'includeExe': False, 'traverseNamespace': False, 'firstPackageWins': False, 'byteCompile': True, 'attr': None, 'eval_attr': None, 'capture': True, 'logcapture': True, 'logcapture_format': '%(name)s: %(levelname)s: %(message)s', 'logcapture_datefmt': None, 'logcapture_filters': None, 'logcapture_clear': False, 'logcapture_level': 'NOTSET', 'enable_plugin_coverage': None, 'cover_packages': None, 'cover_erase': None, 'cover_tests': None, 'cover_min_percentage': None, 'cover_inclusive': None, 'cover_html': None, 'cover_html_dir': 'cover', 'cover_branches': None, 'cover_xml': None, 'cover_xml_file': 'coverage.xml', 'debugBoth': False, 'debugFailures': False, 'debugErrors': False, 'noDeprecated': False, 'enable_plugin_doctest': None, 'doctest_tests': None, 'doctestExtension': None, 'doctest_result_var': None, 'doctestFixtures': None, 'doctestOptions': None, 'enable_plugin_isolation': None, 'detailedErrors': None, 'noSkip': False, 'enable_plugin_id': None, 'testIdFile': '.noseids', 'failed': False, 'multiprocess_workers': 0, 'multiprocess_timeout': 10, 'multiprocess_restartworker': False, 'enable_plugin_xunit': None, 'xunit_file': 'nosetests.xml', 'xunit_testsuite_name': 'nosetests', 'enable_plugin_allmodules': None, 'collect_only': True}>, parser=<optparse.OptionParser object at 0x107758438>, parserClass=<class 'optparse.OptionParser'>, plugins=<nose.plugins.manager.DefaultPluginManager object at 0x107296390>, py3where=(), runOnInit=True, srcDirs=('lib', 'src'), stopOnError=False, stream=<_io.TextIOWrapper name='<stderr>' mode='w' encoding='UTF-8'>, testMatch=re.compile('(?:^|[\\b_\\./-])[Tt]est'), testMatchPat='(?:^|[\\b_\\./-])[Tt]est', testNames=[], traverseNamespace=False, verbosity=4, where=(), worker=False, workingDir='/Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single')
nose.importer: DEBUG: Add path /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single
nose.importer: DEBUG: insert /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single into sys.path
nose.plugins.collect: DEBUG: Preparing test loader
nose.core: DEBUG: test loader is <nose.loader.TestLoader object at 0x107905780>
nose.core: DEBUG: defaultTest .
nose.core: DEBUG: Test names are ['.']
nose.core: DEBUG: createTests called with None
nose.loader: DEBUG: load from . (None)
nose.selector: DEBUG: Test name . resolved to file ., module None, call None
nose.selector: DEBUG: Final resolution of test name .: file /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single module None call None
nose.plugins.collect: DEBUG: TestSuite([<nose.suite.LazySuite tests=generator (4433617416)>])
nose.plugins.collect: DEBUG: Add test <nose.suite.LazySuite tests=generator (4433617416)>
nose.core: DEBUG: runTests called
nose.suite: DEBUG: precache is []
nose.loader: DEBUG: load from dir /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single
nose.importer: DEBUG: Add path /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single
nose.selector: DEBUG: wantFile /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/test_root.py? True
nose.loader: DEBUG: load from /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/test_root.py (None)
nose.selector: DEBUG: Test name /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/test_root.py resolved to file /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/test_root.py, module None, call None
nose.selector: DEBUG: Final resolution of test name /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/test_root.py: file /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/test_root.py module test_root call None
nose.importer: DEBUG: Import test_root from /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single
nose.importer: DEBUG: Add path /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single
nose.importer: DEBUG: find module part test_root (test_root) in ['/Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single']
nose.loader: DEBUG: Load from module <module 'test_root' from '/Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/test_root.py'>
nose.selector: DEBUG: wantModule <module 'test_root' from '/Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/test_root.py'>? True
nose.selector: DEBUG: wantClass <class 'test_root.Test_Root_test1'>? True
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.addCleanup>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.addTypeEqualityFunc>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertAlmostEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertCountEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertDictContainsSubset>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertDictEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertFalse>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertGreater>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertGreaterEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertIn>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertIs>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertIsInstance>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertIsNone>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertIsNot>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertIsNotNone>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertLess>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertLessEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertListEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertLogs>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertMultiLineEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertNotAlmostEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertNotEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertNotIn>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertNotIsInstance>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertNotRegex>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertRaises>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertRaisesRegex>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertRegex>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertSequenceEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertSetEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertTrue>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertTupleEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertWarns>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.assertWarnsRegex>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.countTestCases>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.debug>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.defaultTestResult>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.doCleanups>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.fail>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.id>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.run>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.setUp>? None
nose.selector: DEBUG: wantMethod <bound method TestCase.setUpClass of <class 'test_root.Test_Root_test1'>>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.shortDescription>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.skipTest>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.subTest>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.tearDown>? None
nose.selector: DEBUG: wantMethod <bound method TestCase.tearDownClass of <class 'test_root.Test_Root_test1'>>? None
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.test_Root_A>? True
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.test_Root_B>? True
nose.selector: DEBUG: wantMethod <unbound method Test_Root_test1.test_Root_c>? True
nose.plugins.collect: DEBUG: TestSuite(<map object at 0x10843a748>)
nose.plugins.collect: DEBUG: Add test test_Root_A (test_root.Test_Root_test1)
nose.plugins.collect: DEBUG: Add test test_Root_B (test_root.Test_Root_test1)
nose.plugins.collect: DEBUG: Add test test_Root_c (test_root.Test_Root_test1)
nose.plugins.collect: DEBUG: TestSuite(<nose.suite.ContextList object at 0x10843a898>)
nose.plugins.collect: DEBUG: Add test <nose.plugins.collect.TestSuite tests=[Test(<test_root.Test_Root_test1 testMethod=test_Root_A>), Test(<test_root.Test_Root_test1 testMethod=test_Root_B>), Test(<test_root.Test_Root_test1 testMethod=test_Root_c>)]>
nose.plugins.collect: DEBUG: Preparing test case test_Root_A (test_root.Test_Root_test1)
test_Root_A (test_root.Test_Root_test1) ... ok
nose.plugins.collect: DEBUG: Preparing test case test_Root_B (test_root.Test_Root_test1)
test_Root_B (test_root.Test_Root_test1) ... ok
nose.plugins.collect: DEBUG: Preparing test case test_Root_c (test_root.Test_Root_test1)
test_Root_c (test_root.Test_Root_test1) ... ok
nose.selector: DEBUG: wantDirectory /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests? True
nose.plugins.collect: DEBUG: TestSuite(<generator object TestLoader.loadTestsFromDir at 0x1083f38e0>)
nose.loader: DEBUG: load from dir /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests
nose.importer: DEBUG: Add path /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests
nose.importer: DEBUG: insert /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests into sys.path
nose.selector: DEBUG: wantFile /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests/test_one.py? True
nose.loader: DEBUG: load from /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests/test_one.py (None)
nose.selector: DEBUG: Test name /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests/test_one.py resolved to file /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests/test_one.py, module None, call None
nose.selector: DEBUG: Final resolution of test name /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests/test_one.py: file /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests/test_one.py module test_one call None
nose.importer: DEBUG: Import test_one from /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests
nose.importer: DEBUG: Add path /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests
nose.importer: DEBUG: find module part test_one (test_one) in ['/Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests']
nose.loader: DEBUG: Load from module <module 'test_one' from '/Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests/test_one.py'>
nose.selector: DEBUG: wantModule <module 'test_one' from '/Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests/test_one.py'>? True
nose.selector: DEBUG: wantClass <class 'test_one.Test_test1'>? True
nose.selector: DEBUG: wantMethod <unbound method Test_test1.addCleanup>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.addTypeEqualityFunc>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertAlmostEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertCountEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertDictContainsSubset>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertDictEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertFalse>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertGreater>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertGreaterEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertIn>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertIs>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertIsInstance>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertIsNone>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertIsNot>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertIsNotNone>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertLess>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertLessEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertListEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertLogs>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertMultiLineEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertNotAlmostEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertNotEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertNotIn>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertNotIsInstance>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertNotRegex>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertRaises>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertRaisesRegex>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertRegex>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertSequenceEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertSetEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertTrue>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertTupleEqual>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertWarns>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.assertWarnsRegex>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.countTestCases>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.debug>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.defaultTestResult>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.doCleanups>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.fail>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.deprecated_func>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.id>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.run>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.setUp>? None
nose.selector: DEBUG: wantMethod <bound method TestCase.setUpClass of <class 'test_one.Test_test1'>>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.shortDescription>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.skipTest>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.subTest>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.tearDown>? None
nose.selector: DEBUG: wantMethod <bound method TestCase.tearDownClass of <class 'test_one.Test_test1'>>? None
nose.selector: DEBUG: wantMethod <unbound method Test_test1.test_A>? True
nose.selector: DEBUG: wantMethod <unbound method Test_test1.test_B>? True
nose.selector: DEBUG: wantMethod <unbound method Test_test1.test_c>? True
nose.plugins.collect: DEBUG: TestSuite(<map object at 0x10843a898>)
nose.plugins.collect: DEBUG: Add test test_A (test_one.Test_test1)
nose.plugins.collect: DEBUG: Add test test_B (test_one.Test_test1)
nose.plugins.collect: DEBUG: Add test test_c (test_one.Test_test1)
nose.plugins.collect: DEBUG: TestSuite(<nose.suite.ContextList object at 0x10843a898>)
nose.plugins.collect: DEBUG: Add test <nose.plugins.collect.TestSuite tests=[Test(<test_one.Test_test1 testMethod=test_A>), Test(<test_one.Test_test1 testMethod=test_B>), Test(<test_one.Test_test1 testMethod=test_c>)]>
nose.plugins.collect: DEBUG: Add test <nose.plugins.collect.TestSuite tests=[<nose.plugins.collect.TestSuite tests=[Test(<test_one.Test_test1 testMethod=test_A>), Test(<test_one.Test_test1 testMethod=test_B>), Test(<test_one.Test_test1 testMethod=test_c>)]>]>
nose.importer: DEBUG: Remove path /Users/donjayamanne/.vscode/extensions/pythonVSCode/src/test/pythonFiles/testFiles/single/tests
nose.plugins.collect: DEBUG: Preparing test case test_A (test_one.Test_test1)
test_A (test_one.Test_test1) ... ok
nose.plugins.collect: DEBUG: Preparing test case test_B (test_one.Test_test1)
test_B (test_one.Test_test1) ... ok
nose.plugins.collect: DEBUG: Preparing test case test_c (test_one.Test_test1)
test_c (test_one.Test_test1) ... ok
nose.suite: DEBUG: precache is []

----------------------------------------------------------------------
Ran 6 tests in 0.023s

OK
